/* eslint-disable */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _JSXStyle = _interopDefault(require('styled-jsx/style'));
var React = require('react');
var React__default = _interopDefault(React);
var propTypes = _interopDefault(require('@dhis2/prop-types'));
var cx = _interopDefault(require('classnames'));
var ReactDOM = require('react-dom');
var ReactDOM__default = _interopDefault(ReactDOM);
var propTypes$1 = _interopDefault(require('prop-types'));

var colors = {
  /* colors */

  /*blue*/
  blue900: '#093371',
  blue800: '#0d47a1',
  blue700: '#1565c0',
  blue600: '#147cd7',
  blue500: '#2196f3',
  blue400: '#42a5f5',
  blue300: '#90caf9',
  blue200: '#c5e3fc',
  blue100: '#e3f2fd',
  blue050: '#f5fbff',

  /*teal*/
  teal900: '#00332b',
  teal800: '#004d40',
  teal700: '#00695c',
  teal600: '#00796b',
  teal500: '#00897b',
  teal400: '#009688',
  teal300: '#4db6ac',
  teal200: '#b2dfdb',
  teal100: '#e0f2f1',
  teal050: '#f1f9f9',

  /*red*/
  red900: '#330202',
  red800: '#891515',
  red700: '#b71c1c',
  red600: '#c62828',
  red500: '#d32f2f',
  red400: '#f44336',
  red300: '#e57373',
  red200: '#ffcdd2',
  red100: '#ffe5e8',
  red050: '#fff5f6',

  /*yellow*/
  yellow900: '#6f3205',
  yellow800: '#bb460d',
  yellow700: '#e56408',
  yellow600: '#ff8302',
  yellow500: '#ff9302',
  yellow400: '#ffa902',
  yellow300: '#ffc324',
  yellow200: '#ffe082',
  yellow100: '#ffecb3',
  yellow050: '#fff8e1',

  /*green*/
  green900: '#103713',
  green800: '#1b5e20',
  green700: '#2e7d32',
  green600: '#388e3c',
  green500: '#43a047',
  green400: '#4caf50',
  green300: '#a5d6a7',
  green200: '#c8e6c9',
  green100: '#e8f5e9',
  green050: '#f4fbf4',

  /*grey*/
  grey900: '#212934',
  grey800: '#404b5a',
  grey700: '#4a5768',
  grey600: '#6e7a8a',
  grey500: '#a0adba',
  grey400: '#d5dde5',
  grey300: '#e8edf2',
  grey200: '#f3f5f7',
  grey100: '#f8f9fa',
  grey050: '#fbfcfd',
  white: '#ffffff'
};
var theme = {
  /* theme */
  fonts: 'Roboto, sans-serif',

  /*primary*/
  primary900: colors.blue900,
  primary800: colors.blue800,
  primary700: colors.blue700,
  primary600: colors.blue600,
  primary500: colors.blue500,
  primary400: colors.blue400,
  primary300: colors.blue300,
  primary200: colors.blue200,
  primary100: colors.blue100,
  primary050: colors.blue050,

  /*secondary*/
  secondary900: colors.teal900,
  secondary800: colors.teal800,
  secondary700: colors.teal700,
  secondary600: colors.teal600,
  secondary500: colors.teal500,
  secondary400: colors.teal400,
  secondary300: colors.teal300,
  secondary200: colors.teal200,
  secondary100: colors.teal100,
  secondary050: colors.teal050,

  /*status*/
  default: colors.grey700,
  error: colors.red500,
  valid: colors.blue600,
  warning: colors.yellow500,
  disabled: colors.grey600
};
var layers = {
  applicationTop: 2000,
  blocking: 3000,
  alert: 9999
};
var spacers = {
  dp4: '4px',
  dp8: '8px',
  dp12: '12px',
  dp16: '16px',
  dp24: '24px',
  dp32: '32px',
  dp48: '48px',
  dp64: '64px',
  dp96: '96px',
  dp128: '128px',
  dp192: '192px',
  dp256: '256px',
  dp384: '384px',
  dp512: '512px',
  dp640: '640px'
}; // based on this CodePen: https://codepen.io/j_cpr/pen/oOBLMp
// which was produced by Joe Cooper

var elevations = {
  e100: '0 0 1px 0 rgba(64,75,90,0.20), 0 2px 1px 0 rgba(64,75,90,0.28)',
  e200: '0 0 1px 0 rgba(64,75,90,0.29), 0 3px 8px -2px rgba(64,75,90,0.30)',
  e300: '0 0 1px 0 rgba(64,75,90,0.30), 0 8px 18px -4px rgba(64,75,90,0.28)',
  e400: '0 0 1px 0 rgba(64,75,90,0.30), 0 14px 28px -6px rgba(64,75,90,0.30)'
};

var theme$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    colors: colors,
    theme: theme,
    layers: layers,
    spacers: spacers,
    elevations: elevations
});

/**
 * @module
 * @desc Normalize CSS
 * - https://github.com/necolas/normalize.css
 * - https://www.paulirish.com/2012/box-sizing-border-box-ftw/
 * @returns {React.Component}
 * @example import { CssReset } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/cssreset--default|Storybook}
 */

var CssReset = function CssReset() {
  return React__default.createElement(_JSXStyle, {
    id: "3745978156",
    dynamic: [theme.fonts, theme.fonts]
  }, ["html{line-height:1.15;-webkit-text-size-adjust:100%;box-sizing:border-box;}", "*,*:before,*:after{font-family:".concat(theme.fonts, ";box-sizing:inherit;}"), "body{margin:0;font-family:".concat(theme.fonts, ";}"), "main{display:block;}", "h1{font-size:2em;margin:0.67em 0;}", "hr{box-sizing:content-box;height:0;overflow:visible;}", "pre{font-family:monospace,monospace;font-size:1em;}", "a{background-color:transparent;}", "abbr[title]{border-bottom:none;-webkit-text-decoration:underline;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}", "b,strong{font-weight:bolder;}", "code,kbd,samp{font-family:monospace,monospace;font-size:1em;}", "small{font-size:80%;}", "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}", "sub{bottom:-0.25em;}", "sup{top:-0.5em;}", "img{border-style:none;}", "button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}", "button,input{overflow:visible;}", "button,select{text-transform:none;}", "button,[type='button'],[type='reset'],[type='submit']{-webkit-appearance:button;}", "button::-moz-focus-inner,[type='button']::-moz-focus-inner,[type='reset']::-moz-focus-inner,[type='submit']::-moz-focus-inner{border-style:none;padding:0;}", "button:-moz-focusring,[type='button']:-moz-focusring,[type='reset']:-moz-focusring,[type='submit']:-moz-focusring{outline:1px dotted ButtonText;}", "fieldset{padding:0.35em 0.75em 0.625em;}", "legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}", "progress{vertical-align:baseline;}", "textarea{overflow:auto;}", "[type='checkbox'],[type='radio']{box-sizing:border-box;padding:0;}", "[type='number']::-webkit-inner-spin-button,[type='number']::-webkit-outer-spin-button{height:auto;}", "[type='search']{-webkit-appearance:textfield;outline-offset:-2px;}", "[type='search']::-webkit-search-decoration{-webkit-appearance:none;}", "::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}", "details{display:block;}", "summary{display:list-item;}", "template{display:none;}", "[hidden]{display:none;}"]);
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var toPrefixedThemeSection = function toPrefixedThemeSection(themeSectionKey) {
  return Object.entries(theme$1[themeSectionKey]).reduce(function (prefixed, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    prefixed["".concat(themeSectionKey, "-").concat(key)] = value;
    return prefixed;
  }, {});
};

var toCustomPropertyString = function toCustomPropertyString(themeSection) {
  return Object.entries(themeSection).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        key = _ref4[0],
        value = _ref4[1];

    return "--".concat(key, ": ").concat(value, ";");
  }).join('\n');
};
/**
 * @module
 * @description Injects our theme variables as CSS custom properties
 * @param {CssVariables.PropTypes} props
 * @returns {React.Component}
 * @example import { CssVariables } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/cssvariables--default|Storybook}
 */


var CssVariables = function CssVariables(_ref5) {
  var colors = _ref5.colors,
      theme = _ref5.theme,
      layers = _ref5.layers,
      spacers = _ref5.spacers,
      elevations = _ref5.elevations;
  var allowedProps = {
    colors: colors,
    theme: theme,
    layers: layers,
    spacers: spacers,
    elevations: elevations
  };
  var variables = Object.keys(allowedProps) // Filter all props that are false
  .filter(function (prop) {
    return allowedProps[prop];
  }) // Map props to corresponding theme section and prefixes keys with section name
  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations
  .map(toCustomPropertyString) // Join all the sections to a single string
  .join('\n');
  return React__default.createElement(_JSXStyle, {
    id: "3443925957",
    dynamic: [variables]
  }, ["html{".concat(variables, ";}")]);
};

CssVariables.defaultProps = {
  colors: false,
  theme: false,
  layers: false,
  spacers: false,
  elevations: false
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {boolean} [colors]
 * @prop {boolean} [theme]
 * @prop {boolean} [layers]
 * @prop {boolean} [spacers]
 * @prop {boolean} [elevations]
 */

CssVariables.propTypes = {
  colors: propTypes.bool,
  elevations: propTypes.bool,
  layers: propTypes.bool,
  spacers: propTypes.bool,
  theme: propTypes.bool
};

/**
 * @module
 *
 * @param {Constrictor.PropTypes} props
 * @returns {React.Component}
 *
 * @desc con·stric·tor | \kən-ˈstrik-tər\
 * 1: a muscle that contracts a cavity or orifice or compresses an organ
 * 2: a snake (such as a boa constrictor) that coils around and compresses prey
 * 3: one that constricts
 */

var Constrictor = function Constrictor(_ref) {
  var width = _ref.width,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1474598979", [width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '']]])
  }, children, React__default.createElement(_JSXStyle, {
    id: "1474598979",
    dynamic: [width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '']
  }, ["div.__jsx-style-dynamic-selector{".concat(width ? "width: ".concat(width, ";") : '', " ").concat(minWidth ? "min-width: ".concat(minWidth, ";") : '', " ").concat(maxWidth ? "max-width: ".concat(maxWidth, ";") : '', ";}")]));
};
Constrictor.defaultProps = {
  dataTest: 'dhis2-uicore-constrictor'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [width]
 * @prop {string} [minWidth]
 * @prop {string} [maxWidth]
 * @prop {string} [dataTest]
 */

Constrictor.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string,
  maxWidth: propTypes.string,
  minWidth: propTypes.string,
  width: propTypes.string
};

var Action =
/*#__PURE__*/
function (_Component) {
  _inherits(Action, _Component);

  function Action() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Action);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Action)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "onClick", function (event) {
      _this.props.onClick(event);

      _this.props.hide(event);
    });

    return _this;
  }

  _createClass(Action, [{
    key: "render",
    value: function render() {
      return React__default.createElement("span", {
        onClick: this.onClick,
        "data-test": this.props.dataTest,
        className: _JSXStyle.dynamic([["663141299", [spacers.dp12]]])
      }, this.props.label, React__default.createElement(_JSXStyle, {
        id: "663141299",
        dynamic: [spacers.dp12]
      }, ["span.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp12, ";-webkit-text-decoration:underline;text-decoration:underline;}"), "span.__jsx-style-dynamic-selector:hover{cursor:pointer;}"]));
    }
  }]);

  return Action;
}(React.Component);

Action.propTypes = {
  dataTest: propTypes.string.isRequired,
  hide: propTypes.func.isRequired,
  label: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired
};

var Actions = function Actions(_ref) {
  var actions = _ref.actions,
      hide = _ref.hide,
      dataTest = _ref.dataTest;

  if (!actions) {
    return null;
  }

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["961263490", [spacers.dp48, spacers.dp12]]])
  }, actions.map(function (action) {
    return React__default.createElement(Action, _extends({
      key: action.label
    }, action, {
      hide: hide,
      dataTest: "".concat(dataTest, "-action")
    }));
  }), React__default.createElement(_JSXStyle, {
    id: "961263490",
    dynamic: [spacers.dp48, spacers.dp12]
  }, ["div.__jsx-style-dynamic-selector{margin-left:".concat(spacers.dp48, ";margin-right:-").concat(spacers.dp12, ";}")]));
};

var actionsPropType = propTypes.arrayWithLength(0, 2, propTypes.shape({
  label: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired
}));
Actions.propTypes = {
  dataTest: propTypes.string.isRequired,
  hide: propTypes.func.isRequired,
  actions: actionsPropType
};

function Close(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M38 12.83L35.17 10 24 21.17 12.83 10 10 12.83 21.17 24 10 35.17 12.83 38 24 26.83 35.17 38 38 35.17 26.83 24z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
Close.propTypes = {
  className: propTypes.string
};

var Dismiss = function Dismiss(_ref) {
  var onClick = _ref.onClick,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    onClick: onClick,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4165464483", [spacers.dp24]]])
  }, React__default.createElement(Close, null), React__default.createElement(_JSXStyle, {
    id: "4165464483",
    dynamic: [spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{margin-left:".concat(spacers.dp24, ";}"), "div.__jsx-style-dynamic-selector:hover{cursor:pointer;}", "div.__jsx-style-dynamic-selector svg{width:18px;height:18px;}"]));
};

Dismiss.propTypes = {
  dataTest: propTypes.string.isRequired,
  onClick: propTypes.func.isRequired
};

/**
 * @module
 * @private
 */

function Valid(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: _JSXStyle.dynamic([["2440664828", [theme.valid]]]) + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24c0 11.04 8.95 20 20 20 11.04 0 20-8.96 20-20 0-11.05-8.96-20-20-20zm-4 30L10 24l2.83-2.83L20 28.34l15.17-15.17L38 16 20 34z",
    className: _JSXStyle.dynamic([["2440664828", [theme.valid]]])
  }), React__default.createElement(_JSXStyle, {
    id: "2440664828",
    dynamic: [theme.valid]
  }, ["svg.__jsx-style-dynamic-selector{height:24px;width:24px;vertical-align:middle;pointer-events:none;fill:".concat(theme.valid, ";}")]));
}
Valid.propTypes = {
  className: propTypes.string
};
function Warning(_ref2) {
  var className = _ref2.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: _JSXStyle.dynamic([["3534230106", [theme.warning]]]) + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M2 42h44L24 4 2 42zm24-6h-4v-4h4v4zm0-8h-4v-8h4v8z",
    className: _JSXStyle.dynamic([["3534230106", [theme.warning]]])
  }), React__default.createElement(_JSXStyle, {
    id: "3534230106",
    dynamic: [theme.warning]
  }, ["svg.__jsx-style-dynamic-selector{height:24px;width:24px;vertical-align:middle;pointer-events:none;fill:".concat(theme.warning, ";}")]));
}
Warning.propTypes = {
  className: propTypes.string
};
function Error$1(_ref3) {
  var className = _ref3.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: _JSXStyle.dynamic([["4016510600", [theme.error]]]) + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M24 4C12.96 4 4 12.95 4 24s8.96 20 20 20 20-8.95 20-20S35.04 4 24 4zm2 30h-4v-4h4v4zm0-8h-4V14h4v12z",
    className: _JSXStyle.dynamic([["4016510600", [theme.error]]])
  }), React__default.createElement(_JSXStyle, {
    id: "4016510600",
    dynamic: [theme.error]
  }, ["svg.__jsx-style-dynamic-selector{height:24px;width:24px;vertical-align:middle;pointer-events:none;fill:".concat(theme.error, ";}")]));
}
Error$1.propTypes = {
  className: propTypes.string
};
function Info(_ref4) {
  var className = _ref4.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: _JSXStyle.dynamic([["198782611", [theme.info]]]) + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm2 30h-4V22h4v12zm0-16h-4v-4h4v4z",
    className: _JSXStyle.dynamic([["198782611", [theme.info]]])
  }), React__default.createElement(_JSXStyle, {
    id: "198782611",
    dynamic: [theme.info]
  }, ["svg.__jsx-style-dynamic-selector{height:24px;width:24px;vertical-align:middle;pointer-events:none;fill:".concat(theme.info, ";}")]));
}
Info.propTypes = {
  className: propTypes.string
};
function Loading(_ref5) {
  var className = _ref5.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "22 22 44 44",
    className: _JSXStyle.dynamic([["512049993", [theme.primary600, theme.primary600]]]) + " " + (className || "")
  }, React__default.createElement("circle", {
    cx: "44",
    cy: "44",
    r: "20.2",
    fill: "none",
    strokeWidth: "3.6",
    className: _JSXStyle.dynamic([["512049993", [theme.primary600, theme.primary600]]]) + " " + "circle"
  }), React__default.createElement(_JSXStyle, {
    id: "512049993",
    dynamic: [theme.primary600, theme.primary600]
  }, ["svg.__jsx-style-dynamic-selector{fill:".concat(theme.primary600, ";color:").concat(theme.primary600, ";width:24px;height:24px;-webkit-animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;}"), ".circle.__jsx-style-dynamic-selector{stroke:currentColor;stroke-dasharray:80px,200px;stroke-dashoffset:0;-webkit-animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;}", "@-webkit-keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@-webkit-keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}", "@keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}"]));
}
Loading.propTypes = {
  className: propTypes.string
};
var StatusIcon = function StatusIcon(_ref6) {
  var error = _ref6.error,
      warning = _ref6.warning,
      valid = _ref6.valid,
      loading = _ref6.loading,
      info = _ref6.info,
      className = _ref6.className,
      defaultTo = _ref6.defaultTo;

  if (error) {
    return React__default.createElement(Error$1, {
      className: className
    });
  }

  if (warning) {
    return React__default.createElement(Warning, {
      className: className
    });
  }

  if (valid) {
    return React__default.createElement(Valid, {
      className: className
    });
  }

  if (loading) {
    return React__default.createElement(Loading, {
      className: className
    });
  }

  if (info) {
    return React__default.createElement(Info, {
      className: className
    });
  }

  return defaultTo;
};
StatusIcon.defaultProps = {
  defaultTo: null
};
StatusIcon.propTypes = {
  className: propTypes.string,
  defaultTo: propTypes.element,
  error: propTypes.bool,
  info: propTypes.bool,
  loading: propTypes.bool,
  valid: propTypes.bool,
  warning: propTypes.bool
};

var Icon = function Icon(_ref) {
  var icon = _ref.icon,
      success = _ref.success,
      warning = _ref.warning,
      critical = _ref.critical,
      info = _ref.info;

  if (icon === false) {
    return null;
  }

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2765176098", [spacers.dp16]]])
  }, React__default.isValidElement(icon) ? icon : React__default.createElement(StatusIcon, {
    valid: success,
    error: critical,
    warning: warning,
    info: info
  }), React__default.createElement(_JSXStyle, {
    id: "2765176098",
    dynamic: [spacers.dp16]
  }, ["div.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp16, ";}"), "div.__jsx-style-dynamic-selector svg{width:24px;height:24px;}"]));
};

var iconPropType = propTypes.oneOfType([propTypes.bool, propTypes.element]);
var alertStatePropType = propTypes.mutuallyExclusive(['success', 'warning', 'critical', 'info'], propTypes.bool);
Icon.propTypes = {
  critical: alertStatePropType,
  icon: iconPropType,
  info: alertStatePropType,
  success: alertStatePropType,
  warning: alertStatePropType
};

var Message = function Message(_ref) {
  var children = _ref.children;
  return React__default.createElement("div", {
    className: "jsx-3951482246"
  }, children, React__default.createElement(_JSXStyle, {
    id: "3951482246"
  }, ["div.jsx-3951482246{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;min-width:240px;}"]));
};

Message.propTypes = {
  children: propTypes.string.isRequired
};

var ANIMATION_TIME = 350;
var _defaultExport = ["div.jsx-123723426{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-radius:4px;box-shadow:".concat(elevations.e300, ";padding-top:").concat(spacers.dp12, ";padding-right:").concat(spacers.dp16, ";padding-bottom:").concat(spacers.dp12, ";padding-left:").concat(spacers.dp24, ";margin-bottom:").concat(spacers.dp16, ";max-width:600px;font-size:14px;-webkit-transform:translateY(1000px);-ms-transform:translateY(1000px);transform:translateY(1000px);-webkit-transition:-webkit-transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);-webkit-transition:transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);transition:transform ").concat(ANIMATION_TIME, "ms cubic-bezier(0.4,0,0.6,1);pointer-events:all;}"), "div.info.jsx-123723426{background-color:".concat(colors.grey900, ";color:").concat(colors.white, ";}"), "div.info.jsx-123723426 path{fill:".concat(colors.white, ";}"), "div.success.jsx-123723426{background-color:".concat(colors.green800, ";color:").concat(colors.white, ";}"), "div.success.jsx-123723426 path{fill:".concat(colors.white, ";}"), "div.warning.jsx-123723426{background-color:".concat(colors.yellow300, ";color:").concat(colors.yellow900, ";}"), "div.warning.jsx-123723426 path{fill:".concat(colors.yellow900, ";}"), "div.critical.jsx-123723426{background-color:".concat(colors.red800, ";color:").concat(colors.white, ";}"), "div.critical.jsx-123723426 path{fill:".concat(colors.white, ";}"), "div.visible.jsx-123723426{-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}"];
_defaultExport.__hash = "123723426";

/**
 * @module
 * @param {AlertBar.PropTypes} props
 *
 * @returns {React.Component}
 *
 * @example import { AlertBar } from @dhis2/ui-core
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/alertbar.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/alertbar--default|Storybook}
 */

var AlertBar =
/*#__PURE__*/
function (_Component) {
  _inherits(AlertBar, _Component);

  function AlertBar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AlertBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlertBar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      visible: false,
      hidden: false
    });

    _defineProperty(_assertThisInitialized(_this), "startDisplayTimeout", function () {
      if (_this.shouldAutoHide()) {
        _this.displayTimeout = setTimeout(function () {
          _this.hide(null);
        }, _this.timeRemaining);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "stopDisplayTimeOut", function () {
      if (_this.shouldAutoHide()) {
        var elapsedTime = Date.now() - _this.startTime;

        _this.timeRemaining = _this.timeRemaining - elapsedTime;
        clearTimeout(_this.displayTimeout);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "hide", function (event) {
      clearTimeout(_this.displayTimeout);

      _this.setState({
        visible: false
      });

      _this.onHiddenTimeout = setTimeout(function () {
        _this.setState({
          hidden: true
        }, function () {
          return _this.props.onHidden && _this.props.onHidden({}, event);
        });
      }, ANIMATION_TIME);
    });

    return _this;
  }

  _createClass(AlertBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.init();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      // Only re-init when props change, ignore state changes
      if (prevState.visible === this.state.visible && prevState.hidden === this.state.hidden) {
        this.init();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.displayTimeout);
      clearTimeout(this.onHiddenTimeout);
    }
  }, {
    key: "init",
    value: function init() {
      this.startTime = Date.now();
      this.timeRemaining = this.props.duration;
      this.startDisplayTimeout();
      this.show();
    }
  }, {
    key: "show",
    value: function show() {
      var _this2 = this;

      requestAnimationFrame(function () {
        _this2.setState({
          visible: true
        });
      });
    }
  }, {
    key: "shouldAutoHide",
    value: function shouldAutoHide() {
      var _this$props = this.props,
          permanent = _this$props.permanent,
          warning = _this$props.warning,
          critical = _this$props.critical;
      return !(permanent || warning || critical);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          children = _this$props2.children,
          success = _this$props2.success,
          warning = _this$props2.warning,
          critical = _this$props2.critical,
          icon = _this$props2.icon,
          actions = _this$props2.actions,
          dataTest = _this$props2.dataTest;
      var _this$state = this.state,
          visible = _this$state.visible,
          hidden = _this$state.hidden;

      if (hidden) {
        return null;
      }

      var info = !critical && !success && !warning;
      return React__default.createElement("div", {
        "data-test": dataTest,
        onMouseEnter: this.stopDisplayTimeOut,
        onMouseLeave: this.startDisplayTimeout,
        className: "jsx-".concat(_defaultExport.__hash) + " " + (cx(className, {
          info: info,
          success: success,
          warning: warning,
          critical: critical,
          visible: visible
        }) || "")
      }, React__default.createElement(Icon, {
        icon: icon,
        critical: critical,
        success: success,
        warning: warning,
        info: info
      }), React__default.createElement(Message, null, children), React__default.createElement(Actions, {
        actions: actions,
        hide: this.hide,
        dataTest: dataTest
      }), React__default.createElement(Dismiss, {
        onClick: this.hide,
        dataTest: "".concat(dataTest, "-dismiss")
      }), React__default.createElement(_JSXStyle, {
        id: _defaultExport.__hash
      }, _defaultExport));
    }
  }]);

  return AlertBar;
}(React.Component);

var alertTypePropType = propTypes.mutuallyExclusive(['success', 'warning', 'critical'], propTypes.bool);
AlertBar.defaultProps = {
  duration: 8000,
  dataTest: 'dhis2-uicore-alertbar',
  icon: true
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} children - The message string for the alert
 * @prop {string} [className]
 * @prop {boolean} [success] - `success`, `warning`, and `critical` are
 * mutually exclusive props.
 * @prop {boolean} [warning]
 * @prop {boolean} [critical]
 *
 * @prop {(Element|boolean)} [icon=true]
 *
 * @prop {number} [duration]
 * @prop {boolean} [permanent]
 * @prop {Array} [actions] An array of 0-2 action objects with the shape: `{ label: {string}, onClick: {function} }`
 * @prop {function} [onHidden]
 * @prop {string} [dataTest]
 */

AlertBar.propTypes = {
  children: propTypes.string.isRequired,
  actions: actionsPropType,
  className: propTypes.string,
  critical: alertTypePropType,
  dataTest: propTypes.string,
  duration: propTypes.number,
  icon: iconPropType,
  permanent: propTypes.bool,
  success: alertTypePropType,
  warning: alertTypePropType,
  onHidden: propTypes.func
};

/**
 * @module
 * @param {AlertStack.PropTypes} props
 * @returns {React.Component}
 * @example import { AlertStack } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/alertstack--default|Storybook}
 */

var AlertStack = function AlertStack(_ref) {
  var className = _ref.className,
      children = _ref.children,
      dataTest = _ref.dataTest;
  return ReactDOM.createPortal(React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["132471376", [layers.alert]]]) + " " + (cx(className) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "132471376",
    dynamic: [layers.alert]
  }, ["div.__jsx-style-dynamic-selector{position:fixed;top:auto;right:auto;bottom:0;left:50%;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);z-index:".concat(layers.alert, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column-reverse;-ms-flex-direction:column-reverse;flex-direction:column-reverse;pointer-events:none;}")])), document.body);
};

AlertStack.defaultProps = {
  dataTest: 'dhis2-uicore-alertstack'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Array.<AlertBar>} [children]
 * @prop {string} [dataTest]
 */

AlertStack.propTypes = {
  children: propTypes.arrayOf(propTypes.element),
  className: propTypes.string,
  dataTest: propTypes.string
};

var statusPropType = propTypes.mutuallyExclusive(['valid', 'warning', 'error'], propTypes.bool);
var buttonVariantPropType = propTypes.mutuallyExclusive(['primary', 'secondary', 'destructive'], propTypes.bool);
var sizePropType = propTypes.mutuallyExclusive(['small', 'large'], propTypes.bool);
var singleSelectedPropType = propTypes.shape({
  label: propTypes.string,
  value: propTypes.string
});
var multiSelectedPropType = propTypes.arrayOf(singleSelectedPropType);

var _defaultExport$1 = ["button.jsx-3488140868{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border-radius:4px;font-weight:400;-webkit-letter-spacing:0.5px;-moz-letter-spacing:0.5px;-ms-letter-spacing:0.5px;letter-spacing:0.5px;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;-webkit-transition:all 0.15s cubic-bezier(0.4,0,0.6,1);transition:all 0.15s cubic-bezier(0.4,0,0.6,1);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(colors.grey900, ";height:36px;padding:0 ").concat(spacers.dp12, ";font-size:14px;line-height:16px;border:1px solid ").concat(colors.grey500, ";background-color:#f9fafb;}"), "button.jsx-3488140868:disabled{cursor:not-allowed;}", "button.jsx-3488140868:focus{outline:none;}", "button.jsx-3488140868::after{content:' ';pointer-events:none;position:absolute;top:-2px;right:-2px;bottom:-2px;left:-2px;z-index:1;border:2px solid transparent;border-radius:inherit;-webkit-transition:border-color 0.15s cubic-bezier(0.4,0,0.6,1);transition:border-color 0.15s cubic-bezier(0.4,0,0.6,1);}", "button.jsx-3488140868:active.jsx-3488140868:focus.jsx-3488140868::after,button.jsx-3488140868:disabled.jsx-3488140868:focus.jsx-3488140868::after{border-color:transparent;}", "button.jsx-3488140868:hover{border-color:".concat(colors.grey500, ";background-color:").concat(colors.grey200, ";}"), "button.jsx-3488140868:active,button.jsx-3488140868:active.jsx-3488140868:focus{border-color:".concat(colors.grey500, ";background-color:").concat(colors.grey200, ";box-shadow:0 0 0 1px rgb(0,0,0,0.1) inset;}"), "button.jsx-3488140868:focus{background-color:#f9fafb;}", "button.jsx-3488140868:focus.jsx-3488140868::after{border-color:".concat(theme.primary600, ";}"), "button.jsx-3488140868:disabled{border-color:".concat(colors.grey400, ";background-color:#f9fafb;box-shadow:none;color:").concat(theme.disabled, ";fill:").concat(theme.disabled, ";}"), "button.icon.jsx-3488140868{padding-left:".concat(spacers.dp12, ";}"), "button.icon-only.icon.jsx-3488140868{padding-left:6px;}", ".small.jsx-3488140868{height:28px;padding:0 8px;font-size:14px;line-height:16px;}", ".large.jsx-3488140868{height:43px;padding:0 ".concat(spacers.dp24, ";font-size:16px;-webkit-letter-spacing:0.57px;-moz-letter-spacing:0.57px;-ms-letter-spacing:0.57px;letter-spacing:0.57px;line-height:19px;}"), ".icon-only.jsx-3488140868{padding:0;}", ".icon-only.jsx-3488140868 i.jsx-3488140868{margin-right:0;margin-left:0;}", ".primary.jsx-3488140868{border-color:".concat(theme.primary800, ";background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#2b61b3;color:").concat(colors.white, ";fill:").concat(colors.white, ";font-weight:500;}"), ".primary.jsx-3488140868:hover{border-color:".concat(theme.primary800, ";background:linear-gradient(180deg,#054fa3 0%,#034793 100%);background-color:#21539f;}"), ".primary.jsx-3488140868:active,.primary.jsx-3488140868:active.jsx-3488140868:focus{border-color:".concat(theme.primary800, ";background:linear-gradient(180deg,#054fa3 0%,#034793 100%);background-color:#1c4a90;box-shadow:0 0 0 1px rgba(0,0,0,0.18) inset;}"), ".primary.jsx-3488140868:focus{background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#285dac;}", ".primary.jsx-3488140868:focus.jsx-3488140868::after{border-color:".concat(colors.yellow300, ";}"), ".primary.jsx-3488140868:disabled{border-color:".concat(theme.primary800, ";background:linear-gradient(180deg,#1565c0 0%,#0650a3 100%);background-color:#b6c8e2;box-shadow:none;color:").concat(colors.white, ";fill:").concat(colors.white, ";opacity:0.33;}"), ".secondary.jsx-3488140868{border-color:".concat(colors.grey400, ";background-color:transparent;}"), ".secondary.jsx-3488140868:hover{border-color:".concat(colors.grey400, ";background-color:rgba(160,173,186,0.08);}"), ".secondary.jsx-3488140868:active,.secondary.jsx-3488140868:active.jsx-3488140868:focus{border-color:".concat(colors.grey400, ";background-color:rgba(160,173,186,0.2);box-shadow:none;}"), ".secondary.jsx-3488140868:focus{background-color:transparent;}", ".secondary.jsx-3488140868:focus.jsx-3488140868::after{border-color:".concat(theme.primary600, ";}"), ".secondary.jsx-3488140868:disabled{border-color:".concat(colors.grey400, ";background-color:transparent;box-shadow:none;color:").concat(theme.disabled, ";fill:").concat(theme.disabled, ";}"), ".destructive.jsx-3488140868{border-color:#a10b0b;background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#b9242b;color:".concat(colors.white, ";fill:").concat(colors.white, ";font-weight:500;}"), ".destructive.jsx-3488140868:hover{border-color:#a10b0b;background:linear-gradient(180deg,#b81c1c 0%,#b80c0b 100%);background-color:#ac0f1a;}", ".destructive.jsx-3488140868:active,.destructive.jsx-3488140868:active.jsx-3488140868:focus{border-color:#a10b0b;background:linear-gradient(180deg,#b81c1c 0%,#b80c0b 100%);background-color:#ac101b;box-shadow:0 0 0 1px rgba(0,0,0,0.18) inset;}", ".destructive.jsx-3488140868:focus{background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#b72229;}", ".destructive.jsx-3488140868:focus.jsx-3488140868:after{border-color:#5e0303;}", ".destructive.jsx-3488140868:disabled{border-color:#a10b0b;background:linear-gradient(180deg,#d32f2f 0%,#b71c1c 100%);background-color:#e5b5b7;box-shadow:none;color:".concat(colors.white, ";fill:").concat(colors.white, ";opacity:0.33;}"), ".button-icon.jsx-3488140868{margin-right:6px;color:inherit;fill:inherit;font-size:26px;vertical-align:middle;pointer-events:none;}"];
_defaultExport$1.__hash = "3488140868";

/**
 * @module
 * @param {Button.PropTypes} props
 *
 * @returns {React.Component}
 *
 * @example import { Button } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/button-basic--default|Storybook}
 */

var Button =
/*#__PURE__*/
function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "buttonRef", React.createRef());

    return _this;
  }

  _createClass(Button, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.buttonRef.current.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          type = _this$props.type,
          children = _this$props.children,
          icon = _this$props.icon,
          name = _this$props.name,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          disabled = _this$props.disabled,
          _onClick = _this$props.onClick,
          className = _this$props.className,
          primary = _this$props.primary,
          secondary = _this$props.secondary,
          destructive = _this$props.destructive,
          small = _this$props.small,
          large = _this$props.large,
          dataTest = _this$props.dataTest;
      return React__default.createElement("button", {
        disabled: disabled,
        onClick: function onClick(event) {
          return _onClick && _onClick({
            name: name,
            value: value
          }, event);
        },
        type: type,
        name: name,
        value: value,
        ref: this.buttonRef,
        tabIndex: tabIndex,
        "data-test": dataTest,
        className: "jsx-".concat(_defaultExport$1.__hash) + " " + (cx(className, {
          primary: primary,
          secondary: secondary,
          destructive: destructive,
          small: small,
          large: large,
          'icon-only': icon && !children,
          icon: icon
        }) || "")
      }, icon && React__default.createElement("span", {
        className: "jsx-".concat(_defaultExport$1.__hash) + " " + "button-icon"
      }, icon), children, React__default.createElement(_JSXStyle, {
        id: _defaultExport$1.__hash
      }, _defaultExport$1));
    }
  }]);

  return Button;
}(React.Component);
Button.defaultProps = {
  type: 'button',
  dataTest: 'dhis2-uicore-button'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} [children] The children to render in the button
 * @prop {function} [onClick] The click handler
 *
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type=button] Type of button: `submit`, `reset`, or
 * `button`
 *
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 *
 * @prop {boolean} [disabled] Disable the button
 * @prop {Element} [icon]
 *
 * @prop {string} [dataTest]
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * state
 */

Button.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  destructive: buttonVariantPropType,
  disabled: propTypes.bool,
  icon: propTypes.element,
  initialFocus: propTypes.bool,
  large: sizePropType,
  name: propTypes.string,
  primary: buttonVariantPropType,
  secondary: buttonVariantPropType,
  small: sizePropType,
  tabIndex: propTypes.string,
  type: propTypes.oneOf(['submit', 'reset', 'button']),
  value: propTypes.string,
  onClick: propTypes.func
};

/**
 * @module
 * @param {Card.PropTypes} props
 * @returns {React.Component}
 * @example import { Card } from '@dhis2/ui-core'
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/card.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/card--default|Storybook}
 */

var Card = function Card(_ref) {
  var className = _ref.className,
      children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["166161216", [colors.white]]]) + " " + (cx(className) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "166161216",
    dynamic: [colors.white]
  }, ["div.__jsx-style-dynamic-selector{display:inline-block;position:relative;width:100%;height:100%;border-radius:3px;background:".concat(colors.white, ";box-shadow:0 0 1px 0 rgba(64,75,90,0.2), 0 2px 1px 0 rgba(64,75,90,0.28);}")]));
};

Card.defaultProps = {
  dataTest: 'dhis2-uicore-card'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest]
 */

Card.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string
};

var commonStyles = ["svg.jsx-1744227082{display:block;pointer-events:none;}", "svg.jsx-1744227082 .border.jsx-1744227082{fill:".concat(colors.grey600, ";}"), "svg.jsx-1744227082 .background.jsx-1744227082,svg.jsx-1744227082 .indeterminate.jsx-1744227082,svg.jsx-1744227082 .checkmark.jsx-1744227082{fill:".concat(colors.white, ";}"), "svg.checked.jsx-1744227082 .background.jsx-1744227082,svg.indeterminate.jsx-1744227082 .background.jsx-1744227082{fill:".concat(colors.teal400, ";}"), "svg.valid.jsx-1744227082 .background.jsx-1744227082{fill:".concat(colors.blue600, ";}"), "svg.warning.jsx-1744227082 .background.jsx-1744227082{fill:".concat(colors.yellow700, ";}"), "svg.error.jsx-1744227082 .background.jsx-1744227082{fill:".concat(colors.red500, ";}"), "svg.jsx-1744227082:not(.checked) .checkmark.jsx-1744227082,svg.jsx-1744227082:not(.indeterminate) .indeterminate.jsx-1744227082{fill:none;}", "svg.jsx-1744227082:not(.checked):not(.indeterminate) .background.jsx-1744227082{fill:".concat(colors.white, ";}")];
commonStyles.__hash = "1744227082";
function Regular(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    viewBox: "0 0 18 18",
    xmlns: "http://www.w3.org/2000/svg",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["3549931073", [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]]]) + " " + (className || "")
  }, React__default.createElement("rect", {
    x: "0",
    y: "0",
    width: "18",
    height: "18",
    rx: "3",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["3549931073", [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]]]) + " " + "background"
  }), React__default.createElement("path", {
    d: "M3,0 L15,0 C16.6568542,0 18,1.34314575 18,3 L18,15 C18,16.6568542 16.6568542,18 15,18 L3,18 C1.34314575,18 0,16.6568542 0,15 L0,3 C0,1.34314575 1.34314575,0 3,0 Z M3,2 C2.44771525,2 2,2.44771525 2,3 L2,15 C2,15.5522847 2.44771525,16 3,16 L15,16 C15.5522847,16 16,15.5522847 16,15 L16,3 C16,2.44771525 15.5522847,2 15,2 L3,2 Z",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["3549931073", [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]]]) + " " + "border"
  }), React__default.createElement("path", {
    d: "M4.74451387,8.02852516 C4.39595738,8.11985643 4.12375034,8.39235188 4.03251575,8.74127768 C3.94128115,9.09020348 4.04521722,9.46125864 4.30437605,9.71182782 L7.29823844,12.7078028 C7.68753993,13.0973991 8.31859767,13.0973991 8.70789916,12.7078028 L13.695624,6.71585285 C13.9547828,6.46528367 14.0587189,6.09422851 13.9674843,5.74530271 C13.8762497,5.39637691 13.6040426,5.12388146 13.2554861,5.0325502 C12.9069296,4.94121893 12.5362672,5.04526513 12.2859632,5.30469855 L8.0030688,10.5910713 L5.71403676,8.30067351 C5.46373279,8.0412401 5.09307036,7.9371939 4.74451387,8.02852516 Z",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["3549931073", [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]]]) + " " + "checkmark"
  }), React__default.createElement("rect", {
    x: "4",
    y: "8",
    width: "10",
    height: "2",
    rx: "1",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["3549931073", [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]]]) + " " + "indeterminate"
  }), React__default.createElement(_JSXStyle, {
    id: commonStyles.__hash
  }, commonStyles), React__default.createElement(_JSXStyle, {
    id: "3549931073",
    dynamic: [colors.teal700, colors.grey300, colors.grey400, colors.blue600, colors.blue700, colors.yellow700, colors.yellow800, colors.red500, colors.red700]
  }, ["svg.__jsx-style-dynamic-selector{width:18px;height:18px;}", "svg.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.teal700, ";}"), "svg.disabled.__jsx-style-dynamic-selector .background.__jsx-style-dynamic-selector{fill:".concat(colors.grey300, ";}"), "svg.disabled.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.grey400, ";}"), "svg.valid.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.blue600, ";}"), "svg.valid.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.valid.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.blue700, ";}"), "svg.warning.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.yellow700, ";}"), "svg.warning.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.warning.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.yellow800, ";}"), "svg.error.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.red500, ";}"), "svg.error.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.error.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.red700, ";}")]));
}
Regular.propTypes = {
  className: propTypes.string
};
function Dense(_ref2) {
  var className = _ref2.className;
  return React__default.createElement("svg", {
    viewBox: "0 0 14 14",
    xmlns: "http://www.w3.org/2000/svg",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["2720111562", [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]]]) + " " + (className || "")
  }, React__default.createElement("rect", {
    fill: "#009688",
    x: "0",
    y: "0",
    width: "14",
    height: "14",
    rx: "2",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["2720111562", [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]]]) + " " + "background"
  }), React__default.createElement("path", {
    d: "M2,0 L12,0 C13.1045695,0 14,0.8954305 14,2 L14,12 C14,13.1045695 13.1045695,14 12,14 L2,14 C0.8954305,14 0,13.1045695 0,12 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M2,1 C1.44771525,1 1,1.44771525 1,2 L1,12 C1,12.5522847 1.44771525,13 2,13 L12,13 C12.5522847,13 13,12.5522847 13,12 L13,2 C13,1.44771525 12.5522847,1 12,1 L2,1 Z",
    fill: "#004D40",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["2720111562", [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]]]) + " " + "border"
  }), React__default.createElement("path", {
    d: "M10.3520005,3.30015877 L5.54268293,8.03252726 L3.64634146,6.16652726 L2.28668615,7.5044281 L5.54310367,10.7010587 L11.7145993,4.628307 L10.3520005,3.30015877 Z M5.54268293,9.43547274 L5.61193184,9.36733181 L5.54226219,9.29894127 L5.47309681,9.367 L5.54268293,9.43547274 Z M10.6496329,4.41023392 L10.6495057,4.35652297 L10.5648412,4.35672356 L10.2854007,4.631693 L10.3553166,4.69984123 L10.6496329,4.41023392 Z M3.42891348,7.22439304 L3.35030905,7.22439304 L3.35034135,7.27820863 L3.64634146,7.56947274 L3.71331385,7.5035719 L3.42891348,7.22439304 Z",
    fill: "#FFFFFF",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["2720111562", [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]]]) + " " + "checkmark"
  }), React__default.createElement("rect", {
    fill: "#FFFFFF",
    x: "3",
    y: "6",
    width: "8",
    height: "2",
    className: "jsx-".concat(commonStyles.__hash) + " " + _JSXStyle.dynamic([["2720111562", [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]]]) + " " + "indeterminate"
  }), React__default.createElement(_JSXStyle, {
    id: commonStyles.__hash
  }, commonStyles), React__default.createElement(_JSXStyle, {
    id: "2720111562",
    dynamic: [colors.teal800, colors.grey400, colors.grey400, colors.grey500, colors.blue600, colors.blue800, colors.yellow700, colors.yellow800, colors.red500, colors.red800]
  }, ["svg.__jsx-style-dynamic-selector{width:14px;height:14px;}", "svg.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.teal800, ";}"), "svg.disabled.__jsx-style-dynamic-selector .background.__jsx-style-dynamic-selector{fill:".concat(colors.grey400, ";}"), "svg.disabled.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.grey400, ";}"), "svg.disabled.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.disabled.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.grey500, ";}"), "svg.valid.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.blue600, ";}"), "svg.valid.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.valid.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.blue800, ";}"), "svg.warning.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.yellow700, ";}"), "svg.warning.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.warning.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.yellow800, ";}"), "svg.error.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.red500, ";}"), "svg.error.checked.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector,svg.error.indeterminate.__jsx-style-dynamic-selector .border.__jsx-style-dynamic-selector{fill:".concat(colors.red800, ";}")]));
}
Dense.propTypes = {
  className: propTypes.string
};

/**
 * @module
 *
 * @param {Checkbox.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Checkbox } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkbox--default|Storybook}
 */

var Checkbox =
/*#__PURE__*/
function (_Component) {
  _inherits(Checkbox, _Component);

  function Checkbox() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "ref", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.onChange) {
        _this.props.onChange(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(_this.createHandlerPayload(), e);
      }
    });

    return _this;
  }

  _createClass(Checkbox, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.ref.current.focus();
      }
    }
  }, {
    key: "createHandlerPayload",
    value: function createHandlerPayload() {
      return {
        value: this.props.value,
        name: this.props.name,
        checked: !this.props.checked
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$checked = _this$props.checked,
          checked = _this$props$checked === void 0 ? false : _this$props$checked,
          _this$props$indetermi = _this$props.indeterminate,
          indeterminate = _this$props$indetermi === void 0 ? false : _this$props$indetermi,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          label = _this$props.label,
          name = _this$props.name,
          tabIndex = _this$props.tabIndex,
          valid = _this$props.valid,
          value = _this$props.value,
          warning = _this$props.warning,
          dense = _this$props.dense,
          dataTest = _this$props.dataTest;
      var classes = cx({
        checked: checked,
        indeterminate: indeterminate,
        disabled: disabled,
        valid: valid,
        error: error,
        warning: warning
      });
      return React__default.createElement("label", {
        "data-test": dataTest,
        className: _JSXStyle.dynamic([["1196148998", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx(className, {
          disabled: disabled,
          dense: dense
        }) || "")
      }, React__default.createElement("input", {
        type: "checkbox",
        ref: this.ref,
        name: name,
        value: value,
        checked: checked,
        disabled: disabled,
        tabIndex: tabIndex,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        className: _JSXStyle.dynamic([["1196148998", [colors.grey900, theme.disabled, colors.blue600]]])
      }), React__default.createElement("div", {
        className: _JSXStyle.dynamic([["1196148998", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx('icon', {
          dense: dense
        }) || "")
      }, dense ? React__default.createElement(Dense, {
        className: classes
      }) : React__default.createElement(Regular, {
        className: classes
      })), label, React__default.createElement(_JSXStyle, {
        id: "1196148998",
        dynamic: [colors.grey900, theme.disabled, colors.blue600]
      }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:5px;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;border-radius:4px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(colors.blue600, ";}")]));
    }
  }]);

  return Checkbox;
}(React.Component);

Checkbox.defaultProps = {
  dataTest: 'dhis2-uicore-checkbox'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {Node} label
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [indeterminate]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

var uniqueOnStatePropType = propTypes.mutuallyExclusive(['checked', 'indeterminate'], propTypes.bool);
Checkbox.propTypes = {
  label: propTypes.node.isRequired,
  checked: uniqueOnStatePropType,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  indeterminate: uniqueOnStatePropType,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  tabIndex: propTypes.string,
  valid: statusPropType,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {Field.PropTypes} props
 * @returns {React.Component}
 * @example import { Field } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/field--default|Storybook}
 */

var Field = function Field(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["618636905", [spacers.dp16]]]) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "618636905",
    dynamic: [spacers.dp16]
  }, ["div.__jsx-style-dynamic-selector{margin:0 0 ".concat(spacers.dp16, ";}")]));
};

Field.defaultProps = {
  dataTest: 'dhis2-uicore-field'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

Field.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {Help.PropTypes} props
 * @returns {React.Component}
 * @example import { Help } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/help--default|Storybook}
 */

var Help = function Help(_ref) {
  var children = _ref.children,
      valid = _ref.valid,
      error = _ref.error,
      warning = _ref.warning,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("p", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1324375661", [spacers.dp4, theme.default, theme.valid, theme.error, theme.warning]]]) + " " + (cx(className, {
      valid: valid,
      error: error,
      warning: warning
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "1324375661",
    dynamic: [spacers.dp4, theme.default, theme.valid, theme.error, theme.warning]
  }, ["p.__jsx-style-dynamic-selector{margin-top:".concat(spacers.dp4, ";margin-right:0;margin-bottom:0;margin-left:0;font-size:12px;line-height:14px;color:").concat(theme.default, ";cursor:help;}"), ".valid.__jsx-style-dynamic-selector{color:".concat(theme.valid, ";}"), ".error.__jsx-style-dynamic-selector{color:".concat(theme.error, ";}"), ".warning.__jsx-style-dynamic-selector{color:".concat(theme.warning, ";}")]));
};

Help.defaultProps = {
  dataTest: 'dhis2-uicore-help'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} children
 * @prop {string} [className]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {string} [dataTest]
 */

Help.propTypes = {
  children: propTypes.string.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  error: statusPropType,
  valid: statusPropType,
  warning: statusPropType
};

var Required = function Required(_ref) {
  var dataTest = _ref.dataTest;
  return React__default.createElement("span", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["149033372", [spacers.dp4]]])
  }, "*", React__default.createElement(_JSXStyle, {
    id: "149033372",
    dynamic: [spacers.dp4]
  }, ["span.__jsx-style-dynamic-selector{padding-left:".concat(spacers.dp4, ";}")]));
};
Required.propTypes = {
  dataTest: propTypes.string.isRequired
};

var AddRequired = function AddRequired(_ref) {
  var label = _ref.label,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement(React__default.Fragment, null, label, required && React__default.createElement(Required, {
    dataTest: "".concat(dataTest, "-required")
  }));
};
AddRequired.propTypes = {
  label: propTypes.node.isRequired,
  dataTest: propTypes.string,
  required: propTypes.bool
};

var ToggleField = function ToggleField(_ref) {
  var value = _ref.value,
      label = _ref.label,
      name = _ref.name,
      className = _ref.className,
      tabIndex = _ref.tabIndex,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      checked = _ref.checked,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      initialFocus = _ref.initialFocus,
      required = _ref.required,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      dataTest = _ref.dataTest,
      ToggleComponent = _ref.toggleComponent;
  return React__default.createElement(Field, {
    className: className,
    dataTest: dataTest
  }, React__default.createElement(ToggleComponent, {
    value: value,
    label: React__default.createElement(AddRequired, {
      label: label,
      required: required,
      dataTest: dataTest
    }),
    name: name,
    tabIndex: tabIndex,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    checked: checked,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    initialFocus: initialFocus
  }), helpText && React__default.createElement(Help, {
    dataTest: "".concat(dataTest, "-help")
  }, helpText), validationText && React__default.createElement(Help, {
    error: error,
    warning: warning,
    valid: valid,
    dataTest: "".concat(dataTest, "-validation")
  }, validationText));
};

ToggleField.defaultProps = {
  dataTest: 'dhis2-uicore-togglefield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @private
 *
 * @prop {string} value
 * @prop {Node} label
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {function} [onChange]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [checked]
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [dense]
 * @prop {boolean} [initialFocus]
 * @prop {boolean} [required]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {function} toggleComponent
 * @prop {string} [dataTest]
 */

ToggleField.propTypes = {
  label: propTypes.node.isRequired,
  toggleComponent: propTypes.func.isRequired,
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {CheckboxField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { CheckboxField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkboxfield--default|Storybook}
 */

var CheckboxField = function CheckboxField(_ref) {
  var value = _ref.value,
      label = _ref.label,
      name = _ref.name,
      className = _ref.className,
      tabIndex = _ref.tabIndex,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      checked = _ref.checked,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      initialFocus = _ref.initialFocus,
      required = _ref.required,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleField, {
    value: value,
    label: label,
    name: name,
    className: className,
    toggleComponent: Checkbox,
    tabIndex: tabIndex,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    checked: checked,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    initialFocus: initialFocus,
    required: required,
    helpText: helpText,
    validationText: validationText,
    dataTest: dataTest
  });
};

CheckboxField.defaultProps = {
  dataTest: 'dhis2-uicore-checkboxfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {string} label
 *
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {function} [onChange]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 *
 * @prop {boolean} [checked]
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {boolean} [initialFocus]
 * @prop {boolean} [required]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {string} [dataTest]
 */

CheckboxField.propTypes = {
  label: propTypes.node.isRequired,
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

var Spacer = function Spacer(_ref) {
  var children = _ref.children,
      dense = _ref.dense;
  return React__default.createElement("div", {
    className: "jsx-1966572528" + " " + (cx({
      dense: dense
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "1966572528"
  }, ["div.jsx-1966572528,div.dense.jsx-1966572528:first-of-type{padding-top:4px;}", "div.dense.jsx-1966572528{padding-top:2px;}"]));
};
Spacer.propTypes = {
  children: propTypes.node.isRequired,
  dense: propTypes.bool
};

var ToggleGroup = function ToggleGroup(_ref) {
  var children = _ref.children,
      value = _ref.value,
      onChange = _ref.onChange,
      name = _ref.name,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest
  }, React.Children.map(children, function (child) {
    return React__default.createElement(Spacer, {
      dense: child.props.dense || dense
    }, React.cloneElement(child, {
      name: name,
      onChange: child.props.onChange || onChange,
      checked: Array.isArray(value) ? value.indexOf(child.props.value) !== -1 : child.props.value === value,
      disabled: child.props.disabled || disabled,
      valid: child.props.valid || valid,
      warning: child.props.warning || warning,
      error: child.props.error || error,
      dense: child.props.dense || dense,
      className: cx(child.props.className, className)
    }));
  }));
};

ToggleGroup.defaultProps = {
  dataTest: 'dhis2-uicore-togglegroup'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @private
 *
 * @prop {Node} children
 * @prop {function} [onChange]
 * @prop {string} name
 * @prop {string|Array.<String>} [value]
 * @prop {string} [className]
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [dense]
 * @prop {string} [dataTest]
 */

ToggleGroup.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  name: propTypes.string,
  valid: statusPropType,
  value: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {CheckboxGroup.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { CheckboxGroup } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkboxgroup--default|Storybook}
 */

var CheckboxGroup = function CheckboxGroup(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroup, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    dataTest: dataTest
  }, children);
};

CheckboxGroup.defaultProps = {
  dataTest: 'dhis2-uicore-checkboxgroup'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Checkbox>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {Array.<String>} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [dataTest]
 */

CheckboxGroup.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  name: propTypes.string,
  valid: statusPropType,
  value: propTypes.arrayOf(propTypes.string),
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {FieldSet.PropTypes} props
 * @returns {React.Component}
 * @example import { FieldSet } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/fieldset--default}
 */

var FieldSet = function FieldSet(_ref) {
  var className = _ref.className,
      children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("fieldset", {
    "data-test": dataTest,
    className: "jsx-3541500486" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "3541500486"
  }, ["fieldset.jsx-3541500486{border:none;margin:0;padding:0;}"]));
};

FieldSet.defaultProps = {
  dataTest: 'dhis2-uicore-fieldset'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

FieldSet.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {Legend.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Legend } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/legend--default|Storybook}
 */

var Legend = function Legend(_ref) {
  var className = _ref.className,
      children = _ref.children,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement("legend", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["945530629", [colors.grey900]]]) + " " + (className || "")
  }, children, required && React__default.createElement(Required, {
    dataTest: "".concat(dataTest, "-required")
  }), React__default.createElement(_JSXStyle, {
    id: "945530629",
    dynamic: [colors.grey900]
  }, ["legend.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;color:".concat(colors.grey900, ";}")]));
};

Legend.defaultProps = {
  dataTest: 'dhis2-uicore-legend'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

Legend.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  required: propTypes.bool
};

var ToggleGroupField = function ToggleGroupField(_ref) {
  var children = _ref.children,
      value = _ref.value,
      onChange = _ref.onChange,
      name = _ref.name,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      className = _ref.className,
      label = _ref.label,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement(Field, {
    classname: className,
    dataTest: dataTest
  }, React__default.createElement(FieldSet, null, label && React__default.createElement(Legend, {
    required: required
  }, label), React__default.createElement(ToggleGroup, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense
  }, children), helpText && React__default.createElement(Help, {
    dataTest: "".concat(dataTest, "-help")
  }, helpText), validationText && React__default.createElement(Help, {
    error: error,
    warning: warning,
    valid: valid,
    dataTest: "".concat(dataTest, "-validation")
  }, validationText)));
};

ToggleGroupField.defaultProps = {
  dataTest: 'dhis2-uicore-togglegroupfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @private
 *
 * @prop {Node} children
 * @prop {function} [onChange]
 * @prop {string} name
 * @prop {string|Array.<String>} [value]
 * @prop {string} [className]
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [dense]
 *
 * @prop {string} [label]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

ToggleGroupField.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  name: propTypes.string,
  required: propTypes.bool,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {CheckboxGroupField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { CheckboxGroupField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/checkbox.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/checkboxgroupfield--default|Storybook}
 */

var CheckboxGroupField = function CheckboxGroupField(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      label = _ref.label,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroupField, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    label: label,
    helpText: helpText,
    validationText: validationText,
    required: required,
    dataTest: dataTest
  }, children);
};

CheckboxGroupField.defaultProps = {
  dataTest: 'dhis2-uicore-checkboxgroupfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Checkbox>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {Array.<String>} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [label]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

CheckboxGroupField.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  name: propTypes.string,
  required: propTypes.bool,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.arrayOf(propTypes.string),
  warning: statusPropType,
  onChange: propTypes.func
};

var Content = function Content(_ref) {
  var children = _ref.children,
      overflow = _ref.overflow;
  return React__default.createElement("span", {
    className: _JSXStyle.dynamic([["765109298", [spacers.dp12]]]) + " " + (cx({
      overflow: overflow
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "765109298",
    dynamic: [spacers.dp12]
  }, ["span.__jsx-style-dynamic-selector{margin:0 ".concat(spacers.dp12, ";color:inherit;white-space:nowrap;}"), ".overflow.__jsx-style-dynamic-selector{max-width:150px;overflow:hidden;text-overflow:ellipsis;}"]));
};
Content.propTypes = {
  children: propTypes.oneOfType([propTypes.string, propTypes.number]),
  overflow: propTypes.bool
};

var Icon$1 = function Icon(_ref) {
  var icon = _ref.icon;

  if (!icon) {
    return null;
  }

  return React__default.createElement("span", {
    className: _JSXStyle.dynamic([["2159848327", [spacers.dp4]]])
  }, icon, React__default.createElement(_JSXStyle, {
    id: "2159848327",
    dynamic: [spacers.dp4]
  }, ["span.__jsx-style-dynamic-selector{width:24px;height:24px;margin-left:".concat(spacers.dp4, ";margin-right:-6px;border-radius:50%;overflow:hidden;}"), "span.__jsx-style-dynamic-selector>*{max-height:24px;max-width:24px;}"]));
};
Icon$1.propTypes = {
  /** the slot for an icon is 24x24px, bigger elements will be clipped */
  icon: propTypes.element
};

function Cancel(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
Cancel.propTypes = {
  className: propTypes.string
};

var containerStyle = ["span.jsx-1081027468{display:block;height:18px;width:18px;margin-right:4px;}"];
containerStyle.__hash = "1081027468";
var removeIcon = {
  styles: React__default.createElement(_JSXStyle, {
    id: "4021744926"
  }, ["svg.jsx-4021744926{color:".concat(colors.grey700, ";height:18px;width:18px;cursor:pointer;opacity:1;pointer-events:all;}"), "svg.jsx-4021744926:hover{opacity:0.82;}"]),
  className: "jsx-4021744926"
};
var Remove = function Remove(_ref) {
  var onRemove = _ref.onRemove,
      dataTest = _ref.dataTest;

  if (!onRemove) {
    return null;
  }

  return React__default.createElement("span", {
    onClick: function onClick(e) {
      e.stopPropagation(); // stop onRemove from triggering onClick on container

      onRemove({}, e);
    },
    "data-test": dataTest,
    className: "jsx-".concat(containerStyle.__hash)
  }, React__default.createElement(Cancel, {
    className: removeIcon.className
  }), removeIcon.styles, React__default.createElement(_JSXStyle, {
    id: containerStyle.__hash
  }, containerStyle));
};
Remove.propTypes = {
  dataTest: propTypes.string.isRequired,
  onRemove: propTypes.func
};

/**
 * @module
 * @param {Chip.PropTypes} props
 * @returns {React.Component}
 * @example import { Chip } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/chip.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/chip--default|Storybook}
 */

var Chip = function Chip(_ref) {
  var selected = _ref.selected,
      disabled = _ref.disabled,
      dragging = _ref.dragging,
      overflow = _ref.overflow,
      className = _ref.className,
      children = _ref.children,
      onRemove = _ref.onRemove,
      _onClick = _ref.onClick,
      icon = _ref.icon,
      dataTest = _ref.dataTest;
  return React__default.createElement("span", {
    onClick: function onClick(e) {
      if (!disabled && _onClick) {
        _onClick({}, e);
      }
    },
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["80637826", [spacers.dp4, colors.grey200, colors.grey900, colors.grey300, theme.secondary600, colors.white]]]) + " " + (cx(className, {
      selected: selected,
      disabled: disabled,
      dragging: dragging
    }) || "")
  }, React__default.createElement(Icon$1, {
    icon: icon
  }), React__default.createElement(Content, {
    overflow: overflow
  }, children), React__default.createElement(Remove, {
    onRemove: onRemove,
    dataTest: "".concat(dataTest, "-remove")
  }), React__default.createElement(_JSXStyle, {
    id: "80637826",
    dynamic: [spacers.dp4, colors.grey200, colors.grey900, colors.grey300, theme.secondary600, colors.white]
  }, ["span.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:32px;margin:".concat(spacers.dp4, ";border-radius:16px;background-color:").concat(colors.grey200, ";font-size:14px;line-height:16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:").concat(colors.grey900, ";}"), "span.__jsx-style-dynamic-selector:hover{background-color:".concat(colors.grey300, ";}"), ".selected.__jsx-style-dynamic-selector{background-color:".concat(theme.secondary600, ";font-weight:500;}"), ".selected.__jsx-style-dynamic-selector:hover{background-color:#00695c;}", ".selected.__jsx-style-dynamic-selector,.selected.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector,.selected.__jsx-style-dynamic-selector .remove-icon.__jsx-style-dynamic-selector{color:".concat(colors.white, ";}"), ".disabled.__jsx-style-dynamic-selector{cursor:not-allowed;opacity:0.3;}", ".disabled.__jsx-style-dynamic-selector .remove-icon.__jsx-style-dynamic-selector{pointer-events:none;}", ".dragging.__jsx-style-dynamic-selector{box-shadow:0 3px 1px -2px rgba(0,0,0,0.2), 0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12);}"]));
};

Chip.defaultProps = {
  dataTest: 'dhis2-uicore-chip'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} children
 * @prop {string} [className]
 * @prop {Element} [icon]
 * @prop {function} [onClick]
 * @prop {function} [onRemove]
 * @prop {boolean} [selected]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dragging]
 * @prop {boolean} [overflow]
 * @prop {string} [dataTest]
 */

Chip.propTypes = {
  children: propTypes.string.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  dragging: propTypes.bool,
  icon: propTypes.element,
  overflow: propTypes.bool,
  selected: propTypes.bool,
  onClick: propTypes.func,
  onRemove: propTypes.func
};

/**
 * @module
 * @param {CircularLoader.PropTypes} props
 * @returns {React.Component}
 * @example import { CircularLoader } from @dhis2/ui-core
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/loading.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/circularloader--default|Storybook}
 */

var CircularLoader = function CircularLoader(_ref) {
  var small = _ref.small,
      large = _ref.large,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    role: "progressbar",
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["439163782", [spacers.dp16, theme.primary600]]]) + " " + (cx(className, {
      small: small,
      large: large
    }) || "")
  }, React__default.createElement("svg", {
    viewBox: "22 22 44 44",
    className: _JSXStyle.dynamic([["439163782", [spacers.dp16, theme.primary600]]])
  }, React__default.createElement("circle", {
    cx: "44",
    cy: "44",
    r: "20.2",
    fill: "none",
    strokeWidth: "3.6",
    className: _JSXStyle.dynamic([["439163782", [spacers.dp16, theme.primary600]]]) + " " + "circle"
  })), React__default.createElement(_JSXStyle, {
    id: "439163782",
    dynamic: [spacers.dp16, theme.primary600]
  }, ["div.__jsx-style-dynamic-selector{display:inline-block;margin:".concat(spacers.dp16, ";color:").concat(theme.primary600, ";-webkit-animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;animation:anim-rotate-__jsx-style-dynamic-selector 1.4s linear infinite;width:50px;height:50px;}"), ".small.__jsx-style-dynamic-selector{width:24px;height:24px;}", ".large.__jsx-style-dynamic-selector{width:80px;height:80px;}", "svg.__jsx-style-dynamic-selector{max-height:100%;max-width:100%;}", ".circle.__jsx-style-dynamic-selector{stroke:currentColor;stroke-dasharray:80px,200px;stroke-dashoffset:0;-webkit-animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;animation:anim-dash-__jsx-style-dynamic-selector 1.4s ease-in-out infinite;}", "@-webkit-keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@keyframes anim-rotate-__jsx-style-dynamic-selector{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}", "@-webkit-keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}", "@keyframes anim-dash-__jsx-style-dynamic-selector{0%{stroke-dasharray:1px,200px;stroke-dashoffset:0;}50%{stroke-dasharray:100px,200px;stroke-dashoffset:-15px;}100%{stroke-dasharray:100px,200px;stroke-dashoffset:-120px;}}"]));
};

CircularLoader.defaultProps = {
  dataTest: 'dhis2-uicore-circularloader'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive.
 * @prop {boolean} [large]
 * @prop {string} [dataTest]
 */

CircularLoader.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string,
  large: sizePropType,
  small: sizePropType
};

/**
 * @module
 * @param {ComponentCover.PropTypes} props
 * @returns {React.Component}
 * @example import { ComponentCover } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/componentcover--circularloader|Storybook}
 */

var ComponentCover = function ComponentCover(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3698233511", [layers.applicationTop - 1]]]) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "3698233511",
    dynamic: [layers.applicationTop - 1]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;height:inherit;width:inherit;z-index:".concat(layers.applicationTop - 1, ";background:rgba(33,43,54,0.4);}")]));
};

ComponentCover.defaultProps = {
  dataTest: 'dhis2-uicore-componentcover'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest]
 */

ComponentCover.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {Divider.PropTypes} props
 * @returns {React.Component}
 * @example import { Divider } from @dhis2/ui-core
 */

var Divider = function Divider(_ref) {
  var margin = _ref.margin,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3889267139", [colors.grey300]], ["4237085572", [margin]]]) + " " + (className || "")
  }, React__default.createElement(_JSXStyle, {
    id: "3889267139",
    dynamic: [colors.grey300]
  }, ["div.__jsx-style-dynamic-selector{display:inline-block;width:100%;height:1px;background-color:".concat(colors.grey300, ";}")]), React__default.createElement(_JSXStyle, {
    id: "4237085572",
    dynamic: [margin]
  }, ["div.__jsx-style-dynamic-selector{margin:".concat(margin, ";}")]));
};

Divider.defaultProps = {
  margin: "".concat(spacers.dp8, " 0"),
  dataTest: 'dhis2-uicore-divider'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {string} [margin="${spacers.dp8} 0"] - A CSS shorthand declaration for margin
 * @prop {string} [dataTest]
 */

Divider.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string,
  margin: propTypes.string
};

function Upload(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M0 0h24v24H0z",
    fill: "none",
    className: "jsx-4098137027"
  }), React__default.createElement("path", {
    d: "M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
Upload.propTypes = {
  className: propTypes.string
};

/**
 * @module
 * @param {FileInput.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileInput } from '@dhis2/ui-core'
 */

var FileInput =
/*#__PURE__*/
function (_Component) {
  _inherits(FileInput, _Component);

  function FileInput() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FileInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "ref", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      _this.ref.current.click();
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      var onChange = _this.props.onChange;

      if (onChange) {
        onChange({
          files: e.target.files,
          name: _this.props.name
        }, e);
      } // reset the file input so it won't prevent on-change
      // if the same file was added in a second attempt


      _this.ref.current.value = '';
    });

    return _this;
  }

  _createClass(FileInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          name = _this$props.name,
          buttonLabel = _this$props.buttonLabel,
          error = _this$props.error,
          valid = _this$props.valid,
          warning = _this$props.warning,
          accept = _this$props.accept,
          multiple = _this$props.multiple,
          small = _this$props.small,
          large = _this$props.large,
          disabled = _this$props.disabled,
          tabIndex = _this$props.tabIndex,
          dataTest = _this$props.dataTest;
      return React__default.createElement("div", {
        "data-test": dataTest,
        className: _JSXStyle.dynamic([["2067253638", [spacers.dp4, spacers.dp8]]]) + " " + (cx('file-input', className) || "")
      }, React__default.createElement("input", {
        id: name,
        name: name,
        type: "file",
        ref: this.ref,
        onChange: this.handleChange,
        accept: accept,
        multiple: multiple,
        disabled: disabled,
        className: _JSXStyle.dynamic([["2067253638", [spacers.dp4, spacers.dp8]]])
      }), React__default.createElement(Button, {
        onClick: this.handleClick,
        type: "button",
        icon: React__default.createElement(Upload, null),
        small: small,
        large: large,
        disabled: disabled,
        tabIndex: tabIndex
      }, buttonLabel), React__default.createElement(StatusIcon, {
        error: error,
        valid: valid,
        warning: warning
      }), React__default.createElement(_JSXStyle, {
        id: "2067253638",
        dynamic: [spacers.dp4, spacers.dp8]
      }, ["input.__jsx-style-dynamic-selector{display:none;}", ".file-input.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-bottom:".concat(spacers.dp4, ";}"), ".file-input.__jsx-style-dynamic-selector>svg{width:18px;height:18px;margin-left:".concat(spacers.dp8, ";}")]));
    }
  }]);

  return FileInput;
}(React.Component);

FileInput.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinput'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [buttonLabel]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning` and `error` are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 *
 * @prop {string} [accept=*] - the `accept` attribute of the native file input https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept
 * @prop {boolean} [multiple] - the `multiple` attribute of the native file input https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple
 * @prop {string} [dataTest]
 */

FileInput.propTypes = {
  accept: propTypes.string,
  buttonLabel: propTypes.string,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  error: statusPropType,
  large: sizePropType,
  multiple: propTypes.bool,
  name: propTypes.string,
  small: sizePropType,
  tabIndex: propTypes.string,
  valid: statusPropType,
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {FileList.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileList } from '@dhis2/ui-core'
 */

var FileList = function FileList(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: "jsx-2770071620" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "2770071620"
  }, ["div.jsx-2770071620{padding-top:4px;}", ".file-input+div.jsx-2770071620{padding-top:0;}"]));
};

FileList.defaultProps = {
  dataTest: 'dhis2-uicore-filelist'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {FileListPlaceholder|FileListItem|Array.<FileListItem>} [children]
 * @prop {string} [dataTest]
 */

FileList.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {FileListPlaceholder.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileListPlaceholder } from '@dhis2/ui-core'
 */

var FileListPlaceholder = function FileListPlaceholder(_ref) {
  var children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("p", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1287857385", [spacers.dp4, colors.grey700]]])
  }, children, React__default.createElement(_JSXStyle, {
    id: "1287857385",
    dynamic: [spacers.dp4, colors.grey700]
  }, ["p.__jsx-style-dynamic-selector{margin:0;padding-top:".concat(spacers.dp4, ";font-size:14px;color:").concat(colors.grey700, ";}")]));
};

FileListPlaceholder.defaultProps = {
  dataTest: 'dhis2-uicore-filelistplaceholder'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [children]
 * @prop {string} [dataTest]
 */

FileListPlaceholder.propTypes = {
  children: propTypes.string,
  dataTest: propTypes.string
};

var styles = ["label.jsx-2718078600{display:block;box-sizing:border-box;font-size:14px;line-height:24px;padding:0;}", ".disabled.jsx-2718078600{cursor:not-allowed;}"];
styles.__hash = "2718078600";

var constructClassName = function constructClassName(_ref) {
  var disabled = _ref.disabled,
      className = _ref.className;
  return cx(className, {
    disabled: disabled
  });
};
/**
 * @module
 * @param {Label.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Label } from '@dhis2/ui-core'
 */


var Label = function Label(_ref2) {
  var htmlFor = _ref2.htmlFor,
      children = _ref2.children,
      required = _ref2.required,
      disabled = _ref2.disabled,
      className = _ref2.className,
      dataTest = _ref2.dataTest;
  return React__default.createElement("label", {
    htmlFor: htmlFor,
    "data-test": dataTest,
    className: "jsx-".concat(styles.__hash) + " " + (constructClassName({
      className: className,
      disabled: disabled
    }) || "")
  }, React__default.createElement("span", {
    className: "jsx-".concat(styles.__hash)
  }, children), required && React__default.createElement(Required, {
    dataTest: "".concat(dataTest, "-required")
  }), React__default.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles));
};
Label.defaultProps = {
  dataTest: 'dhis2-uicore-label'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [htmlFor]
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

Label.propTypes = {
  children: propTypes.string,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  htmlFor: propTypes.string,
  required: propTypes.bool
};

/**
 * @module
 * @param {FileInputField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileInputField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/fileinput.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/fileinputfield--default|Storybook}
 */

var FileInputField = function FileInputField(_ref) {
  var onChange = _ref.onChange,
      name = _ref.name,
      label = _ref.label,
      buttonLabel = _ref.buttonLabel,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      className = _ref.className,
      placeholder = _ref.placeholder,
      tabIndex = _ref.tabIndex,
      children = _ref.children,
      error = _ref.error,
      valid = _ref.valid,
      warning = _ref.warning,
      small = _ref.small,
      large = _ref.large,
      required = _ref.required,
      disabled = _ref.disabled,
      accept = _ref.accept,
      multiple = _ref.multiple,
      dataTest = _ref.dataTest;
  return React__default.createElement(Field, {
    className: className,
    dataTest: dataTest
  }, label && React__default.createElement(Label, {
    required: required,
    disabled: disabled,
    htmlFor: name
  }, label), React__default.createElement(FileInput, {
    onChange: onChange,
    className: className,
    buttonLabel: buttonLabel,
    error: error,
    valid: valid,
    warning: warning,
    accept: accept,
    multiple: multiple,
    small: small,
    large: large,
    disabled: disabled,
    tabIndex: tabIndex,
    name: name
  }), helpText && React__default.createElement(Help, {
    dataTest: "".concat(dataTest, "-help")
  }, helpText), validationText && React__default.createElement(Help, {
    error: error,
    warning: warning,
    valid: valid,
    dataTest: "".concat(dataTest, "-validation")
  }, validationText), React__default.createElement(FileList, null, !children && placeholder ? React__default.createElement(FileListPlaceholder, null, placeholder) : children));
};

FileInputField.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uicore-fileinputfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange]
 * @prop {string} [label]
 * @prop {string} [buttonLabel]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning` and `error` are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 *
 * @prop {FileListItem|Array.<FileListItem>} [children]
 * @prop {string} [accept=*] - the `accept` attribute of the native file input https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept
 * @prop {boolean} [multiple] - the `multiple` attribute of the native file input https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple
 * @prop {string} [dataTest]
 */

FileInputField.propTypes = {
  accept: propTypes.string,
  buttonLabel: propTypes.string,
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  large: sizePropType,
  multiple: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  required: propTypes.bool,
  small: sizePropType,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  warning: statusPropType,
  onChange: propTypes.func
};

function AttachFile(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M33 12v23c0 4.42-3.58 8-8 8s-8-3.58-8-8V10c0-2.76 2.24-5 5-5s5 2.24 5 5v21c0 1.1-.89 2-2 2-1.11 0-2-.9-2-2V12h-3v19c0 2.76 2.24 5 5 5s5-2.24 5-5V10c0-4.42-3.58-8-8-8s-8 3.58-8 8v25c0 6.08 4.93 11 11 11s11-4.92 11-11V12h-3z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
AttachFile.propTypes = {
  className: propTypes.string
};

/**
 * @module
 * @param {FileListItem.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { FileListItem } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/fileinput.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/fileinputfield--file-list|Storybook}
 */

var FileListItem = function FileListItem(_ref) {
  var className = _ref.className,
      label = _ref.label,
      onRemove = _ref.onRemove,
      removeText = _ref.removeText,
      loading = _ref.loading,
      onCancel = _ref.onCancel,
      cancelText = _ref.cancelText,
      dataTest = _ref.dataTest;
  return React__default.createElement("p", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + (cx('selected-file', className) || "")
  }, React__default.createElement("span", {
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + "icon"
  }, loading ? React__default.createElement(Loading, null) : React__default.createElement(AttachFile, null)), React__default.createElement("span", {
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + "text"
  }, React__default.createElement("span", {
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + "label"
  }, label), loading && onCancel && cancelText && React__default.createElement("span", {
    onClick: function onClick(event) {
      return onCancel({}, event);
    },
    "data-test": "".concat(dataTest, "-cancel"),
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + "action"
  }, cancelText), !loading && React__default.createElement("span", {
    onClick: function onClick(event) {
      return onRemove({}, event);
    },
    "data-test": "".concat(dataTest, "-remove"),
    className: _JSXStyle.dynamic([["2923643952", [spacers.dp4, colors.grey900, colors.grey700]]]) + " " + "action"
  }, removeText)), React__default.createElement(_JSXStyle, {
    id: "2923643952",
    dynamic: [spacers.dp4, colors.grey900, colors.grey700]
  }, ["p.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:0;padding-top:".concat(spacers.dp4, ";line-height:18px;}"), ".icon.__jsx-style-dynamic-selector>svg{width:12px;height:12px;line-height:12px;margin-right:4px;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", ".text.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-flex-shrink:1;-ms-flex-negative:1;flex-shrink:1;}", ".label.__jsx-style-dynamic-selector{font-size:14px;color:".concat(colors.grey900, ";word-break:break-all;}"), ".label.__jsx-style-dynamic-selector::after{content:' ';display:inline-block;width:12px;}", ".action.__jsx-style-dynamic-selector{font-size:12px;line-height:12px;margin-top:0;-webkit-text-decoration:underline;text-decoration:underline;cursor:pointer;color:".concat(colors.grey700, ";}")]));
};

FileListItem.defaultProps = {
  dataTest: 'dhis2-uicore-filelistitem'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} label
 * @prop {function} onRemove
 * @prop {string} removeText
 * @prop {string} [className]
 * @prop {boolean} [loading]
 * @prop {function} [onCancel]
 * @prop {string} [cancelText]
 * @prop {string} [dataTest]
 */

FileListItem.propTypes = {
  label: propTypes.string.isRequired,
  removeText: propTypes.string.isRequired,
  onRemove: propTypes.func.isRequired,
  cancelText: propTypes.string,
  className: propTypes.string,
  dataTest: propTypes.string,
  loading: propTypes.bool,
  onCancel: propTypes.func
};

var styles$1 = [".input.jsx-1090541828{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}", "input.jsx-1090541828{box-sizing:border-box;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;color:".concat(colors.grey900, ";background-color:white;padding:12px 11px 10px;outline:0;border:1px solid ").concat(colors.grey500, ";border-radius:3px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);text-overflow:ellipsis;}"), "input.dense.jsx-1090541828{padding:8px 11px 6px;}", "input.jsx-1090541828:focus{border-color:".concat(colors.teal400, ";}"), "input.valid.jsx-1090541828{border-color:".concat(theme.valid, ";}"), "input.warning.jsx-1090541828{border-color:".concat(theme.warning, ";}"), "input.error.jsx-1090541828{border-color:".concat(theme.error, ";}"), "input.read-only.jsx-1090541828{background-color:".concat(colors.grey100, ";border-color:").concat(colors.grey500, ";cursor:text;}"), "input.disabled.jsx-1090541828{background-color:".concat(colors.grey100, ";border-color:").concat(colors.grey500, ";color:").concat(theme.disabled, ";cursor:not-allowed;}"), ".status-icon.jsx-1090541828{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;margin-left:".concat(spacers.dp4, ";}")];
/**
 * @module
 * @param {Input.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Input } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/inputfield--default|Storybook}
 */

styles$1.__hash = "1090541828";
var Input =
/*#__PURE__*/
function (_Component) {
  _inherits(Input, _Component);

  function Input() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "inputRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.onChange) {
        _this.props.onChange(_this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(_this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(_this.createHandlerPayload(e), e);
      }
    });

    return _this;
  }

  _createClass(Input, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.inputRef.current.focus();
      }
    }
  }, {
    key: "createHandlerPayload",
    value: function createHandlerPayload(e) {
      return {
        value: e.target.value,
        name: this.props.name
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          type = _this$props.type,
          dense = _this$props.dense,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          placeholder = _this$props.placeholder,
          name = _this$props.name,
          valid = _this$props.valid,
          error = _this$props.error,
          warning = _this$props.warning,
          loading = _this$props.loading,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          dataTest = _this$props.dataTest;
      return React__default.createElement("div", {
        "data-test": dataTest,
        className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + (cx('input', className) || "")
      }, React__default.createElement("input", {
        id: name,
        name: name,
        placeholder: placeholder,
        ref: this.inputRef,
        type: type,
        value: value,
        disabled: disabled,
        readOnly: readOnly,
        tabIndex: tabIndex,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onChange: this.handleChange,
        className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + (cx({
          dense: dense,
          disabled: disabled,
          error: error,
          valid: valid,
          warning: warning,
          'read-only': readOnly
        }) || "")
      }), React__default.createElement("div", {
        className: "jsx-3353877153 " + "jsx-".concat(styles$1.__hash) + " " + "status-icon"
      }, React__default.createElement(StatusIcon, {
        error: error,
        valid: valid,
        loading: loading,
        warning: warning
      })), React__default.createElement(_JSXStyle, {
        id: styles$1.__hash
      }, styles$1), React__default.createElement(_JSXStyle, {
        id: "3353877153"
      }, ["input.jsx-3353877153{width:100%;}"]));
    }
  }]);

  return Input;
}(React.Component);
Input.defaultProps = {
  type: 'text',
  dataTest: 'dhis2-uicore-input'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {string} [type=text]
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [readOnly]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {string} [dataTest]
 */

Input.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  initialFocus: propTypes.bool,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  tabIndex: propTypes.string,
  type: propTypes.oneOf(['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']),
  valid: statusPropType,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {InputField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { InputField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/inputfield--no-placeholder-no-value|Storybook}
 */

var InputField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(InputField, _React$Component);

  function InputField() {
    _classCallCheck(this, InputField);

    return _possibleConstructorReturn(this, _getPrototypeOf(InputField).apply(this, arguments));
  }

  _createClass(InputField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          onChange = _this$props.onChange,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          initialFocus = _this$props.initialFocus,
          type = _this$props.type,
          dense = _this$props.dense,
          required = _this$props.required,
          label = _this$props.label,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          placeholder = _this$props.placeholder,
          name = _this$props.name,
          valid = _this$props.valid,
          error = _this$props.error,
          warning = _this$props.warning,
          loading = _this$props.loading,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          helpText = _this$props.helpText,
          validationText = _this$props.validationText,
          inputWidth = _this$props.inputWidth,
          dataTest = _this$props.dataTest;
      return React__default.createElement(Field, {
        className: className,
        dataTest: dataTest
      }, label && React__default.createElement(Label, {
        required: required,
        disabled: disabled,
        htmlFor: name
      }, label), React__default.createElement(Constrictor, {
        width: inputWidth,
        minWidth: "72px"
      }, React__default.createElement(Input, {
        onFocus: onFocus,
        onBlur: onBlur,
        onChange: onChange,
        name: name,
        type: type,
        value: value || '',
        placeholder: placeholder,
        disabled: disabled,
        valid: valid,
        warning: warning,
        error: error,
        loading: loading,
        dense: dense,
        tabIndex: tabIndex,
        initialFocus: initialFocus,
        readOnly: readOnly
      })), helpText && React__default.createElement(Help, {
        dataTest: "".concat(dataTest, "-help")
      }, helpText), validationText && React__default.createElement(Help, {
        error: error,
        warning: warning,
        valid: valid,
        dataTest: "".concat(dataTest, "-validation")
      }, validationText));
    }
  }]);

  return InputField;
}(React__default.Component);

InputField.defaultProps = {
  dataTest: 'dhis2-uicore-inputfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {string} [type=text]
 * @prop {function} [onChange]
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [label]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {string} [inputWidth]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [readOnly]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string} [dataTest]
 */

InputField.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  type: Input.propTypes.type,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

var Progress = function Progress(_ref) {
  var amount = _ref.amount;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["686723300", [amount]], ["3243380718", [theme.primary600]]])
  }, React__default.createElement(_JSXStyle, {
    id: "686723300",
    dynamic: [amount]
  }, ["div.__jsx-style-dynamic-selector{width:".concat(amount, "%;}")]), React__default.createElement(_JSXStyle, {
    id: "3243380718",
    dynamic: [theme.primary600]
  }, ["div.__jsx-style-dynamic-selector{background-color:".concat(theme.primary600, ";-webkit-transition:width 0.3s linear;transition:width 0.3s linear;height:4px;}")]));
};

Progress.propTypes = {
  amount: propTypes.number.isRequired
};
/**
 * @module
 * @param {LinearLoader.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { LinearLoader } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/loading.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/linearloader--determinate|Storybook}
 */

var LinearLoader = function LinearLoader(_ref2) {
  var amount = _ref2.amount,
      width = _ref2.width,
      margin = _ref2.margin,
      className = _ref2.className,
      dataTest = _ref2.dataTest;
  return React__default.createElement("div", {
    role: "progressbar",
    "data-test": dataTest,
    className: "jsx-1195089001 " + _JSXStyle.dynamic([["2979463364", [width, margin]]]) + " " + (className || "")
  }, React__default.createElement(Progress, {
    amount: amount
  }), React__default.createElement(_JSXStyle, {
    id: "1195089001"
  }, ["div.jsx-1195089001{display:block;overflow:hidden;overflow-x:hidden;overflow-y:hidden;background-color:rgba(110,122,138,0.2);}"]), React__default.createElement(_JSXStyle, {
    id: "2979463364",
    dynamic: [width, margin]
  }, ["div.__jsx-style-dynamic-selector{width:".concat(width, ";margin:").concat(margin, ";}")]));
};

LinearLoader.defaultProps = {
  margin: spacers.dp12,
  width: '300px',
  dataTest: 'dhis2-uicore-linearloader'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {number} [amount] - The progression in percent without the '%' sign
 * @prop {string} [margin=spacers.dp12] - The margin around the loader, can be a full shorthand
 * @prop {string} [width=300px] - The width of the entire indicator, e.g. '100%' or '300px'
 * @prop {string} [dataTest]
 */

LinearLoader.propTypes = {
  amount: propTypes.number.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  margin: propTypes.string,
  width: propTypes.string
};

function LogoSvg(_ref) {
  var iconColor = _ref.iconColor,
      textColor = _ref.textColor,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 600 182",
    className: className,
    "data-test": dataTest
  }, React__default.createElement("path", {
    fill: iconColor,
    d: "M191.91,60,109.17,6.34a19.75,19.75,0,0,0-20.33,0L8.49,58.43a12,12,0,0,0-.25,20.63L88.78,134a19.39,19.39,0,0,0,20.38.25l82.75-53.65a11.87,11.87,0,0,0,0-20.59Zm-91,61.45a4.29,4.29,0,0,1-3.49-.05l-77-52.49L97.13,19.13a4.76,4.76,0,0,1,3.74,0l78.91,51.15Z"
  }), React__default.createElement("path", {
    fill: iconColor,
    d: "M88.84,47.82,45.28,76.06,58.9,85.39,97.13,60.61a4.76,4.76,0,0,1,3.74,0l39.37,25.52,14-9.06L109.17,47.82A19.78,19.78,0,0,0,88.84,47.82Z"
  }), React__default.createElement("path", {
    fill: iconColor,
    d: "M191.91,101.46l-8.62-5.59-14,9.06,10.52,6.83-78.91,51.15a4.37,4.37,0,0,1-3.49,0l-77-52.5,10-6.47L16.74,94.57,8.49,99.91a12,12,0,0,0-.25,20.63l80.54,54.92a19.36,19.36,0,0,0,20.38.24l82.74-53.65a11.87,11.87,0,0,0,0-20.59Z"
  }), React__default.createElement("path", {
    fill: textColor,
    d: "M293.59,70.72q-6.91-11-20.62-11a29.31,29.31,0,0,0-22.88,10.39Q240.76,80.82,240.76,98t9.78,28.3A30.15,30.15,0,0,0,274,137q14,0,20.78-13.39l2.1,11.29h14.6V31.59H293.59Zm0,31.76a18,18,0,0,1-5.27,13.25,16.12,16.12,0,0,1-24.53-1.13q-5.12-6.24-5.12-16.48t5-16.33a15.65,15.65,0,0,1,12.57-6.1q7.53,0,12,4.51A18.36,18.36,0,0,1,293.59,93Z"
  }), React__default.createElement("path", {
    fill: textColor,
    d: "M368.85,59.73q-14.44,0-22,13.85v-42H329.12V134.85h17.76V101q.3-12.65,5.34-19t12.12-6.32q7.07,0,11,4.14t3.91,12.27v42.75H397V92.1q0-14.61-6.85-23.49T368.85,59.73Z"
  }), React__default.createElement("rect", {
    fill: textColor,
    x: "414.01",
    y: "61.54",
    width: "17.76",
    height: "73.31"
  }), React__default.createElement("path", {
    fill: textColor,
    d: "M422.89,27.67q-5.26,0-8.13,2.79a10.15,10.15,0,0,0-2.86,7.6,10.13,10.13,0,0,0,2.86,7.6c1.91,1.86,4.62,2.78,8.13,2.78s6.1-.92,8.05-2.78a10,10,0,0,0,2.94-7.6,10,10,0,0,0-2.94-7.6C429,28.6,426.3,27.67,422.89,27.67Z"
  }), React__default.createElement("path", {
    fill: textColor,
    d: "M494.39,95.56l-17.31-6.47q-8.88-2.57-8.88-7.83,0-3,3.24-5.35c2.15-1.55,5.19-2.33,9.1-2.33s6.93.71,9,2.11A7.38,7.38,0,0,1,493,81.41h16.71a20.11,20.11,0,0,0-7.91-15.51q-7.6-6.17-21.67-6.17t-22.43,5.65q-8.36,5.64-8.36,15,0,14,17.76,20.17l16,5.71a22.53,22.53,0,0,1,7.08,3.32,6.18,6.18,0,0,1,2.25,5.12c0,2.2-1.23,4.14-3.68,5.79a16.49,16.49,0,0,1-9.41,2.48q-14.89,0-15.21-10.38H447.58q.15,11.6,9,18T480.09,137q14.6,0,23.48-6.92,8.58-6.63,8.58-15.65a15.31,15.31,0,0,0-4.59-11.52Q503,98.42,494.39,95.56Z"
  }), React__default.createElement("path", {
    fill: textColor,
    d: "M544.06,118.59V115a8.65,8.65,0,0,1,2.79-6.55c1.85-1.75,4.89-3.19,9.11-4.29l15.8-3.92Q585,96.92,591,90.82t5.95-17.24q0-11.13-9.18-18.66-9.5-7.83-24.24-7.83-15.79,0-25.29,6.77Q528.26,61.09,528,74.64h19.72q1.5-12,16.71-12,6.92,0,10.83,3.31a10.42,10.42,0,0,1,3.92,8.29,11.34,11.34,0,0,1-3.39,8.35q-3.39,3.39-11.67,5.49L549.79,91.5q-12.21,3-17.77,9.33-5.71,6.77-5.72,19.26v14.76h71.2V118.59Z"
  }));
}
LogoSvg.propTypes = {
  iconColor: propTypes.string.isRequired,
  textColor: propTypes.string.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

function LogoIconSvg(_ref) {
  var iconColor = _ref.iconColor,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 200 182",
    className: className,
    "data-test": dataTest
  }, React__default.createElement("defs", null), React__default.createElement("path", {
    fill: iconColor,
    d: "M191.73,60,109,6.34a19.73,19.73,0,0,0-20.32,0L8.31,58.43a12,12,0,0,0-.25,20.63L88.6,134a19.37,19.37,0,0,0,20.37.25l82.76-53.65a11.88,11.88,0,0,0,0-20.59Zm-91,61.45a4.29,4.29,0,0,1-3.49-.05l-77-52.49L97,19.13a4.76,4.76,0,0,1,3.74,0L179.6,70.28Z"
  }), React__default.createElement("path", {
    fill: iconColor,
    d: "M88.66,47.82,45.1,76.06l13.61,9.33L97,60.61a4.76,4.76,0,0,1,3.74,0l39.37,25.52,14-9.06L109,47.82A19.76,19.76,0,0,0,88.66,47.82Z"
  }), React__default.createElement("path", {
    fill: iconColor,
    d: "M191.73,101.46l-8.62-5.59-14.05,9.06,10.53,6.83-78.91,51.15a4.37,4.37,0,0,1-3.49,0l-77-52.5,10-6.47L16.55,94.57,8.31,99.91a12,12,0,0,0-.25,20.63L88.6,175.46a19.34,19.34,0,0,0,20.37.24l82.75-53.65a11.88,11.88,0,0,0,0-20.59Z"
  }));
}
LogoIconSvg.propTypes = {
  iconColor: propTypes.string.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/*
 * This should likely not live in ui-core, but in ui-widgets
 */

/**
 * @module
 * @deprecated
 * @param {Logo.PropTypes} props
 * @returns {React.Component}
 */

/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

/*
 * These are official colors for dhis2 logos.
 *
 * They are isolated here and not in `theme.js` as they should not be
 * shared with any other components.
 *
 * https://github.com/dhis2/dhis2-identity
 *
 */

var blue = '#0080d4';
var white = '#ffffff';
var dark = '#212225';
var LogoIcon = function LogoIcon(_ref) {
  var className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement(LogoIconSvg, {
    iconColor: blue,
    className: className,
    dataTest: dataTest
  });
};
LogoIcon.defaultProps = {
  dataTest: 'dhis2-uicore-logoicon'
};
LogoIcon.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string
};
var LogoIconWhite = function LogoIconWhite(_ref2) {
  var className = _ref2.className,
      dataTest = _ref2.dataTest;
  return React__default.createElement(LogoIconSvg, {
    iconColor: white,
    className: className,
    dataTest: dataTest
  });
};
LogoIconWhite.defaultProps = {
  dataTest: 'dhis2-uicore-logoiconwhite'
};
LogoIconWhite.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string
};
var Logo = function Logo(_ref3) {
  var className = _ref3.className,
      dataTest = _ref3.dataTest;
  return React__default.createElement(LogoSvg, {
    iconColor: blue,
    textColor: dark,
    className: className,
    dataTest: dataTest
  });
};
Logo.defaultProps = {
  dataTest: 'dhis2-uicore-logo'
};
Logo.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string
};
var LogoWhite = function LogoWhite(_ref4) {
  var className = _ref4.className,
      dataTest = _ref4.dataTest;
  return React__default.createElement(LogoSvg, {
    iconColor: white,
    textColor: white,
    className: className,
    dataTest: dataTest
  });
};
LogoWhite.defaultProps = {
  dataTest: 'dhis2-uicore-logowhite'
};
LogoWhite.propTypes = {
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {MenuList.PropTypes}
 * @returns {React.Component}
 *
 * @example import { MenuList } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/menulist--default|Storybook}
 */

var MenuList = function MenuList(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("ul", {
    "data-test": dataTest,
    className: "jsx-3549878755" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "3549878755"
  }, ["ul.jsx-3549878755{display:block;position:relative;width:100%;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]));
};

MenuList.defaultProps = {
  dataTest: 'dhis2-uicore-menulist'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

MenuList.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

function ChevronRight(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M20 12l-2.83 2.83L26.34 24l-9.17 9.17L20 36l12-12z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
ChevronRight.propTypes = {
  className: propTypes.string
};
function ChevronLeft(_ref2) {
  var className = _ref2.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    className: "jsx-4098137027" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M30.83 14.83L28 12 16 24l12 12 2.83-2.83L21.66 24z",
    className: "jsx-4098137027"
  }), React__default.createElement(_JSXStyle, {
    id: "4098137027"
  }, ["svg.jsx-4098137027{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));
}
ChevronLeft.propTypes = {
  className: propTypes.string
};

var _defaultExport$2 = ["li.jsx-2880366133{position:relative;height:48px;padding:0;cursor:pointer;list-style:none;}", "li.jsx-2880366133 div.label.jsx-2880366133:not(:first-child){margin-left:".concat(spacers.dp8, ";}"), "li.jsx-2880366133:hover{background-color:".concat(colors.grey200, ";}"), "li.jsx-2880366133:active,li.active.jsx-2880366133{background-color:".concat(colors.grey400, ";}"), ".dense.jsx-2880366133{height:32px;padding:0 ".concat(spacers.dp24, " 0 ").concat(spacers.dp12, ";}"), ".dense.jsx-2880366133 .label.jsx-2880366133{font-size:14px;}", ".dense.jsx-2880366133 .icon.jsx-2880366133{font-size:20px;}", ".disabled.jsx-2880366133{cursor:not-allowed;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".disabled.jsx-2880366133 .icon.jsx-2880366133,.disabled.jsx-2880366133 .label.jsx-2880366133{color:rgba(0,0,0,0.3);}", ".link.jsx-2880366133{display:block;height:100%;padding:0 ".concat(spacers.dp24, ";-webkit-text-decoration:none;text-decoration:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}"), ".label.jsx-2880366133{color:".concat(colors.grey900, ";font-size:15px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding-right:").concat(spacers.dp12, ";}"), ".icon.jsx-2880366133{box-sizing:border-box;margin-right:".concat(spacers.dp16, ";color:#404040;font-size:24px;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}")];
_defaultExport$2.__hash = "2880366133";

var subChevron = {
  styles: React__default.createElement(_JSXStyle, {
    id: "2023721407"
  }, ["svg.jsx-2023721407{margin:0 -14px 0 auto;width:18px;height:18px;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"]),
  className: "jsx-2023721407"
};
var subMenu = {
  styles: React__default.createElement(_JSXStyle, {
    id: "2069506860"
  }, ["div.jsx-2069506860{display:none;position:absolute;top:0;left:100%;white-space:nowrap;}", "li.jsx-2069506860:hover>div.jsx-2069506860{display:block;}"]),
  className: "jsx-2069506860"
};

var SubMenu = function SubMenu(_ref) {
  var children = _ref.children,
      className = _ref.className;
  return React__default.createElement("div", {
    className: className
  }, children);
};

SubMenu.propTypes = {
  children: propTypes.element,
  className: propTypes.string
};

var createOnClickHandler = function createOnClickHandler(onClick, value) {
  return function (evt) {
    if (onClick) {
      evt.preventDefault();
      evt.stopPropagation();
      onClick({
        value: value
      }, evt);
    }
  };
};
/**
 * @module
 * @param {MenuItem.PropTypes}
 * @returns {React.Component}
 *
 * @example import { MenuItem } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/menu--default|Storybook}
 */


var MenuItem = function MenuItem(_ref2) {
  var href = _ref2.href,
      value = _ref2.value,
      label = _ref2.label,
      icon = _ref2.icon,
      children = _ref2.children,
      active = _ref2.active,
      disabled = _ref2.disabled,
      dense = _ref2.dense,
      onClick = _ref2.onClick,
      className = _ref2.className,
      dataTest = _ref2.dataTest;
  var hasMenu = !!children;
  var isClickable = href || onClick;
  var LinkElement = isClickable ? 'a' : 'span';
  var linkElementProps = {};

  if (isClickable) {
    linkElementProps.href = href;
    linkElementProps.onClick = createOnClickHandler(onClick, value);
  }

  return React__default.createElement("li", {
    "data-test": dataTest,
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + (cx(className, subMenu.className, {
      disabled: disabled,
      dense: dense,
      active: active
    }) || "")
  }, React__default.createElement(LinkElement, _extends({}, linkElementProps, {
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + (linkElementProps && linkElementProps.className != null && linkElementProps.className || "link")
  }), icon, React__default.createElement("div", {
    className: "jsx-".concat(_defaultExport$2.__hash) + " " + "label"
  }, label), hasMenu && React__default.createElement(ChevronRight, {
    className: subChevron.className
  }), subChevron.styles, hasMenu && React__default.createElement(SubMenu, {
    className: subMenu.className
  }, children), subMenu.styles), React__default.createElement(_JSXStyle, {
    id: _defaultExport$2.__hash
  }, _defaultExport$2));
};

MenuItem.defaultProps = {
  dataTest: 'dhis2-uicore-menuitem'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string|Node} label
 * @prop {string} [value]
 * @prop {string} [href]
 * @prop {function} [onClick] - Click handler called with `value` as the sole argument
 * @prop {string} [className]
 * @prop {Element} [children]
 * @prop {Element} [icon]
 * @prop {boolean} [dense]
 * @prop {boolean} [active]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

MenuItem.propTypes = {
  label: propTypes.oneOfType([propTypes.string, propTypes.node]).isRequired,
  active: propTypes.bool,
  children: propTypes.element,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  href: propTypes.string,
  icon: propTypes.element,
  value: propTypes.string,
  onClick: propTypes.func
};

var styles$2 = ["svg.jsx-1631270792{display:block;pointer-events:none;}", "svg.jsx-1631270792{fill:".concat(theme.default, ";}"), "circle.background.jsx-1631270792{fill:".concat(colors.white, ";}"), "svg.checked.jsx-1631270792{fill:".concat(colors.teal400, ";}"), "svg.disabled.jsx-1631270792{fill:".concat(colors.grey400, ";}"), "svg.error.jsx-1631270792{fill:".concat(theme.error, ";}"), "svg.valid.jsx-1631270792{fill:".concat(theme.valid, ";}"), "svg.warning.jsx-1631270792{fill:".concat(theme.warning, ";}"), "svg.jsx-1631270792:not(.checked) .inner.jsx-1631270792,svg.jsx-1631270792:not(.checked) .outer.checked.jsx-1631270792{fill:none;}"];
styles$2.__hash = "1631270792";
function Regular$1(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 18 18",
    className: "jsx-1260643562 " + "jsx-".concat(styles$2.__hash) + " " + (className || "")
  }, React__default.createElement("circle", {
    cx: "9",
    cy: "9",
    r: "9",
    className: "jsx-1260643562 " + "jsx-".concat(styles$2.__hash) + " " + "background"
  }), React__default.createElement("path", {
    d: "M9,18 C13.9705627,18 18,13.9705627 18,9 C18,4.02943725 13.9705627,0 9,0 C4.02943725,0 0,4.02943725 0,9 C0,13.9705627 4.02943725,18 9,18 Z M9,16 C5.13400675,16 2,12.8659932 2,9 C2,5.13400675 5.13400675,2 9,2 C12.8659932,2 16,5.13400675 16,9 C16,12.8659932 12.8659932,16 9,16 Z",
    className: "jsx-1260643562 " + "jsx-".concat(styles$2.__hash) + " " + "outer"
  }), React__default.createElement("circle", {
    cx: "9",
    cy: "9",
    r: "5",
    className: "jsx-1260643562 " + "jsx-".concat(styles$2.__hash) + " " + "inner"
  }), React__default.createElement(_JSXStyle, {
    id: "1260643562"
  }, ["svg.jsx-1260643562{height:18px;width:18px;}"]), React__default.createElement(_JSXStyle, {
    id: styles$2.__hash
  }, styles$2));
}
Regular$1.propTypes = {
  className: propTypes.string
};
function Dense$1(_ref2) {
  var className = _ref2.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 14 14",
    className: "jsx-1659897952 " + "jsx-".concat(styles$2.__hash) + " " + (className || "")
  }, React__default.createElement("circle", {
    cx: "7",
    cy: "7",
    r: "7",
    className: "jsx-1659897952 " + "jsx-".concat(styles$2.__hash) + " " + "background"
  }), React__default.createElement("path", {
    d: "M7,14 C10.8659932,14 14,10.8659932 14,7 C14,3.13400675 10.8659932,0 7,0 C3.13400675,0 0,3.13400675 0,7 C0,10.8659932 3.13400675,14 7,14 Z M7,13 C3.6862915,13 1,10.3137085 1,7 C1,3.6862915 3.6862915,1 7,1 C10.3137085,1 13,3.6862915 13,7 C13,10.3137085 10.3137085,13 7,13 Z",
    className: "jsx-1659897952 " + "jsx-".concat(styles$2.__hash) + " " + "outer unchecked"
  }), React__default.createElement("path", {
    d: "M7,14 C10.8659932,14 14,10.8659932 14,7 C14,3.13400675 10.8659932,0 7,0 C3.13400675,0 0,3.13400675 0,7 C0,10.8659932 3.13400675,14 7,14 Z M7,12 C4.23857625,12 2,9.76142375 2,7 C2,4.23857625 4.23857625,2 7,2 C9.76142375,2 12,4.23857625 12,7 C12,9.76142375 9.76142375,12 7,12 Z",
    className: "jsx-1659897952 " + "jsx-".concat(styles$2.__hash) + " " + "outer checked"
  }), React__default.createElement("circle", {
    cx: "7",
    cy: "7",
    r: "3",
    className: "jsx-1659897952 " + "jsx-".concat(styles$2.__hash) + " " + "inner"
  }), React__default.createElement(_JSXStyle, {
    id: "1659897952"
  }, ["svg.jsx-1659897952{height:14px;width:14px;}"]), React__default.createElement(_JSXStyle, {
    id: styles$2.__hash
  }, styles$2));
}
Dense$1.propTypes = {
  className: propTypes.string
};

/**
 * @module
 *
 * @param {Radio.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Radio } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/radio.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/radio--default|Storybook}
 */

var Radio =
/*#__PURE__*/
function (_Component) {
  _inherits(Radio, _Component);

  function Radio() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Radio);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Radio)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "ref", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.onChange) {
        _this.props.onChange(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(_this.createHandlerPayload(), e);
      }
    });

    return _this;
  }

  _createClass(Radio, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.ref.current.focus();
      }
    }
  }, {
    key: "createHandlerPayload",
    value: function createHandlerPayload() {
      return {
        value: this.props.value,
        name: this.props.name,
        checked: !this.props.checked
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$checked = _this$props.checked,
          checked = _this$props$checked === void 0 ? false : _this$props$checked,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          label = _this$props.label,
          name = _this$props.name,
          tabIndex = _this$props.tabIndex,
          valid = _this$props.valid,
          value = _this$props.value,
          warning = _this$props.warning,
          dense = _this$props.dense,
          dataTest = _this$props.dataTest;
      var classes = cx({
        checked: checked,
        disabled: disabled,
        valid: valid,
        error: error,
        warning: warning
      });
      return React__default.createElement("label", {
        "data-test": dataTest,
        className: _JSXStyle.dynamic([["2400462603", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx(className, {
          disabled: disabled,
          dense: dense
        }) || "")
      }, React__default.createElement("input", {
        type: "radio",
        ref: this.ref,
        name: name,
        value: value,
        checked: checked,
        disabled: disabled,
        tabIndex: tabIndex,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        className: _JSXStyle.dynamic([["2400462603", [colors.grey900, theme.disabled, colors.blue600]]])
      }), React__default.createElement("div", {
        className: _JSXStyle.dynamic([["2400462603", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx('icon', {
          dense: dense
        }) || "")
      }, dense ? React__default.createElement(Dense$1, {
        className: classes
      }) : React__default.createElement(Regular$1, {
        className: classes
      })), label, React__default.createElement(_JSXStyle, {
        id: "2400462603",
        dynamic: [colors.grey900, theme.disabled, colors.blue600]
      }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:50%;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(colors.blue600, ";}")]));
    }
  }]);

  return Radio;
}(React.Component);

Radio.defaultProps = {
  dataTest: 'dhis2-uicore-radio'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {Node} label
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

Radio.propTypes = {
  label: propTypes.node.isRequired,
  value: propTypes.string.isRequired,
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  tabIndex: propTypes.string,
  valid: statusPropType,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {RadioGroup.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { RadioGroup } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/radio.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/radiogroup--default|Storybook}
 */

var RadioGroup = function RadioGroup(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroup, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    dataTest: dataTest
  }, children);
};

RadioGroup.defaultProps = {
  dataTest: 'dhis2-uicore-radiogroup'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Radio>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {string} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [dataTest]
 */

RadioGroup.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  name: propTypes.string,
  valid: statusPropType,
  value: propTypes.string,
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {RadioGroupField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { RadioGroupField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/radio.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/radiogroupfield--default|Storybook}
 */

var RadioGroupField = function RadioGroupField(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      label = _ref.label,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroupField, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    label: label,
    helpText: helpText,
    validationText: validationText,
    required: required,
    dataTest: dataTest
  }, children);
};

RadioGroupField.defaultProps = {
  dataTest: 'dhis2-uicore-radiogroupfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Radio>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {string} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [label]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

RadioGroupField.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  name: propTypes.string,
  required: propTypes.bool,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onChange: propTypes.func
};

var LayerContext = React__default.createContext(0);

var getStackedLayer = function getStackedLayer(zIndex, context) {
  // Keep alert layer constant
  if (zIndex === layers.alert) {
    return layers.alert;
  } // Differentiate between a stacked blocking and applicationTop layer


  var layerIncrement = zIndex === layers.blocking ? 2 : 1;
  var layer = context + layerIncrement; // stay within stack layer boundaries defined by the design system
  // https://github.com/dhis2/design-system/blob/master/principles/spacing-alignment.md#stacking

  if (layer >= layers.alert) {
    return layers.alert - 1;
  }

  return layer;
};

var useLayer = function useLayer(zIndex) {
  var context = React.useContext(LayerContext);
  if (context) return getStackedLayer(zIndex, context);
  return zIndex;
};
/**
 * @module
 * @private
 * @param {Layer.PropTypes} props
 * @returns {React.Component}
 */


var Layer = function Layer(_ref) {
  var children = _ref.children,
      zIndex = _ref.zIndex;
  var newLayer = useLayer(zIndex);
  return React__default.createElement(LayerContext.Provider, {
    value: newLayer
  }, children(newLayer));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {function} children
 * @prop {number} zIndex
 */


Layer.propTypes = {
  children: propTypes.func.isRequired,
  zIndex: propTypes.number
};

/**
 * @module
 * @private
 * @param {Object} PropTypes
 * @returns {React.Component}
 */

var Backdrop = function Backdrop(_ref) {
  var _onClick = _ref.onClick,
      transparent = _ref.transparent,
      children = _ref.children,
      zIndex = _ref.zIndex,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement(Layer, {
    zIndex: zIndex
  }, function (zIndexComputed) {
    return React__default.createElement("div", {
      onClick: function onClick(event) {
        return _onClick && _onClick({}, event);
      },
      "data-test": dataTest,
      className: "jsx-210289875 " + _JSXStyle.dynamic([["3423950975", [transparent ? 'transparent' : 'rgba(33, 43, 54, 0.4)', zIndexComputed]]]) + " " + (cx('backdrop', className) || "")
    }, React__default.createElement("div", {
      onClick: function onClick(e) {
        // stop events from bubbling up through the
        // children to the backdrop click handler
        e.stopPropagation();
      },
      className: "jsx-210289875 " + _JSXStyle.dynamic([["3423950975", [transparent ? 'transparent' : 'rgba(33, 43, 54, 0.4)', zIndexComputed]]])
    }, children), React__default.createElement(_JSXStyle, {
      id: "210289875"
    }, [".backdrop.jsx-210289875{position:fixed;height:100%;width:100%;left:0;top:0;}"]), React__default.createElement(_JSXStyle, {
      id: "3423950975",
      dynamic: [transparent ? 'transparent' : 'rgba(33, 43, 54, 0.4)', zIndexComputed]
    }, [".backdrop.__jsx-style-dynamic-selector{background:".concat(transparent ? 'transparent' : 'rgba(33, 43, 54, 0.4)', ";z-index:").concat(zIndexComputed, ";}")]));
  });
};

Backdrop.defaultProps = {
  dataTest: 'dhis2-uicore-backdrop'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {function} onClick
 * @prop {boolean} transparent
 * @prop {Node} children
 * @prop {number} zIndex
 * @prop {string} className
 * @prop {string} [dataTest]
 */

Backdrop.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  transparent: propTypes.bool,
  zIndex: propTypes.number,
  onClick: propTypes.func
};

var Content$1 = function Content(_ref) {
  var children = _ref.children;
  return React__default.createElement("div", {
    className: "jsx-3777292165"
  }, children, React__default.createElement(_JSXStyle, {
    id: "3777292165"
  }, ["div.jsx-3777292165{position:absolute;top:50%;left:50%;width:auto;height:auto;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}"]));
};

Content$1.propTypes = {
  children: propTypes.node
};
/**
 * @module
 *
 * @param {ScreenCover.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { ScreenCover } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/principles/spacing-alignment.md#stacking|Design system}
 * @see Live demo: {@link /demo/?path=/story/screencover--default|Storybook}
 */

var ScreenCover = function ScreenCover(_ref2) {
  var children = _ref2.children,
      onClick = _ref2.onClick,
      className = _ref2.className,
      dataTest = _ref2.dataTest;
  return React__default.createElement(Backdrop, {
    onClick: onClick,
    zIndex: layers.blocking,
    className: className,
    dataTest: dataTest
  }, React__default.createElement(Content$1, null, children));
};

ScreenCover.defaultProps = {
  dataTest: 'dhis2-uicore-screencover'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {function} [onClick]
 * @prop {string} [className]
 * @prop {Node} [children]
 * @prop {string} [dataTest]
 */

ScreenCover.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  onClick: propTypes.func
};

var styles$3 = ["svg.jsx-2218109610{display:block;pointer-events:none;height:18px;width:35px;}", "svg.dense.jsx-2218109610{height:14px;width:27px;}", "svg.jsx-2218109610 .background.jsx-2218109610,svg.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.grey600, ";}"), "svg.jsx-2218109610 .checkmark.jsx-2218109610,svg.jsx-2218109610 .cross.jsx-2218109610,svg.jsx-2218109610 .handle.jsx-2218109610{fill:".concat(colors.white, ";}"), "svg.checked.jsx-2218109610 .handle-unchecked.jsx-2218109610,svg.jsx-2218109610:not(.checked) .handle-checked.jsx-2218109610{fill:none;}", "svg.checked.jsx-2218109610 .background.jsx-2218109610{fill:".concat(colors.teal400, ";}"), "svg.valid.jsx-2218109610 .background.jsx-2218109610{fill:".concat(colors.blue600, ";}"), "svg.warning.jsx-2218109610 .background.jsx-2218109610{fill:".concat(colors.yellow700, ";}"), "svg.error.jsx-2218109610 .background.jsx-2218109610{fill:".concat(colors.red500, ";}"), "svg.checked.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.teal700, ";}"), "svg.disabled.jsx-2218109610 .background.jsx-2218109610{fill:".concat(colors.grey300, ";}"), "svg.disabled.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.grey400, ";}"), "svg.valid.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.blue600, ";}"), "svg.valid.checked.jsx-2218109610 .border.jsx-2218109610,svg.valid.indeterminate.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.blue700, ";}"), "svg.warning.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.yellow700, ";}"), "svg.warning.checked.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.yellow800, ";}"), "svg.error.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.red500, ";}"), "svg.error.checked.jsx-2218109610 .border.jsx-2218109610{fill:".concat(colors.red700, ";}")];
styles$3.__hash = "2218109610";
function Regular$2(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    viewBox: "0 0 42 22",
    xmlns: "http://www.w3.org/2000/svg",
    className: "jsx-".concat(styles$3.__hash) + " " + (className || "")
  }, React__default.createElement("path", {
    d: "M0,11 L0,11 C0,4.92486775 4.92076837,0 11.0075657,0 L30.9924343,0 C37.071745,0 42,4.923532 42,11 L42,11 C42,17.0751322 37.0792316,22 30.9924343,22 L11.0075657,22 C4.92825504,22 0,17.0791222 0,11 L0,11 Z",
    fill: "red",
    className: "jsx-".concat(styles$3.__hash) + " " + "background"
  }), React__default.createElement("path", {
    d: "M30.9924343,0 C36.975248,0 41.8432574,4.76846989 41.99629,10.7115309 L42,11 C42,17.0751322 37.0792316,22 30.9924343,22 L11.0075657,22 C5.02475203,22 0.156742552,17.2341007 0.00370995454,11.2885915 L0,11 C0,4.92486775 4.92076837,0 11.0075657,0 L30.9924343,0 Z M30.9924343,1 L11.0075657,1 C5.47559009,1 0.99991738,5.47461611 0.99991738,10.9871457 L1.00337887,11.2628608 C1.14271146,16.6761076 5.5768313,21 11.0075657,21 L30.9924343,21 C36.5244099,21 41.0000827,16.5253839 41.0000827,11.0128598 L40.9966214,10.7372722 C40.8572703,5.32553352 36.4222391,1 30.9924343,1 Z" // fill="#00695C"
    // fillRule="nonzero"
    ,
    className: "jsx-".concat(styles$3.__hash) + " " + "border"
  }), React__default.createElement("path", {
    d: "M27.7071068,7.29289322 L30,9.585 L32.2928932,7.29289322 C32.6533772,6.93240926 33.2206082,6.90467972 33.6128994,7.20970461 L33.7071068,7.29289322 C34.0976311,7.68341751 34.0976311,8.31658249 33.7071068,8.70710678 L33.7071068,8.70710678 L31.415,11 L33.7071068,13.2928932 C34.0976311,13.6834175 34.0976311,14.3165825 33.7071068,14.7071068 C33.3165825,15.0976311 32.6834175,15.0976311 32.2928932,14.7071068 L30,12.415 L27.7071068,14.7071068 C27.3466228,15.0675907 26.7793918,15.0953203 26.3871006,14.7902954 L26.2928932,14.7071068 C25.9023689,14.3165825 25.9023689,13.6834175 26.2928932,13.2928932 L26.2928932,13.2928932 L28.585,11 L26.2928932,8.70710678 C25.9023689,8.31658249 25.9023689,7.68341751 26.2928932,7.29289322 C26.6834175,6.90236893 27.3165825,6.90236893 27.7071068,7.29289322 Z",
    fill: "#FFFFFF",
    className: "jsx-".concat(styles$3.__hash) + " " + "cross"
  }), React__default.createElement("path", {
    d: "M7.74451387,10.0285252 C7.39595738,10.1198564 7.12375034,10.3923519 7.03251575,10.7412777 C6.94128115,11.0902035 7.04521722,11.4612586 7.30437605,11.7118278 L10.2982384,14.7078028 C10.6875399,15.0973991 11.3185977,15.0973991 11.7078992,14.7078028 L16.695624,8.71585285 C16.9547828,8.46528367 17.0587189,8.09422851 16.9674843,7.74530271 C16.8762497,7.39637691 16.6040426,7.12388146 16.2554861,7.0325502 C15.9069296,6.94121893 15.5362672,7.04526513 15.2859632,7.30469855 L11.0030688,12.5910713 L8.71403676,10.3006735 C8.46373279,10.0412401 8.09307036,9.9371939 7.74451387,10.0285252 Z" // fill="#FFFFFF"
    // fillRule="nonzero"
    ,
    className: "jsx-".concat(styles$3.__hash) + " " + "checkmark"
  }), React__default.createElement("path", {
    d: "M11,20 C15.9705627,20 20,15.9705627 20,11 C20,6.02943725 15.9705627,2 11,2 C6.02943725,2 2,6.02943725 2,11 C2,15.9705627 6.02943725,20 11,20 Z" // fill="#FFFFFF"
    ,
    className: "jsx-".concat(styles$3.__hash) + " " + "handle handle-unchecked"
  }), React__default.createElement("path", {
    d: "M31,20 C35.9705627,20 40,15.9705627 40,11 C40,6.02943725 35.9705627,2 31,2 C26.0294373,2 22,6.02943725 22,11 C22,15.9705627 26.0294373,20 31,20 Z" // fill="#FFFFFF"
    ,
    className: "jsx-".concat(styles$3.__hash) + " " + "handle handle-checked"
  }), React__default.createElement(_JSXStyle, {
    id: styles$3.__hash
  }, styles$3));
}
Regular$2.propTypes = {
  className: propTypes.string
};

/**
 * @module
 *
 * @param {Switch.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Switch } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switch--default|Storybook}
 */

var Switch =
/*#__PURE__*/
function (_Component) {
  _inherits(Switch, _Component);

  function Switch() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Switch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Switch)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "ref", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.onChange) {
        _this.props.onChange(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(_this.createHandlerPayload(), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(_this.createHandlerPayload(), e);
      }
    });

    return _this;
  }

  _createClass(Switch, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.ref.current.focus();
      }
    }
  }, {
    key: "createHandlerPayload",
    value: function createHandlerPayload() {
      return {
        value: this.props.value,
        name: this.props.name,
        checked: !this.props.checked
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$checked = _this$props.checked,
          checked = _this$props$checked === void 0 ? false : _this$props$checked,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          label = _this$props.label,
          name = _this$props.name,
          tabIndex = _this$props.tabIndex,
          valid = _this$props.valid,
          value = _this$props.value,
          warning = _this$props.warning,
          dense = _this$props.dense,
          dataTest = _this$props.dataTest;
      var classes = cx({
        checked: checked,
        disabled: disabled,
        valid: valid,
        error: error,
        warning: warning,
        dense: dense
      });
      return React__default.createElement("label", {
        "data-test": dataTest,
        className: _JSXStyle.dynamic([["2828389896", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx(className, {
          disabled: disabled,
          dense: dense
        }) || "")
      }, React__default.createElement("input", {
        type: "checkbox",
        ref: this.ref,
        name: name,
        value: value,
        checked: checked,
        disabled: disabled,
        tabIndex: tabIndex,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        className: _JSXStyle.dynamic([["2828389896", [colors.grey900, theme.disabled, colors.blue600]]])
      }), React__default.createElement("div", {
        className: _JSXStyle.dynamic([["2828389896", [colors.grey900, theme.disabled, colors.blue600]]]) + " " + (cx('icon', {
          dense: dense
        }) || "")
      }, React__default.createElement(Regular$2, {
        className: classes
      })), label, React__default.createElement(_JSXStyle, {
        id: "2828389896",
        dynamic: [colors.grey900, theme.disabled, colors.blue600]
      }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:".concat(colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;pointer-events:none;position:absolute;}", ".icon.__jsx-style-dynamic-selector{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:14px;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;border-radius:12px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{border-color:".concat(colors.blue600, ";}")]));
    }
  }]);

  return Switch;
}(React.Component);

Switch.defaultProps = {
  dataTest: 'dhis2-uicore-switch'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {Node} label
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [checked]
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 *
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {string} [dataTest]
 */

Switch.propTypes = {
  label: propTypes.node.isRequired,
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  tabIndex: propTypes.string,
  valid: statusPropType,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {SwitchField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SwitchField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switchfield--default|Storybook}
 */

var SwitchField = function SwitchField(_ref) {
  var value = _ref.value,
      label = _ref.label,
      name = _ref.name,
      className = _ref.className,
      tabIndex = _ref.tabIndex,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      checked = _ref.checked,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      initialFocus = _ref.initialFocus,
      required = _ref.required,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleField, {
    toggleComponent: Switch,
    value: value,
    label: label,
    name: name,
    className: className,
    tabIndex: tabIndex,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    checked: checked,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    initialFocus: initialFocus,
    required: required,
    helpText: helpText,
    validationText: validationText,
    dataTest: dataTest
  });
};

SwitchField.defaultProps = {
  dataTest: 'dhis2-uicore-switchfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} value
 * @prop {string} label
 *
 * @prop {string} [name]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 *
 * @prop {function} [onChange]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 *
 * @prop {boolean} [checked]
 * @prop {boolean} [disabled]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {boolean} [initialFocus]
 * @prop {boolean} [required]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {string} [dataTest]
 */

SwitchField.propTypes = {
  label: propTypes.node.isRequired,
  checked: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  name: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {SwitchGroup.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SwitchGroup } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switchgroup--default|Storybook}
 */

var SwitchGroup = function SwitchGroup(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroup, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    dataTest: dataTest
  }, children);
};

SwitchGroup.defaultProps = {
  dataTest: 'dhis2-uicore-switchgroup'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Switch>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {Array.<String>} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [dataTest]
 */

SwitchGroup.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  name: propTypes.string,
  valid: statusPropType,
  value: propTypes.arrayOf(propTypes.string),
  warning: statusPropType,
  onChange: propTypes.func
};

/**
 * @module
 * @param {SwitchGroupField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SwitchGroupField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/switch.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/switchgroupfield--default|Storybook}
 */

var SwitchGroupField = function SwitchGroupField(_ref) {
  var children = _ref.children,
      onChange = _ref.onChange,
      name = _ref.name,
      value = _ref.value,
      className = _ref.className,
      disabled = _ref.disabled,
      valid = _ref.valid,
      warning = _ref.warning,
      error = _ref.error,
      dense = _ref.dense,
      label = _ref.label,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      required = _ref.required,
      dataTest = _ref.dataTest;
  return React__default.createElement(ToggleGroupField, {
    onChange: onChange,
    name: name,
    value: value,
    className: className,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    dense: dense,
    label: label,
    helpText: helpText,
    validationText: validationText,
    required: required,
    dataTest: dataTest
  }, children);
};

SwitchGroupField.defaultProps = {
  dataTest: 'dhis2-uicore-switchgroupfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Array.<Switch>} children
 * @prop {function} [onChange]
 * @prop {string} name
 *
 * @prop {Array.<String>} [value]
 * @prop {string} [className]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [valid] - `valid`, `warning`, and `error` are
 * mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 *
 * @prop {boolean} [dense]
 * @prop {string} [label]
 * @prop {string} [helpText]
 * @prop {string} [validationText]
 * @prop {boolean} [required]
 * @prop {string} [dataTest]
 */

SwitchGroupField.propTypes = {
  children: propTypes.arrayOf(propTypes.element).isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  label: propTypes.string,
  name: propTypes.string,
  required: propTypes.bool,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.arrayOf(propTypes.string),
  warning: statusPropType,
  onChange: propTypes.func
};

var styles$4 = [".textarea.jsx-2672713380{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "textarea.jsx-2672713380{box-sizing:border-box;padding:8px 12px;color:".concat(colors.grey900, ";background-color:transparent;border:1px solid ").concat(colors.grey500, ";border-radius:3px;box-shadow:inset 0 0 0 1px rgba(102,113,123,0.15), inset 0 1px 2px 0 rgba(102,113,123,0.1);outline:0;font-size:14px;line-height:16px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;}"), "textarea.dense.jsx-2672713380{padding:4px 12px;}", "textarea.jsx-2672713380:focus{border-color:".concat(colors.teal400, ";}"), "textarea.valid.jsx-2672713380{border-color:".concat(theme.valid, ";}"), "textarea.warning.jsx-2672713380{border-color:".concat(theme.warning, ";}"), "textarea.error.jsx-2672713380{border-color:".concat(theme.error, ";}"), "textarea.read-only.jsx-2672713380{background-color:".concat(colors.grey100, ";border-color:").concat(colors.grey500, ";cursor:text;}"), "textarea.disabled.jsx-2672713380{background-color:".concat(colors.grey100, ";border-color:").concat(colors.grey500, ";color:").concat(theme.disabled, ";cursor:not-allowed;}"), ".status-icon.jsx-2672713380{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;margin-left:".concat(spacers.dp4, ";}")];
styles$4.__hash = "2672713380";

/**
 * @module
 * @param {TextArea.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TextArea } from '@dhis2/ui-core'
 */

var TextArea =
/*#__PURE__*/
function (_Component) {
  _inherits(TextArea, _Component);

  function TextArea() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TextArea);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextArea)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "textareaRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "state", {
      height: 'auto'
    });

    _defineProperty(_assertThisInitialized(_this), "textareaDimensions", {
      width: 0,
      height: 0
    });

    _defineProperty(_assertThisInitialized(_this), "userHasResized", false);

    _defineProperty(_assertThisInitialized(_this), "setTextareaDimensions", function () {
      var textarea = _this.textareaRef.current;
      _this.textareaDimensions = {
        width: textarea.clientWidth,
        height: textarea.clientHeight
      };
    });

    _defineProperty(_assertThisInitialized(_this), "hasUserResized", function () {
      var _this$textareaDimensi = _this.textareaDimensions,
          oldWidth = _this$textareaDimensi.width,
          oldHeight = _this$textareaDimensi.height;

      _this.setTextareaDimensions();

      var _this$textareaDimensi2 = _this.textareaDimensions,
          newWidth = _this$textareaDimensi2.width,
          newHeight = _this$textareaDimensi2.height;
      var userHasResized = newWidth !== oldWidth || newHeight !== oldHeight;

      if (userHasResized) {
        _this.userHasResized = true;

        _this.removeResizeListener();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      if (_this.props.onChange) {
        _this.props.onChange(_this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.onBlur) {
        _this.props.onBlur(_this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.onFocus) {
        _this.props.onFocus(_this.createHandlerPayload(e), e);
      }
    });

    return _this;
  }

  _createClass(TextArea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.attachResizeListener();

      if (this.props.initialFocus) {
        this.textareaRef.current.focus();
      }

      if (this.shouldDoAutoGrow()) {
        this.setHeight();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.shouldDoAutoGrow() && this.props.value !== prevProps.value) {
        this.setHeight();
      }
    }
  }, {
    key: "attachResizeListener",
    value: function attachResizeListener() {
      var textarea = this.textareaRef.current;
      textarea.addEventListener('mousedown', this.setTextareaDimensions);
      textarea.addEventListener('mouseup', this.hasUserResized);
    }
  }, {
    key: "removeResizeListener",
    value: function removeResizeListener() {
      var textarea = this.textareaRef.current;
      textarea.removeEventListener('mousedown', this.setTextareaDimensions);
      textarea.removeEventListener('mouseup', this.hasUserResized);
    }
  }, {
    key: "setHeight",
    value: function setHeight() {
      var textarea = this.textareaRef.current;
      var offset = textarea.offsetHeight - textarea.clientHeight;
      var height = textarea.scrollHeight + offset + 'px';
      this.setState({
        height: height
      });
    }
  }, {
    key: "shouldDoAutoGrow",
    value: function shouldDoAutoGrow() {
      return this.props.autoGrow && !this.userHasResized;
    }
  }, {
    key: "createHandlerPayload",
    value: function createHandlerPayload(e) {
      return {
        value: e.target.value,
        name: this.props.name
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          dense = _this$props.dense,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          placeholder = _this$props.placeholder,
          name = _this$props.name,
          valid = _this$props.valid,
          error = _this$props.error,
          warning = _this$props.warning,
          loading = _this$props.loading,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          rows = _this$props.rows,
          width = _this$props.width,
          resize = _this$props.resize,
          dataTest = _this$props.dataTest;
      var height = this.state.height;
      return React__default.createElement("div", {
        "data-test": dataTest,
        className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + (cx('textarea', className) || "")
      }, React__default.createElement("textarea", {
        id: name,
        name: name,
        placeholder: placeholder,
        ref: this.textareaRef,
        value: value,
        disabled: disabled,
        readOnly: readOnly,
        tabIndex: tabIndex,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onChange: this.handleChange,
        rows: rows,
        className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + (cx({
          dense: dense,
          disabled: disabled,
          error: error,
          valid: valid,
          warning: warning,
          'read-only': readOnly
        }) || "")
      }), React__default.createElement("div", {
        className: "jsx-".concat(styles$4.__hash) + " " + _JSXStyle.dynamic([["3036048772", [width, height, resize]]]) + " " + "status-icon"
      }, React__default.createElement(StatusIcon, {
        error: error,
        valid: valid,
        loading: loading,
        warning: warning
      })), React__default.createElement(_JSXStyle, {
        id: styles$4.__hash
      }, styles$4), React__default.createElement(_JSXStyle, {
        id: "3036048772",
        dynamic: [width, height, resize]
      }, ["textarea.__jsx-style-dynamic-selector{width:".concat(width, ";height:").concat(height, ";resize:").concat(resize, ";}")]));
    }
  }]);

  return TextArea;
}(React.Component);
TextArea.defaultProps = {
  rows: 4,
  width: '100%',
  resize: 'vertical',
  dataTest: 'dhis2-uicore-textarea'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange] - called with the signature `object, event`
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {boolean} [autoGrow]
 * @prop {boolean} [readOnly]
 * @prop {string} [resize=vertical] - resize attribute on the textarea,
 * one of `none`, `both`, `horizontal`, `vertical`
 * @prop {number} [rows=4]
 * @prop {string} [width]
 * @prop {string} [dataTest]
 */

TextArea.propTypes = {
  autoGrow: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  initialFocus: propTypes.bool,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  resize: propTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),
  rows: propTypes.number,
  tabIndex: propTypes.string,
  valid: statusPropType,
  value: propTypes.string,
  warning: statusPropType,
  width: propTypes.string,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 * @param {TextAreaField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TextAreaField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/update-input/atoms/inputfield.md#textarea|Design system}
 * @see Live demo: {@link /demo/?path=/story/textareafield--default|Storybook}
 */

var TextAreaField = function TextAreaField(_ref) {
  var className = _ref.className,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      initialFocus = _ref.initialFocus,
      dense = _ref.dense,
      required = _ref.required,
      label = _ref.label,
      disabled = _ref.disabled,
      placeholder = _ref.placeholder,
      name = _ref.name,
      valid = _ref.valid,
      error = _ref.error,
      warning = _ref.warning,
      loading = _ref.loading,
      value = _ref.value,
      tabIndex = _ref.tabIndex,
      helpText = _ref.helpText,
      validationText = _ref.validationText,
      autoGrow = _ref.autoGrow,
      readOnly = _ref.readOnly,
      resize = _ref.resize,
      rows = _ref.rows,
      inputWidth = _ref.inputWidth,
      dataTest = _ref.dataTest;
  return React__default.createElement(Field, {
    className: className,
    dataTest: dataTest
  }, label && React__default.createElement(Label, {
    required: required,
    disabled: disabled,
    htmlFor: name
  }, label), React__default.createElement(Constrictor, {
    width: inputWidth,
    minWidth: "220px"
  }, React__default.createElement(TextArea, {
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: onChange,
    name: name,
    value: value || '',
    placeholder: placeholder,
    disabled: disabled,
    valid: valid,
    warning: warning,
    error: error,
    loading: loading,
    dense: dense,
    tabIndex: tabIndex,
    initialFocus: initialFocus,
    autoGrow: autoGrow,
    readOnly: readOnly,
    resize: resize,
    rows: rows
  })), helpText && React__default.createElement(Help, {
    dataTest: "".concat(dataTest, "-help")
  }, helpText), validationText && React__default.createElement(Help, {
    error: error,
    warning: warning,
    valid: valid,
    dataTest: "".concat(dataTest, "-validation")
  }, validationText));
};

TextAreaField.defaultProps = {
  rows: 4,
  width: '100%',
  resize: 'vertical',
  dataTest: 'dhis2-uicore-textareafield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} name
 * @prop {function} [onChange]
 * @prop {function} [onBlur]
 * @prop {function} [onFocus]
 * @prop {string} [label]
 * @prop {string} [className]
 * @prop {string} [placeholder]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 *
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense] - Compact mode
 * @prop {boolean} [initialFocus]
 *
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, and `loading`
 * are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 *
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 *
 * @prop {boolean} [autoGrow]
 * @prop {boolean} [readOnly]
 * @prop {string} [resize=vertical] - resize attribute on the textarea,
 * one of `none`, `both`, `horizontal`, `vertical`
 * @prop {number} [rows=4]
 * @prop {string} [inputWidth]
 * @prop {string} [dataTest]
 */

TextAreaField.propTypes = {
  autoGrow: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  name: propTypes.string,
  placeholder: propTypes.string,
  readOnly: propTypes.bool,
  required: propTypes.bool,
  resize: propTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),
  rows: propTypes.number,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  value: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

var ArrowDown = function ArrowDown(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    viewBox: "0 0 16 16",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    className: "jsx-595155045" + " " + (className || "")
  }, React__default.createElement("g", {
    id: "icon/16/arrow-down",
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd",
    className: "jsx-595155045"
  }, React__default.createElement("path", {
    d: "M7.29289,11.7071 C7.68342,12.0976 8.31658,12.0976 8.70711,11.7071 L13.7071,6.70711 C14.0976,6.31658 14.0976,5.68342 13.7071,5.29289 C13.3166,4.90237 12.6834,4.90237 12.2929,5.29289 L8,9.58579 L3.70711,5.29289 C3.31658,4.90237 2.68342,4.90237 2.29289,5.29289 C1.90237,5.68342 1.90237,6.31658 2.29289,6.70711 L7.29289,11.7071 Z",
    id: "arrow-down",
    fill: "#4A5768",
    className: "jsx-595155045"
  })), React__default.createElement(_JSXStyle, {
    id: "595155045"
  }, ["svg.jsx-595155045{fill:inherit;height:16px;width:16px;vertical-align:middle;}"]));
};
ArrowDown.propTypes = {
  className: propTypes.string
};

var InputWrapper = function InputWrapper(_ref) {
  var onToggle = _ref.onToggle,
      children = _ref.children,
      tabIndex = _ref.tabIndex,
      error = _ref.error,
      warning = _ref.warning,
      valid = _ref.valid,
      disabled = _ref.disabled,
      dense = _ref.dense,
      className = _ref.className,
      inputRef = _ref.inputRef;
  var classNames = cx(className, 'root', {
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    dense: dense
  });
  return React__default.createElement("div", {
    onClick: onToggle,
    tabIndex: tabIndex,
    ref: inputRef,
    className: _JSXStyle.dynamic([["1450512774", [colors.grey500, colors.teal400, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + (classNames || "")
  }, React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1450512774", [colors.grey500, colors.teal400, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-children"
  }, children), React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1450512774", [colors.grey500, colors.teal400, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]]]) + " " + "root-right"
  }, React__default.createElement(ArrowDown, null)), React__default.createElement(_JSXStyle, {
    id: "1450512774",
    dynamic: [colors.grey500, colors.teal400, theme.valid, theme.warning, theme.error, colors.grey100, colors.grey500, theme.disabled]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:white;border-radius:3px;border:1px solid ".concat(colors.grey500, ";box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:40px;padding:6px 12px;box-shadow:inset 0 1px 2px 0 rgba(48,54,60,0.1);}"), ".root.__jsx-style-dynamic-selector:focus,.root.__jsx-style-dynamic-selector:active{border-color:".concat(colors.teal400, ";outline:0;}"), ".root.valid.__jsx-style-dynamic-selector{border-color:".concat(theme.valid, ";}"), ".root.warning.__jsx-style-dynamic-selector{border-color:".concat(theme.warning, ";}"), ".root.error.__jsx-style-dynamic-selector{border-color:".concat(theme.error, ";}"), ".root.disabled.__jsx-style-dynamic-selector{background-color:".concat(colors.grey100, ";border-color:").concat(colors.grey500, ";color:").concat(theme.disabled, ";cursor:not-allowed;}"), ".root.dense.__jsx-style-dynamic-selector{padding:4px 8px;min-height:32px;}", ".root-children.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;}"]));
};

InputWrapper.defaultProps = {
  tabIndex: '0'
};
InputWrapper.propTypes = {
  inputRef: propTypes.object.isRequired,
  tabIndex: propTypes.string.isRequired,
  onToggle: propTypes.func.isRequired,
  children: propTypes.element,
  className: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  valid: statusPropType,
  warning: statusPropType
};

var MenuWrapper = function MenuWrapper(_ref) {
  var children = _ref.children,
      maxHeight = _ref.maxHeight,
      className = _ref.className,
      menuRef = _ref.menuRef,
      menuTop = _ref.menuTop,
      menuLeft = _ref.menuLeft,
      menuWidth = _ref.menuWidth,
      zIndex = _ref.zIndex,
      onClick = _ref.onClick,
      dataTest = _ref.dataTest;
  var _styles$className = {
    styles: React__default.createElement(_JSXStyle, {
      id: "81273804",
      dynamic: [maxHeight]
    }, [".__jsx-style-dynamic-selector{height:auto;max-height:".concat(maxHeight, ";overflow:auto;}")]),
    className: _JSXStyle.dynamic([["81273804", [maxHeight]]])
  },
      styles = _styles$className.styles,
      cardClassName = _styles$className.className;
  return ReactDOM__default.createPortal(React__default.createElement(Backdrop, {
    onClick: onClick,
    transparent: true,
    zIndex: zIndex
  }, React__default.createElement("div", {
    ref: menuRef,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2033982183", [menuTop, menuLeft, menuWidth]]]) + " " + (className || "")
  }, React__default.createElement(Card, {
    className: cardClassName
  }, children), styles, React__default.createElement(_JSXStyle, {
    id: "2033982183",
    dynamic: [menuTop, menuLeft, menuWidth]
  }, ["div.__jsx-style-dynamic-selector{position:absolute;top:".concat(menuTop, ";left:").concat(menuLeft, ";width:").concat(menuWidth, ";}")]))), document.body);
};

MenuWrapper.defaultProps = {
  maxHeight: '280px',
  zIndex: layers.applicationTop
};
MenuWrapper.propTypes = {
  dataTest: propTypes.string.isRequired,
  menuLeft: propTypes.string.isRequired,
  menuRef: propTypes.object.isRequired,
  menuTop: propTypes.string.isRequired,
  menuWidth: propTypes.string.isRequired,
  selectRef: propTypes.object.isRequired,
  children: propTypes.node,
  className: propTypes.string,
  maxHeight: propTypes.string,
  zIndex: propTypes.number,
  onClick: propTypes.func
};

var ESCAPE_KEY = 27;
var SPACE_KEY = 32;
var UP_KEY = 38;
var DOWN_KEY = 40;
var Select =
/*#__PURE__*/
function (_Component) {
  _inherits(Select, _Component);

  function Select() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Select);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Select)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      open: false,
      menuTop: 'auto',
      menuLeft: 'auto',
      menuWidth: 'auto'
    });

    _defineProperty(_assertThisInitialized(_this), "menuRequestId", null);

    _defineProperty(_assertThisInitialized(_this), "selectRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "inputRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "menuRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleFocusInput", function () {
      _this.inputRef.current.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "onFocus", function (e) {
      var _this$props = _this.props,
          onFocus = _this$props.onFocus,
          disabled = _this$props.disabled,
          selected = _this$props.selected;

      if (disabled || !onFocus) {
        return;
      }

      onFocus({
        selected: selected
      }, e);
    });

    _defineProperty(_assertThisInitialized(_this), "updateMenuPosition", function () {
      var selectEl = _this.selectRef.current; // Debounce by canceling the previously scheduled measurement

      if (_this.menuRequestId) {
        window.cancelAnimationFrame(_this.menuRequestId);
      }

      _this.menuRequestId = window.requestAnimationFrame(function () {
        var rect = selectEl.getBoundingClientRect();
        var menuTop = rect.bottom;
        var menuLeft = rect.left;
        var menuWidth = rect.width;
        var sizing = {
          menuTop: "".concat(menuTop, "px"),
          menuLeft: "".concat(menuLeft, "px"),
          menuWidth: "".concat(menuWidth, "px")
        };

        _this.setState(sizing);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMeasurementStart", function () {
      _this.updateMenuPosition();

      window.addEventListener('resize', _this.updateMenuPosition);
      window.addEventListener('scroll', _this.updateMenuPosition);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMeasurementStop", function () {
      window.removeEventListener('resize', _this.updateMenuPosition);
      window.removeEventListener('scroll', _this.updateMenuPosition);

      if (_this.menuRequestId) {
        window.cancelAnimationFrame(_this.menuRequestId);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOpen", function () {
      _this.handleMeasurementStart();

      _this.setState({
        open: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        open: false
      });

      _this.handleMeasurementStop();
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function (e) {
      if (_this.props.disabled) {
        return;
      }

      e.stopPropagation();
      _this.state.open ? _this.handleClose() : _this.handleOpen();
    });

    _defineProperty(_assertThisInitialized(_this), "onOutsideClick", function (e) {
      var _this$props2 = _this.props,
          onBlur = _this$props2.onBlur,
          disabled = _this$props2.disabled,
          selected = _this$props2.selected;

      if (disabled) {
        return;
      }

      _this.handleClose();

      if (onBlur) {
        onBlur({
          selected: selected
        }, e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e) {
      if (_this.props.disabled) {
        return;
      }

      e.stopPropagation();
      var open = _this.state.open;
      var keyCode = e.keyCode;
      var shouldOpen = !open && (keyCode === SPACE_KEY || keyCode === UP_KEY || keyCode === DOWN_KEY);
      var shouldClose = open && keyCode === ESCAPE_KEY;

      if (shouldClose) {
        return _this.handleClose();
      }

      if (shouldOpen) {
        return _this.handleOpen();
      }
    });

    return _this;
  }

  _createClass(Select, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.initialFocus) {
        this.inputRef.current.focus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.handleMeasurementStop();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          open = _this$state.open,
          menuTop = _this$state.menuTop,
          menuLeft = _this$state.menuLeft,
          menuWidth = _this$state.menuWidth;
      var _this$props3 = this.props,
          children = _this$props3.children,
          className = _this$props3.className,
          selected = _this$props3.selected,
          onChange = _this$props3.onChange,
          tabIndex = _this$props3.tabIndex,
          maxHeight = _this$props3.maxHeight,
          error = _this$props3.error,
          warning = _this$props3.warning,
          valid = _this$props3.valid,
          disabled = _this$props3.disabled,
          dense = _this$props3.dense,
          dataTest = _this$props3.dataTest; // We need to update the menu's position on selection because
      // that can cause the input area to change size

      var handleChange = function handleChange(data, e) {
        _this2.updateMenuPosition();

        onChange(data, e);
      }; // Create the input


      var inputProps = {
        selected: selected,
        onChange: handleChange,
        options: children,
        disabled: disabled
      };
      var input = React__default.cloneElement(this.props.input, inputProps); // Create the menu

      var menuProps = {
        selected: selected,
        onChange: handleChange,
        options: children,
        handleClose: this.handleClose,
        handleFocusInput: this.handleFocusInput
      };
      var menu = React__default.cloneElement(this.props.menu, menuProps);
      return React__default.createElement("div", {
        className: className,
        ref: this.selectRef,
        onFocus: this.onFocus,
        onKeyDown: this.onKeyDown,
        "data-test": dataTest
      }, React__default.createElement(InputWrapper, {
        onToggle: this.onToggle,
        inputRef: this.inputRef,
        tabIndex: tabIndex,
        error: error,
        warning: warning,
        valid: valid,
        disabled: disabled,
        dense: dense
      }, input), open && React__default.createElement(MenuWrapper, {
        onClick: this.onOutsideClick,
        maxHeight: maxHeight,
        selectRef: this.selectRef,
        menuRef: this.menuRef,
        menuTop: menuTop,
        menuLeft: menuLeft,
        menuWidth: menuWidth,
        dataTest: "".concat(dataTest, "-menu")
      }, menu));
    }
  }]);

  return Select;
}(React.Component);
Select.defaultProps = {
  dataTest: 'dhis2-uicore-select'
};
Select.propTypes = {
  input: propTypes.element.isRequired,
  menu: propTypes.element.isRequired,
  selected: propTypes.oneOfType([singleSelectedPropType, multiSelectedPropType]).isRequired,
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  error: statusPropType,
  initialFocus: propTypes.bool,
  maxHeight: propTypes.string,
  tabIndex: propTypes.string,
  valid: statusPropType,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

var checkIfValidOption = function checkIfValidOption(option) {
  return option && 'props' in option && 'value' in option.props && 'label' in option.props;
}; // Filters all children that won't be rendered from an array of react children

var filterIgnored = function filterIgnored(children) {
  return React__default.Children.toArray(children).filter(function (child) {
    return child !== null && child !== false && child !== undefined;
  });
}; // Find an option in an array of react children

var findOptionChild = function findOptionChild(targetOption, optionChildren) {
  return React__default.Children.toArray(optionChildren).find(function (currentOption) {
    if (!currentOption.props) {
      return false;
    }

    var matchesLabel = targetOption.label === currentOption.props.label;
    var matchesValue = targetOption.value === currentOption.props.value;
    return matchesLabel && matchesValue;
  });
}; // Find an option in an array of option objects

var findOption = function findOption(targetOption, optionArray) {
  return optionArray.find(function (currentOption) {
    var matchesLabel = targetOption.label === currentOption.label;
    var matchesValue = targetOption.value === currentOption.value;
    return matchesLabel && matchesValue;
  });
}; // Remove a specific option from an array of options

var removeOption = function removeOption(targetOption, optionArray) {
  return optionArray.filter(function (currentOption) {
    var matchesLabel = targetOption.label === currentOption.label;
    var matchesValue = targetOption.value === currentOption.value;
    return !matchesLabel && !matchesValue;
  });
};

var Selection = function Selection(_ref) {
  var options = _ref.options,
      selected = _ref.selected,
      className = _ref.className;
  var selectedOption = findOptionChild(selected, options);

  if (!selectedOption) {
    var message = 'The selected option could not be found as a child of the select. ' + 'Make sure that the value and label passed to the `selected` prop ' + 'match an existing option.';
    throw new Error(message);
  }

  var icon = selectedOption.props.icon;
  var label = selectedOption.props.label;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2368250986", [spacers.dp8, spacers.dp16, spacers.dp16]]]) + " " + (cx(className, 'root') || "")
  }, icon && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2368250986", [spacers.dp8, spacers.dp16, spacers.dp16]]]) + " " + "root-icon"
  }, icon), label, React__default.createElement(_JSXStyle, {
    id: "2368250986",
    dynamic: [spacers.dp8, spacers.dp16, spacers.dp16]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".root-icon.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp8, ";width:").concat(spacers.dp16, ";height:").concat(spacers.dp16, ";overflow:hidden;}")]));
};

Selection.propTypes = {
  className: propTypes.string,
  options: propTypes.node,
  selected: singleSelectedPropType
};

var InputPlaceholder = function InputPlaceholder(_ref) {
  var placeholder = _ref.placeholder,
      className = _ref.className;

  if (!placeholder) {
    return null;
  }

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1027033961", [colors.grey600]]]) + " " + (className || "")
  }, placeholder, React__default.createElement(_JSXStyle, {
    id: "1027033961",
    dynamic: [colors.grey600]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(colors.grey600, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}")]));
};

InputPlaceholder.propTypes = {
  className: propTypes.string,
  placeholder: propTypes.string
};

var InputPrefix = function InputPrefix(_ref) {
  var prefix = _ref.prefix,
      className = _ref.className;

  if (!prefix) {
    return null;
  }

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["153011991", [colors.grey600, spacers.dp4]]]) + " " + (className || "")
  }, prefix, React__default.createElement(_JSXStyle, {
    id: "153011991",
    dynamic: [colors.grey600, spacers.dp4]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(colors.grey600, ";padding-right:").concat(spacers.dp4, ";font-size:14px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}")]));
};

InputPrefix.propTypes = {
  className: propTypes.string,
  prefix: propTypes.string
};

var InputClearButton = function InputClearButton(_ref) {
  var onClear = _ref.onClear,
      clearText = _ref.clearText,
      className = _ref.className;
  return React__default.createElement(Button, {
    small: true,
    secondary: true,
    onClick: onClear,
    type: "button",
    className: className
  }, clearText);
};

InputClearButton.propTypes = {
  clearText: propTypes.string.isRequired,
  onClear: propTypes.func.isRequired,
  className: propTypes.string
};

var Input$1 = function Input(_ref) {
  var selected = _ref.selected,
      onChange = _ref.onChange,
      clearable = _ref.clearable,
      clearText = _ref.clearText,
      placeholder = _ref.placeholder,
      prefix = _ref.prefix,
      options = _ref.options,
      className = _ref.className,
      disabled = _ref.disabled,
      inputMaxHeight = _ref.inputMaxHeight;
  var hasSelection = 'label' in selected && 'value' in selected;

  var onClear = function onClear(_, e) {
    var data = {
      selected: {}
    };
    e.stopPropagation();
    onChange(data, e);
  };

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + (cx('root', className) || "")
  }, React__default.createElement(InputPrefix, {
    prefix: prefix
  }), !hasSelection && !prefix && React__default.createElement(InputPlaceholder, {
    placeholder: placeholder
  }), hasSelection && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-input"
  }, React__default.createElement(Selection, {
    selected: selected,
    options: options
  })), hasSelection && clearable && !disabled && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-right"
  }, React__default.createElement(InputClearButton, {
    onClear: onClear,
    clearText: clearText
  })), React__default.createElement(_JSXStyle, {
    id: "1360178250",
    dynamic: [colors.grey900]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:".concat(colors.grey900, ";font-size:14px;line-height:16px;}"), ".root-input.__jsx-style-dynamic-selector{overflow-y:auto;-webkit-flex:1;-ms-flex:1;flex:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;margin-right:10px;}"]), React__default.createElement(_JSXStyle, {
    id: "1331770409",
    dynamic: [inputMaxHeight]
  }, [".root-input.__jsx-style-dynamic-selector{max-height:".concat(inputMaxHeight, ";}")]));
};

Input$1.defaultProps = {
  inputMaxHeight: '100px'
};
Input$1.propTypes = {
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  disabled: propTypes.bool,
  inputMaxHeight: propTypes.string,
  options: propTypes.node,
  placeholder: propTypes.string,
  prefix: propTypes.string,
  selected: singleSelectedPropType,
  onChange: propTypes.func
};

var Empty = function Empty(_ref) {
  var message = _ref.message,
      className = _ref.className;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["849993029", [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]]]) + " " + (className || "")
  }, message, React__default.createElement(_JSXStyle, {
    id: "849993029",
    dynamic: [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(colors.grey700, ";font-family:").concat(theme.fonts, ";font-size:13px;line-height:16px;padding:").concat(spacers.dp8, " ").concat(spacers.dp24, ";text-align:center;}")]));
};

Empty.propTypes = {
  message: propTypes.string.isRequired,
  className: propTypes.string
};

var onIgnoredClick = function onIgnoredClick(_, e) {
  e.stopPropagation();
  e.preventDefault();
};

var Menu = function Menu(_ref) {
  var options = _ref.options,
      onChange = _ref.onChange,
      selected = _ref.selected,
      empty = _ref.empty,
      handleFocusInput = _ref.handleFocusInput,
      handleClose = _ref.handleClose;
  var renderedOptions = filterIgnored(options);

  if (React__default.Children.count(renderedOptions) === 0) {
    // If it's a string, supply it to our <Empty> component so it looks better
    if (typeof empty === 'string') {
      return React__default.createElement(Empty, {
        message: empty
      });
    } // Otherwise just render the supplied markup


    return empty;
  }

  var children = React__default.Children.map(options, function (child) {
    var isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.

    if (!isValidOption) {
      return child;
    }

    var _child$props = child.props,
        value = _child$props.value,
        label = _child$props.label,
        isDisabled = _child$props.disabled; // Active means the option is currently selected

    var isActive = value === selected.value && label === selected.label;

    var onClick = function onClick(_, e) {
      var data = {
        selected: {
          value: value,
          label: label
        }
      };
      e.stopPropagation();
      onChange(data, e);
      handleClose();
      handleFocusInput();
    }; // Clicks on active options or disabled options should be ignored for the single select


    var isIgnored = isActive || isDisabled;
    return React__default.cloneElement(child, _objectSpread2({}, child.props, {
      onClick: isIgnored ? onIgnoredClick : onClick,
      active: isActive
    }));
  });
  return React__default.createElement(React__default.Fragment, null, children);
};

Menu.defaultProps = {
  empty: ''
};
Menu.propTypes = {
  empty: propTypes.node,
  handleClose: propTypes.func,
  handleFocusInput: propTypes.func,
  options: propTypes.node,
  selected: singleSelectedPropType,
  onChange: propTypes.func
};

var FilterInput = function FilterInput(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      placeholder = _ref.placeholder,
      className = _ref.className;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["4109576192", [colors.white, spacers.dp8, spacers.dp8, spacers.dp4, spacers.dp8]]]) + " " + (className || "")
  }, React__default.createElement(Input, {
    dense: true,
    value: value,
    onChange: onChange,
    type: "text",
    name: "filter",
    placeholder: placeholder,
    initialFocus: true
  }), React__default.createElement(_JSXStyle, {
    id: "4109576192",
    dynamic: [colors.white, spacers.dp8, spacers.dp8, spacers.dp4, spacers.dp8]
  }, ["div.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;top:0;background:".concat(colors.white, ";padding:").concat(spacers.dp8, " ").concat(spacers.dp8, " ").concat(spacers.dp4, " ").concat(spacers.dp8, ";}")]));
};

FilterInput.propTypes = {
  value: propTypes.string.isRequired,
  className: propTypes.string,
  placeholder: propTypes.string,
  onChange: propTypes.func
};

var NoMatch = function NoMatch(_ref) {
  var message = _ref.message,
      className = _ref.className;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["849993029", [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]]]) + " " + (className || "")
  }, message, React__default.createElement(_JSXStyle, {
    id: "849993029",
    dynamic: [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{color:".concat(colors.grey700, ";font-family:").concat(theme.fonts, ";font-size:13px;line-height:16px;padding:").concat(spacers.dp8, " ").concat(spacers.dp24, ";text-align:center;}")]));
};

NoMatch.propTypes = {
  message: propTypes.string.isRequired,
  className: propTypes.string
};

var FilterableMenu =
/*#__PURE__*/
function (_Component) {
  _inherits(FilterableMenu, _Component);

  function FilterableMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FilterableMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FilterableMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      filter: ''
    });

    _defineProperty(_assertThisInitialized(_this), "onFilterChange", function (_ref) {
      var value = _ref.value;

      _this.setState({
        filter: value
      });
    });

    return _this;
  }

  _createClass(FilterableMenu, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          options = _this$props.options,
          onChange = _this$props.onChange,
          selected = _this$props.selected,
          empty = _this$props.empty,
          handleClose = _this$props.handleClose,
          handleFocusInput = _this$props.handleFocusInput,
          placeholder = _this$props.placeholder,
          noMatchText = _this$props.noMatchText,
          Menu = _this$props.Menu;
      var filter = this.state.filter;
      var menuProps = {
        onChange: onChange,
        selected: selected,
        empty: empty,
        handleClose: handleClose,
        handleFocusInput: handleFocusInput
      };
      var renderedOptions = filterIgnored(options); // If there are no options or there's no filter, just pass everything through

      if (React__default.Children.count(renderedOptions) === 0 || !filter) {
        return React__default.createElement(React__default.Fragment, null, React__default.createElement(FilterInput, {
          placeholder: placeholder,
          value: filter,
          onChange: this.onFilterChange
        }), React__default.createElement(Menu, _extends({}, menuProps, {
          options: options
        })));
      }

      var filtered = React__default.Children.map(options, function (child) {
        var isValidOption = checkIfValidOption(child); // Filter it out if it's an invalid option

        if (!isValidOption) {
          return null;
        }

        var label = child.props.label; // Filter by label, because that's the part of an option that's displayed to the user

        var match = label.toLowerCase().includes(filter.toLowerCase());
        return match ? child : null;
      });
      var hasMatch = React__default.Children.count(filtered) > 0;
      return React__default.createElement(React__default.Fragment, null, React__default.createElement(FilterInput, {
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), hasMatch ? React__default.createElement(Menu, _extends({}, menuProps, {
        options: filtered
      })) : React__default.createElement(NoMatch, {
        message: noMatchText
      }));
    }
  }]);

  return FilterableMenu;
}(React.Component);
FilterableMenu.propTypes = {
  Menu: propTypes.elementType.isRequired,
  noMatchText: propTypes.string.isRequired,
  selected: propTypes.oneOfType([singleSelectedPropType, multiSelectedPropType]).isRequired,
  empty: propTypes.node,
  handleClose: propTypes.func,
  handleFocusInput: propTypes.func,
  options: propTypes.node,
  placeholder: propTypes.string,
  onChange: propTypes.func
};

var FilterableMenu$1 = function FilterableMenu$1(_ref) {
  var options = _ref.options,
      onChange = _ref.onChange,
      selected = _ref.selected,
      empty = _ref.empty,
      handleClose = _ref.handleClose,
      handleFocusInput = _ref.handleFocusInput,
      placeholder = _ref.placeholder,
      noMatchText = _ref.noMatchText;
  return React__default.createElement(FilterableMenu, {
    options: options,
    onChange: onChange,
    selected: selected,
    empty: empty,
    handleClose: handleClose,
    handleFocusInput: handleFocusInput,
    placeholder: placeholder,
    noMatchText: noMatchText,
    Menu: Menu
  });
};

FilterableMenu$1.propTypes = {
  noMatchText: propTypes.string.isRequired,
  empty: propTypes.node,
  handleClose: propTypes.func,
  handleFocusInput: propTypes.func,
  options: propTypes.node,
  placeholder: propTypes.string,
  selected: singleSelectedPropType,
  onChange: propTypes.func
};

var Loading$1 = function Loading(_ref) {
  var message = _ref.message,
      className = _ref.className;
  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1434277130", [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]]]) + " " + (className || "")
  }, React__default.createElement(CircularLoader, {
    small: true
  }), message, React__default.createElement(_JSXStyle, {
    id: "1434277130",
    dynamic: [colors.grey700, theme.fonts, spacers.dp8, spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;color:".concat(colors.grey700, ";font-family:").concat(theme.fonts, ";font-size:13px;padding:").concat(spacers.dp8, " ").concat(spacers.dp24, ";}")]));
};

Loading$1.propTypes = {
  className: propTypes.string,
  message: propTypes.string
};

/**
 * @module
 *
 * @param {SingleSelect.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelect } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 */

var SingleSelect = function SingleSelect(_ref) {
  var className = _ref.className,
      selected = _ref.selected,
      tabIndex = _ref.tabIndex,
      maxHeight = _ref.maxHeight,
      inputMaxHeight = _ref.inputMaxHeight,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      loading = _ref.loading,
      error = _ref.error,
      warning = _ref.warning,
      valid = _ref.valid,
      disabled = _ref.disabled,
      children = _ref.children,
      clearable = _ref.clearable,
      clearText = _ref.clearText,
      filterable = _ref.filterable,
      filterPlaceholder = _ref.filterPlaceholder,
      placeholder = _ref.placeholder,
      prefix = _ref.prefix,
      empty = _ref.empty,
      loadingText = _ref.loadingText,
      noMatchText = _ref.noMatchText,
      initialFocus = _ref.initialFocus,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  // If the select is filterable, use a filterable menu
  var menu = filterable ? React__default.createElement(FilterableMenu$1, {
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : React__default.createElement(Menu, {
    empty: empty
  });
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4294070700", [spacers.dp4]]]) + " " + "root"
  }, React__default.createElement("div", {
    className: _JSXStyle.dynamic([["4294070700", [spacers.dp4]]]) + " " + "root-input"
  }, React__default.createElement(Select, {
    className: className,
    selected: selected,
    input: React__default.createElement(Input$1, {
      clearable: clearable,
      clearText: clearText,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && React__default.createElement(Loading$1, {
    message: loadingText
  }))), React__default.createElement(StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), React__default.createElement(_JSXStyle, {
    id: "4294070700",
    dynamic: [spacers.dp4]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".root-input.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp4, ";-webkit-flex:1;-ms-flex:1;flex:1;}")]));
};

SingleSelect.defaultProps = {
  selected: {},
  dataTest: 'dhis2-uicore-singleselect'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {Object} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

SingleSelect.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.node,
  error: statusPropType,
  filterPlaceholder: propTypes.string,
  filterable: propTypes.bool,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.string,
  maxHeight: propTypes.string,
  noMatchText: propTypes.requiredIf(function (props) {
    return props.filterable;
  }, propTypes.string),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  selected: singleSelectedPropType,
  tabIndex: propTypes.string,
  valid: statusPropType,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 *
 * @param {SingleSelectField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelectField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/singleselectfield--default|Storybook}
 */

var SingleSelectField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SingleSelectField, _React$Component);

  function SingleSelectField() {
    _classCallCheck(this, SingleSelectField);

    return _possibleConstructorReturn(this, _getPrototypeOf(SingleSelectField).apply(this, arguments));
  }

  _createClass(SingleSelectField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          onChange = _this$props.onChange,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          required = _this$props.required,
          label = _this$props.label,
          valid = _this$props.valid,
          error = _this$props.error,
          warning = _this$props.warning,
          disabled = _this$props.disabled,
          loading = _this$props.loading,
          selected = _this$props.selected,
          tabIndex = _this$props.tabIndex,
          helpText = _this$props.helpText,
          validationText = _this$props.validationText,
          maxHeight = _this$props.maxHeight,
          inputMaxHeight = _this$props.inputMaxHeight,
          inputWidth = _this$props.inputWidth,
          children = _this$props.children,
          clearable = _this$props.clearable,
          clearText = _this$props.clearText,
          filterable = _this$props.filterable,
          filterPlaceholder = _this$props.filterPlaceholder,
          placeholder = _this$props.placeholder,
          prefix = _this$props.prefix,
          empty = _this$props.empty,
          loadingText = _this$props.loadingText,
          noMatchText = _this$props.noMatchText,
          initialFocus = _this$props.initialFocus,
          dense = _this$props.dense,
          dataTest = _this$props.dataTest;
      return React__default.createElement(Field, {
        className: className,
        dataTest: dataTest
      }, label && React__default.createElement(Label, {
        required: required,
        disabled: disabled
      }, label), React__default.createElement(Constrictor, {
        width: inputWidth,
        minWidth: "100px"
      }, React__default.createElement(SingleSelect, {
        selected: selected,
        tabIndex: tabIndex,
        maxHeight: maxHeight,
        inputMaxHeight: inputMaxHeight,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur,
        loading: loading,
        error: error,
        warning: warning,
        valid: valid,
        disabled: disabled,
        clearable: clearable,
        clearText: clearText,
        filterable: filterable,
        filterPlaceholder: filterPlaceholder,
        placeholder: placeholder,
        prefix: prefix,
        empty: empty,
        loadingText: loadingText,
        noMatchText: noMatchText,
        initialFocus: initialFocus,
        dense: dense
      }, children)), helpText && React__default.createElement(Help, {
        dataTest: "".concat(dataTest, "-help")
      }, helpText), validationText && React__default.createElement(Help, {
        error: error,
        warning: warning,
        valid: valid,
        dataTest: "".concat(dataTest, "-validation")
      }, validationText));
    }
  }]);

  return SingleSelectField;
}(React__default.Component);

SingleSelectField.defaultProps = {
  selected: {},
  dataTest: 'dhis2-uicore-singleselectfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {string} label
 * @prop {Object} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [inputWidth]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

SingleSelectField.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.node,
  error: statusPropType,
  filterPlaceholder: propTypes.string,
  filterable: propTypes.bool,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.string,
  maxHeight: propTypes.string,
  noMatchText: propTypes.requiredIf(function (props) {
    return props.filterable;
  }, propTypes.string),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  required: propTypes.bool,
  selected: singleSelectedPropType,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 *
 * @param {SingleSelectOption.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SingleSelectOption } from '@dhis2/ui-core'
 *
 */

var SingleSelectOption = function SingleSelectOption(_ref) {
  var label = _ref.label,
      active = _ref.active,
      disabled = _ref.disabled,
      _onClick = _ref.onClick,
      className = _ref.className,
      dataTest = _ref.dataTest,
      value = _ref.value;
  return React__default.createElement("div", {
    onClick: function onClick(e) {
      return _onClick({}, e);
    },
    "data-test": dataTest,
    "data-value": value,
    "data-label": label,
    className: _JSXStyle.dynamic([["2046100779", [colors.grey900, spacers.dp8, spacers.dp12, colors.grey200, colors.teal700, colors.white, colors.grey500]]]) + " " + (cx(className, {
      disabled: disabled,
      active: active
    }) || "")
  }, label, React__default.createElement(_JSXStyle, {
    id: "2046100779",
    dynamic: [colors.grey900, spacers.dp8, spacers.dp12, colors.grey200, colors.teal700, colors.white, colors.grey500]
  }, ["div.__jsx-style-dynamic-selector{cursor:pointer;font-size:14px;-webkit-text-decoration:none;text-decoration:none;color:".concat(colors.grey900, ";padding:").concat(spacers.dp8, " ").concat(spacers.dp12, ";}"), "div.__jsx-style-dynamic-selector:hover{background-color:".concat(colors.grey200, ";}"), "div.__jsx-style-dynamic-selector:active,div.active.__jsx-style-dynamic-selector{background-color:".concat(colors.teal700, ";color:").concat(colors.white, ";cursor:auto;}"), "div.disabled.__jsx-style-dynamic-selector{color:".concat(colors.grey500, ";cursor:not-allowed;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}"), "div.disabled.__jsx-style-dynamic-selector:hover{background-color:initial;}"]));
};

SingleSelectOption.defaultProps = {
  dataTest: 'dhis2-uicore-singleselectoption'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} value
 * @prop {string} label
 * @prop {string} [className]
 * @prop {function} [onClick]
 * @prop {boolean} [active]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

SingleSelectOption.propTypes = {
  label: propTypes.string.isRequired,
  value: propTypes.string.isRequired,
  active: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  onClick: propTypes.func
};

var createRemoveHandler = function createRemoveHandler(_ref) {
  var selected = _ref.selected,
      onChange = _ref.onChange,
      value = _ref.value,
      label = _ref.label;
  return function (_, e) {
    var clickedOption = {
      value: value,
      label: label
    };
    var filtered = removeOption(clickedOption, selected);
    var data = {
      selected: filtered
    };
    onChange(data, e);
  };
};

var SelectionList = function SelectionList(_ref2) {
  var selected = _ref2.selected,
      onChange = _ref2.onChange,
      disabled = _ref2.disabled,
      options = _ref2.options;
  return React__default.createElement(React__default.Fragment, null, selected.map(function (_ref3) {
    var value = _ref3.value,
        label = _ref3.label;
    var selectedOption = findOptionChild({
      value: value,
      label: label
    }, options);

    if (!selectedOption) {
      var message = 'The selected option could not be found as a child of the select. ' + 'Make sure that the value and label for all options passed to the ' + '`selected` prop matches an existing option.';
      throw new Error(message);
    } // The chip should be disabled if the option or the select are disabled


    var isDisabled = selectedOption.props.disabled || disabled; // Create an onRemove handler, but only if it's not disabled

    var onRemove = isDisabled ? undefined : createRemoveHandler({
      selected: selected,
      onChange: onChange,
      value: value,
      label: label
    });
    return React__default.createElement(Chip, {
      key: label,
      onRemove: onRemove,
      disabled: isDisabled,
      overflow: true
    }, label);
  }));
};

SelectionList.propTypes = {
  disabled: propTypes.bool,
  options: propTypes.node,
  selected: multiSelectedPropType,
  onChange: propTypes.func
};

var Input$2 = function Input(_ref) {
  var selected = _ref.selected,
      onChange = _ref.onChange,
      clearable = _ref.clearable,
      clearText = _ref.clearText,
      placeholder = _ref.placeholder,
      prefix = _ref.prefix,
      options = _ref.options,
      className = _ref.className,
      disabled = _ref.disabled,
      inputMaxHeight = _ref.inputMaxHeight;
  var hasSelection = selected.length > 0;

  var onClear = function onClear(_, e) {
    var data = {
      selected: []
    };
    e.stopPropagation();
    onChange(data, e);
  };

  return React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + (cx('root', className) || "")
  }, React__default.createElement(InputPrefix, {
    prefix: prefix
  }), !hasSelection && !prefix && React__default.createElement(InputPlaceholder, {
    placeholder: placeholder
  }), hasSelection && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-input"
  }, React__default.createElement(SelectionList, {
    selected: selected,
    onChange: onChange,
    options: options,
    disabled: disabled
  })), hasSelection && clearable && !disabled && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["1360178250", [colors.grey900]], ["1331770409", [inputMaxHeight]]]) + " " + "root-right"
  }, React__default.createElement(InputClearButton, {
    onClear: onClear,
    clearText: clearText
  })), React__default.createElement(_JSXStyle, {
    id: "1360178250",
    dynamic: [colors.grey900]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:".concat(colors.grey900, ";font-size:14px;line-height:16px;}"), ".root-input.__jsx-style-dynamic-selector{overflow-y:auto;-webkit-flex:1;-ms-flex:1;flex:1;}", ".root-right.__jsx-style-dynamic-selector{margin-left:auto;margin-right:10px;}"]), React__default.createElement(_JSXStyle, {
    id: "1331770409",
    dynamic: [inputMaxHeight]
  }, [".root-input.__jsx-style-dynamic-selector{max-height:".concat(inputMaxHeight, ";}")]));
};

Input$2.defaultProps = {
  inputMaxHeight: '100px'
};
Input$2.propTypes = {
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  disabled: propTypes.bool,
  inputMaxHeight: propTypes.string,
  options: propTypes.node,
  placeholder: propTypes.string,
  prefix: propTypes.string,
  selected: multiSelectedPropType,
  onChange: propTypes.func
};

var onDisabledClick = function onDisabledClick(_, e) {
  e.stopPropagation();
  e.preventDefault();
};

var createHandler = function createHandler(_ref) {
  var isActive = _ref.isActive,
      onChange = _ref.onChange,
      selected = _ref.selected,
      value = _ref.value,
      label = _ref.label;
  return function (_, e) {
    var clickedOption = {
      value: value,
      label: label
    };
    e.stopPropagation();
    e.preventDefault(); // If the option is currently selected remove it from the array of selected options

    if (isActive) {
      var filtered = removeOption(clickedOption, selected);
      var _data = {
        selected: filtered
      };
      return onChange(_data, e);
    } // Otherwise, add it to selected


    var data = {
      selected: selected.concat([clickedOption])
    };
    return onChange(data, e);
  };
};

var Menu$1 = function Menu(_ref2) {
  var options = _ref2.options,
      onChange = _ref2.onChange,
      selected = _ref2.selected,
      empty = _ref2.empty;
  var renderedOptions = filterIgnored(options);

  if (React__default.Children.count(renderedOptions) === 0) {
    // If it's a string, supply it to our <Empty> component so it looks better
    if (typeof empty === 'string') {
      return React__default.createElement(Empty, {
        message: empty
      });
    } // Otherwise just render the supplied markup


    return empty;
  }

  var children = React__default.Children.map(options, function (child) {
    var isValidOption = checkIfValidOption(child); // Return early if the child isn't an option, to prevent attaching handlers etc.

    if (!isValidOption) {
      return child;
    }

    var _child$props = child.props,
        value = _child$props.value,
        label = _child$props.label,
        isDisabled = _child$props.disabled; // Active means the option is currently selected

    var isActive = !!findOption({
      value: value,
      label: label
    }, selected); // Create the appropriate click handler for the option

    var onClick = isDisabled ? onDisabledClick : createHandler({
      isActive: isActive,
      onChange: onChange,
      selected: selected,
      value: value,
      label: label
    });
    return React__default.cloneElement(child, _objectSpread2({}, child.props, {
      onClick: onClick,
      active: isActive
    }));
  });
  return React__default.createElement(React__default.Fragment, null, children);
};

Menu$1.defaultProps = {
  empty: ''
};
Menu$1.propTypes = {
  empty: propTypes.node,
  options: propTypes.node,
  selected: multiSelectedPropType,
  onChange: propTypes.func
};

var FilterableMenu$2 = function FilterableMenu$1(_ref) {
  var options = _ref.options,
      onChange = _ref.onChange,
      selected = _ref.selected,
      empty = _ref.empty,
      handleClose = _ref.handleClose,
      handleFocusInput = _ref.handleFocusInput,
      placeholder = _ref.placeholder,
      noMatchText = _ref.noMatchText;
  return React__default.createElement(FilterableMenu, {
    options: options,
    onChange: onChange,
    selected: selected,
    empty: empty,
    handleClose: handleClose,
    handleFocusInput: handleFocusInput,
    placeholder: placeholder,
    noMatchText: noMatchText,
    Menu: Menu$1
  });
};

FilterableMenu$2.propTypes = {
  noMatchText: propTypes.string.isRequired,
  empty: propTypes.node,
  handleClose: propTypes.func,
  handleFocusInput: propTypes.func,
  options: propTypes.node,
  placeholder: propTypes.string,
  selected: multiSelectedPropType,
  onChange: propTypes.func
};

/**
 * @module
 *
 * @param {MultiSelect.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelect } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 */

var MultiSelect = function MultiSelect(_ref) {
  var className = _ref.className,
      selected = _ref.selected,
      tabIndex = _ref.tabIndex,
      maxHeight = _ref.maxHeight,
      inputMaxHeight = _ref.inputMaxHeight,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      loading = _ref.loading,
      error = _ref.error,
      warning = _ref.warning,
      valid = _ref.valid,
      disabled = _ref.disabled,
      children = _ref.children,
      clearable = _ref.clearable,
      clearText = _ref.clearText,
      filterable = _ref.filterable,
      filterPlaceholder = _ref.filterPlaceholder,
      placeholder = _ref.placeholder,
      prefix = _ref.prefix,
      empty = _ref.empty,
      loadingText = _ref.loadingText,
      noMatchText = _ref.noMatchText,
      initialFocus = _ref.initialFocus,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  // If the select is filterable, use a filterable menu
  var menu = filterable ? React__default.createElement(FilterableMenu$2, {
    empty: empty,
    noMatchText: noMatchText,
    placeholder: filterPlaceholder
  }) : React__default.createElement(Menu$1, {
    empty: empty
  });
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4294070700", [spacers.dp4]]]) + " " + "root"
  }, React__default.createElement("div", {
    className: _JSXStyle.dynamic([["4294070700", [spacers.dp4]]]) + " " + "root-input"
  }, React__default.createElement(Select, {
    className: className,
    selected: selected,
    input: React__default.createElement(Input$2, {
      clearable: clearable,
      clearText: clearText,
      placeholder: placeholder,
      prefix: prefix,
      inputMaxHeight: inputMaxHeight
    }),
    menu: menu,
    tabIndex: tabIndex,
    maxHeight: maxHeight,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    error: error,
    warning: warning,
    valid: valid,
    disabled: disabled,
    initialFocus: initialFocus,
    dense: dense
  }, children, loading && React__default.createElement(Loading$1, {
    message: loadingText
  }))), React__default.createElement(StatusIcon, {
    error: error,
    valid: valid,
    warning: warning
  }), React__default.createElement(_JSXStyle, {
    id: "4294070700",
    dynamic: [spacers.dp4]
  }, [".root.__jsx-style-dynamic-selector{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".root-input.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp4, ";-webkit-flex:1;-ms-flex:1;flex:1;}")]));
};

MultiSelect.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uicore-multiselect'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {Array} [selected]
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

MultiSelect.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.node,
  error: statusPropType,
  filterPlaceholder: propTypes.string,
  filterable: propTypes.bool,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.string,
  maxHeight: propTypes.string,
  noMatchText: propTypes.requiredIf(function (props) {
    return props.filterable;
  }, propTypes.string),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  selected: multiSelectedPropType,
  tabIndex: propTypes.string,
  valid: statusPropType,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

/**
 * @module
 *
 * @param {MultiSelectField.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelectField } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/select.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/multiselectfield--default|Storybook}
 */

var MultiSelectField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MultiSelectField, _React$Component);

  function MultiSelectField() {
    _classCallCheck(this, MultiSelectField);

    return _possibleConstructorReturn(this, _getPrototypeOf(MultiSelectField).apply(this, arguments));
  }

  _createClass(MultiSelectField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          onChange = _this$props.onChange,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          required = _this$props.required,
          label = _this$props.label,
          valid = _this$props.valid,
          error = _this$props.error,
          disabled = _this$props.disabled,
          warning = _this$props.warning,
          loading = _this$props.loading,
          selected = _this$props.selected,
          tabIndex = _this$props.tabIndex,
          helpText = _this$props.helpText,
          validationText = _this$props.validationText,
          maxHeight = _this$props.maxHeight,
          inputMaxHeight = _this$props.inputMaxHeight,
          inputWidth = _this$props.inputWidth,
          children = _this$props.children,
          clearable = _this$props.clearable,
          clearText = _this$props.clearText,
          filterable = _this$props.filterable,
          filterPlaceholder = _this$props.filterPlaceholder,
          placeholder = _this$props.placeholder,
          prefix = _this$props.prefix,
          empty = _this$props.empty,
          loadingText = _this$props.loadingText,
          noMatchText = _this$props.noMatchText,
          initialFocus = _this$props.initialFocus,
          dense = _this$props.dense,
          dataTest = _this$props.dataTest;
      return React__default.createElement(Field, {
        className: className,
        dataTest: dataTest
      }, label && React__default.createElement(Label, {
        required: required,
        disabled: disabled
      }, label), React__default.createElement(Constrictor, {
        width: inputWidth,
        minWidth: "100px"
      }, React__default.createElement(MultiSelect, {
        selected: selected,
        tabIndex: tabIndex,
        maxHeight: maxHeight,
        inputMaxHeight: inputMaxHeight,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur,
        loading: loading,
        error: error,
        warning: warning,
        valid: valid,
        disabled: disabled,
        clearable: clearable,
        clearText: clearText,
        filterable: filterable,
        filterPlaceholder: filterPlaceholder,
        placeholder: placeholder,
        prefix: prefix,
        empty: empty,
        loadingText: loadingText,
        noMatchText: noMatchText,
        initialFocus: initialFocus,
        dense: dense
      }, children)), helpText && React__default.createElement(Help, {
        dataTest: "".concat(dataTest, "-help")
      }, helpText), validationText && React__default.createElement(Help, {
        error: error,
        warning: warning,
        valid: valid,
        dataTest: "".concat(dataTest, "-validation")
      }, validationText));
    }
  }]);

  return MultiSelectField;
}(React__default.Component);

MultiSelectField.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uicore-multiselectfield'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {function} [onChange]
 * @prop {string} label
 * @prop {Array} selected
 * @prop {string} [className]
 * @prop {string} [tabIndex]
 * @prop {Node} [children]
 * @prop {boolean} [required]
 * @prop {boolean} [disabled]
 * @prop {boolean} [dense]
 * @prop {boolean} [valid] - `valid`, `warning`, `error`, `loading`, are mutually exclusive
 * @prop {boolean} [warning]
 * @prop {boolean} [error]
 * @prop {boolean} [loading]
 * @prop {function} [onFocus]
 * @prop {function} [onBlur]
 * @prop {boolean} [initialFocus]
 * @prop {string} [validationText]
 * @prop {string} [helpText]
 * @prop {string} [clearText] - Only required if clearable is true
 * @prop {boolean} [clearable]
 * @prop {Node} [empty]
 * @prop {string} [filterPlaceholder]
 * @prop {boolean} [filterable]
 * @prop {string} [loadingText]
 * @prop {string} [maxHeight]
 * @prop {string} [inputMaxHeight]
 * @prop {string} [inputWidth]
 * @prop {string} [noMatchText] - Only required if filterable is true
 * @prop {string} [placeholder]
 * @prop {string} [prefix]
 * @prop {string} [dataTest]
 */

MultiSelectField.propTypes = {
  selected: multiSelectedPropType.isRequired,
  children: propTypes.node,
  className: propTypes.string,
  clearText: propTypes.requiredIf(function (props) {
    return props.clearable;
  }, propTypes.string),
  clearable: propTypes.bool,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  disabled: propTypes.bool,
  empty: propTypes.node,
  error: statusPropType,
  filterPlaceholder: propTypes.string,
  filterable: propTypes.bool,
  helpText: propTypes.string,
  initialFocus: propTypes.bool,
  inputMaxHeight: propTypes.string,
  inputWidth: propTypes.string,
  label: propTypes.string,
  loading: propTypes.bool,
  loadingText: propTypes.string,
  maxHeight: propTypes.string,
  noMatchText: propTypes.requiredIf(function (props) {
    return props.filterable;
  }, propTypes.string),
  placeholder: propTypes.string,
  prefix: propTypes.string,
  required: propTypes.bool,
  tabIndex: propTypes.string,
  valid: statusPropType,
  validationText: propTypes.string,
  warning: statusPropType,
  onBlur: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func
};

var _styles$className = {
  styles: React__default.createElement(_JSXStyle, {
    id: "2013783366"
  }, [".jsx-2013783366{padding:".concat(spacers.dp8, " ").concat(spacers.dp12, ";}")]),
  className: "jsx-2013783366"
},
    styles$5 = _styles$className.styles,
    checkboxClassname = _styles$className.className;
/**
 * @module
 *
 * @param {MultiSelectOption.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { MultiSelectOption } from '@dhis2/ui-core'
 *
 */

var MultiSelectOption = function MultiSelectOption(_ref) {
  var label = _ref.label,
      active = _ref.active,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      className = _ref.className,
      dataTest = _ref.dataTest,
      value = _ref.value;
  return React__default.createElement("div", {
    "data-test": dataTest,
    "data-value": value,
    "data-label": label,
    className: _JSXStyle.dynamic([["3813980210", [colors.grey200]]]) + " " + (cx(className, {
      disabled: disabled
    }) || "")
  }, React__default.createElement(Checkbox, {
    name: label,
    className: checkboxClassname,
    checked: active,
    label: label,
    onChange: onClick,
    disabled: disabled,
    dense: true
  }), styles$5, React__default.createElement(_JSXStyle, {
    id: "3813980210",
    dynamic: [colors.grey200]
  }, ["div.__jsx-style-dynamic-selector:hover{background-color:".concat(colors.grey200, ";}"), "div.disabled.__jsx-style-dynamic-selector:hover{background-color:initial;}"]));
};

MultiSelectOption.defaultProps = {
  dataTest: 'dhis2-uicore-multiselectoption'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} value
 * @prop {string} label
 * @prop {function} [onChange]
 * @prop {string} [className]
 * @prop {function} [onClick]
 * @prop {boolean} [active]
 * @prop {boolean} [disabled]
 * @prop {string} [dataTest]
 */

MultiSelectOption.propTypes = {
  label: propTypes.string.isRequired,
  value: propTypes.string.isRequired,
  active: propTypes.bool,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  onClick: propTypes.func
};

/**
 * @module
 * @param {TableBody.PropTypes} props
 * @returns {React.Component}
 * @example import { TableBody } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

var TableBody = function TableBody(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tbody", {
    className: className,
    "data-test": dataTest
  }, children);
};
TableBody.defaultProps = {
  dataTest: 'dhis2-uicore-tablebody'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRow|Array.<TableRow>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableBody.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

var tableCellStyles = ["td.jsx-996330601{border-bottom:1px solid #e8edf2;font-size:14px;line-height:18px;padding:13px 12px;height:45px;}", ".dense.jsx-996330601{padding:9px 12px;height:36px;}"];
/**
 * @module
 * @param {TableCell.PropTypes} props
 * @returns {React.Component}
 * @example import { TableCell } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableCellStyles.__hash = "996330601";
var TableCell = function TableCell(_ref) {
  var className = _ref.className,
      children = _ref.children,
      colSpan = _ref.colSpan,
      rowSpan = _ref.rowSpan,
      dense = _ref.dense,
      dataTest = _ref.dataTest;
  return React__default.createElement("td", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: "jsx-".concat(tableCellStyles.__hash) + " " + (cx({
      dense: dense
    }, className) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: tableCellStyles.__hash
  }, tableCellStyles));
};
TableCell.defaultProps = {
  dataTest: 'dhis2-uicore-tablecell'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [colSpan]
 * @prop {string} [rowSpan]
 * @prop {bool} [dense]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableCell.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  colSpan: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  rowSpan: propTypes.string
};

var tableCellHeadStyles = ["th.jsx-1796049005{border-bottom:1px solid #e8edf2;font-size:14px;line-height:18px;padding:13px 12px;height:45px;}", ".dense.jsx-1796049005{padding:9px 12px;height:36px;}"];
/**
 * @module
 * @param {TableCellHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableCellHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableCellHeadStyles.__hash = "1796049005";
var TableCellHead = function TableCellHead(_ref) {
  var colSpan = _ref.colSpan,
      rowSpan = _ref.rowSpan,
      dense = _ref.dense,
      children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("th", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: "jsx-".concat(tableCellHeadStyles.__hash) + " " + (cx({
      dense: dense
    }, className) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: tableCellHeadStyles.__hash
  }, tableCellHeadStyles));
};
TableCellHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablecellhead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [colSpan]
 * @prop {string} [rowSpan]
 * @prop {bool} [dense]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableCellHead.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  colSpan: propTypes.string,
  dataTest: propTypes.string,
  dense: propTypes.bool,
  rowSpan: propTypes.string
};

var tableStyles = ["table.jsx-2430604489{border:1px solid #e8edf2;background-color:#ffffff;min-width:100%;text-align:left;border-collapse:collapse;vertical-align:top;}"];
/**
 * @module
 * @param {Table.PropTypes} props
 * @returns {React.Component}
 * @example import { Table } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableStyles.__hash = "2430604489";
var Table = function Table(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("table", {
    "data-test": dataTest,
    className: "jsx-".concat(tableStyles.__hash) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: tableStyles.__hash
  }, tableStyles));
};
Table.defaultProps = {
  dataTest: 'dhis2-uicore-table'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableHead|TableBody|TableFoot|Array.<TableHead|TableBody|TableFoot>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

Table.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {TableFoot.PropTypes} props
 * @returns {React.Component}
 * @example import { TableFoot } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

var TableFoot = function TableFoot(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tfoot", {
    className: className,
    "data-test": dataTest
  }, children);
};
TableFoot.defaultProps = {
  dataTest: 'dhis2-uicore-tablefoot'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRow|Array.<TableRow>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableFoot.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {TableHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

var TableHead = function TableHead(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("thead", {
    className: className,
    "data-test": dataTest
  }, children);
};
TableHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablehead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableRowHead|Array.<TableRowHead>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableHead.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

var tableRowStyles = ["tr.jsx-2163445633:nth-child(even){background:#fbfcfd;}"];
/**
 * @module
 * @param {TableRow.PropTypes} props
 * @returns {React.Component}
 * @example import { TableRow } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

tableRowStyles.__hash = "2163445633";
var TableRow = function TableRow(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tr", {
    "data-test": dataTest,
    className: "jsx-".concat(tableRowStyles.__hash) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: tableRowStyles.__hash
  }, tableRowStyles));
};
TableRow.defaultProps = {
  dataTest: 'dhis2-uicore-tablerow'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableCell|TableCellHead|Array.<TableCell|TableCellHead>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableRow.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {TableRowHead.PropTypes} props
 * @returns {React.Component}
 * @example import { TableRowHead } from '@dhis2/ui-core'
 * @see Live demo: {@link /demo/?path=/story/table--static-layout|Storybook}
 */

var TableRowHead = function TableRowHead(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement(TableRow, {
    className: className,
    dataTest: dataTest
  }, children);
};
TableRowHead.defaultProps = {
  dataTest: 'dhis2-uicore-tablerowhead'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {TableCellHead|Array.<TableCellHead>} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

TableRowHead.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {StackedTableBody.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableBody } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableBody = function StackedTableBody(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tbody", {
    "data-tset": dataTest,
    className: "jsx-4146628131" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "4146628131"
  }, ["tbody.jsx-4146628131{display:block;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * Should only be StackedTableCell or StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableBody.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};
StackedTableBody.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablebody'
};

var ContentWithTitle = function ContentWithTitle(_ref) {
  var title = _ref.title,
      children = _ref.children;
  return React__default.createElement(React.Fragment, null, title && React__default.createElement("span", {
    className: _JSXStyle.dynamic([["215664166", [colors.grey700]]]) + " " + "title"
  }, title), React__default.createElement("span", {
    className: _JSXStyle.dynamic([["215664166", [colors.grey700]]]) + " " + "content"
  }, children), React__default.createElement(_JSXStyle, {
    id: "215664166",
    dynamic: [colors.grey700]
  }, [".title.__jsx-style-dynamic-selector{display:block;white-space:normal;min-height:24px;font-size:13px;line-height:16px;padding:8px 0 4px;font-weight:normal;color:".concat(colors.grey700, ";}"), ".content.__jsx-style-dynamic-selector{display:block;padding:0 0 8px 0;font-size:14px;line-height:18px;}", ".content.__jsx-style-dynamic-selector:first-child{padding-top:8px;padding-bottom:8px;}"]));
};
ContentWithTitle.propTypes = {
  children: propTypes.node.isRequired,
  title: propTypes.string
};

/**
 * @module
 * @param {StackedTableCell.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableCell } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableCell = function StackedTableCell(_ref) {
  var children = _ref.children,
      className = _ref.className,
      colSpan = _ref.colSpan,
      column = _ref.column,
      dataTest = _ref.dataTest,
      headerLabels = _ref.headerLabels,
      hideTitle = _ref.hideTitle,
      rowSpan = _ref.rowSpan,
      title = _ref.title;
  var cellTitle = title || headerLabels[column] || '';
  var realTitle = hideTitle ? '' : cellTitle;
  return React__default.createElement("td", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1368473511", [colors.grey300]]]) + " " + (className || "")
  }, React__default.createElement(ContentWithTitle, {
    title: realTitle
  }, children), React__default.createElement(_JSXStyle, {
    id: "1368473511",
    dynamic: [colors.grey300]
  }, ["td.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(colors.grey300, ";padding:0 12px;font-size:14px;width:100%;display:block;}"), "td.__jsx-style-dynamic-selector:last-child{border-bottom:0;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [colSpan]
 * @prop {number} [column]
 * @prop {string} [dataTest]
 * @prop {boolean} [hideTitle]
 * @prop {boolean} [rowSpan]
 * @prop {string} [title]
 */

StackedTableCell.propTypes = {
  children: propTypes$1.node.isRequired,
  className: propTypes$1.string,
  colSpan: propTypes$1.string,
  column: propTypes$1.number,
  dataTest: propTypes$1.string,
  headerLabels: propTypes$1.arrayOf(propTypes$1.string),
  hideTitle: propTypes$1.bool,
  rowSpan: propTypes$1.string,
  title: propTypes$1.string
};
StackedTableCell.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablecell',
  headerLabels: []
};

/**
 * @module
 * @param {StackedTableCellHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableCellHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableCellHead = function StackedTableCellHead(_ref) {
  var children = _ref.children,
      className = _ref.className,
      colSpan = _ref.colSpan,
      dataTest = _ref.dataTest,
      rowSpan = _ref.rowSpan;
  return React__default.createElement("th", {
    colSpan: colSpan,
    rowSpan: rowSpan,
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["178822310", [colors.grey300]]]) + " " + (className || "")
  }, children && React__default.createElement("div", {
    className: _JSXStyle.dynamic([["178822310", [colors.grey300]]])
  }, children), React__default.createElement(_JSXStyle, {
    id: "178822310",
    dynamic: [colors.grey300]
  }, ["th.__jsx-style-dynamic-selector{border-bottom:1px solid ".concat(colors.grey300, ";padding:0 12px;}"), "div.__jsx-style-dynamic-selector{min-height:36px;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Can be left empty to hide titles for all columns
 * @prop {string} [className]
 * @prop {string} [colSpan]
 * @prop {string} [dataTest]
 * @prop {string} [rowSpan]
 */

StackedTableCellHead.propTypes = {
  children: propTypes.string,
  className: propTypes.string,
  colSpan: propTypes.string,
  dataTest: propTypes.string,
  rowSpan: propTypes.string
};
StackedTableCellHead.defaultProps = {
  children: '',
  dataTest: 'dhis2-uicore-stackedtablecellhead'
};

/**
 * @module
 * @param {StackedTableHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableHead = function StackedTableHead(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("thead", {
    "data-test": dataTest,
    className: "jsx-1150407268" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "1150407268"
  }, ["thead.jsx-1150407268{display:none;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Has to be instance of StackedTableRowHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableHead.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};
StackedTableHead.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablehead'
};

var isChildTableHead = function isChildTableHead(child) {
  return child.type === StackedTableHead;
};

var extractChildrenProp = function extractChildrenProp(component) {
  return component.props.children;
};

var extractRowsFromTableChildren = function extractRowsFromTableChildren(children) {
  return React__default.Children.toArray(children).filter(isChildTableHead) // extract table head children (rows)
  .map(extractChildrenProp) // when there are multiple header rows,
  // children will come as arrays
  .reduce(function (flattened, row) {
    return Array.isArray(row) ? [].concat(_toConsumableArray(flattened), _toConsumableArray(row)) : [].concat(_toConsumableArray(flattened), [row]);
  }, []) // extract table row children (cells),
  // will return an array with arrays of cells
  .map(extractChildrenProp);
};

var calculateColumnCount = function calculateColumnCount(row) {
  return Array.isArray(row) ? row.reduce(function (total, col) {
    return (// make sure to take col span into account
      col.props.colSpan ? total + parseInt(col.props.colSpan, 10) : total + 1
    );
  }, 0) : 1;
};

var mapCellsToLabels = function mapCellsToLabels(rowChildren) {
  var labels = []; // in case there's only one cell, the children are not an array

  var row = Array.isArray(rowChildren) ? rowChildren : [rowChildren]; // Using a for loop here to be able to increment "i"
  // when a cell has a colspan prop by the colspan number

  for (var i = 0, count = row.length; i < count; ++i) {
    var cell = row[i];
    var colSpan = cell.props.colSpan ? parseInt(cell.props.colSpan, 10) : 1;
    var label = extractLabelFromCell(cell); // Add a label entry for each column

    labels = [].concat(_toConsumableArray(labels), _toConsumableArray(Array(colSpan).fill(label)));
  }

  return labels;
};

var extractLabelFromCell = function extractLabelFromCell(cell) {
  return !cell.props.hideResponsiveLabel ? cell.props.children : '';
};

var combineRowLables = function combineRowLables(columnCount, rowCount, headerLabels) {
  return (// create array with length of column count
    Array(columnCount).fill('').reduce(function (labels, _, colIndex) {
      // an array with all labels for a column
      var colLabels = // create array with length of rows
      Array(rowCount).fill('') // get label for current row & col
      .map(function (__, rowIndex) {
        return headerLabels[rowIndex][colIndex];
      }) // remove empty ones
      .filter(function (val) {
        return val;
      });
      return [].concat(_toConsumableArray(labels), [colLabels.join(' / ')]);
    }, [])
  );
};

var extractHeaderLabels = function extractHeaderLabels(children) {
  if (React__default.Children.count(children) === 0) return [];
  var rows = extractRowsFromTableChildren(children);
  if (!rows.length) return [];
  var rowCount = rows.length;
  var columnCount = calculateColumnCount(rows[0]);
  var headerLabels = rows.map(mapCellsToLabels);
  return combineRowLables(columnCount, rowCount, headerLabels);
};

var TableContext = React.createContext({
  headerLabels: []
});
var Provider = TableContext.Provider,
    Consumer = TableContext.Consumer;

var Table$1 = function Table(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("table", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["4278890465", [colors.white, colors.grey900]]]) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "4278890465",
    dynamic: [colors.white, colors.grey900]
  }, ["table.__jsx-style-dynamic-selector{display:block;border:0;background-color:".concat(colors.white, ";min-width:100%;text-align:left;border-collapse:collapse;vertical-align:top;color:").concat(colors.grey900, ";}")]));
};
Table$1.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {StackedTable.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTable } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTable = function StackedTable(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest,
      headerLabels = _ref.headerLabels;
  var contextHeaderLabels = extractHeaderLabels(children);
  var context = {
    headerLabels: headerLabels || contextHeaderLabels
  };
  return React__default.createElement(Provider, {
    value: context
  }, React__default.createElement(Table$1, {
    className: className,
    dataTest: dataTest
  }, children));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 * @prop {string[]} [headerLabels]
 * If a specific column should not have a header,
 * an empty string must be provided
 */

StackedTable.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  headerLabels: propTypes.arrayOf(propTypes.string)
};
StackedTable.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtable'
};

/**
 * @module
 * @param {StackedTableFoot.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableFoot } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableFoot = function StackedTableFoot(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tfoot", {
    "data-test": dataTest,
    className: "jsx-3912324960" + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "3912324960"
  }, ["tfoot.jsx-3912324960{display:block;margin-top:32px;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [children]
 * Has to be instance of StackedTableRow
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableFoot.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};
StackedTableFoot.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablefoot'
};

var addColNumToChildren = function addColNumToChildren(children) {
  var curCol = 0;
  return React.Children.map(children, function (child) {
    var column = child.props.column || curCol;
    var colSpan = child.props.colSpan ? parseInt(child.props.colSpan, 10) : 1;
    curCol += colSpan;
    return React.cloneElement(child, {
      column: column
    });
  });
};

var supplyHeaderLabelsToChildren = function supplyHeaderLabelsToChildren(headerLabels, children) {
  return React.Children.map(children, function (child) {
    return React.cloneElement(child, {
      headerLabels: headerLabels
    });
  });
};

/**
 * @module
 * @param {StackedTableRow.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableRow } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableRow = function StackedTableRow(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("tr", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2003961452", [colors.grey300, colors.white]]]) + " " + (className || "")
  }, React__default.createElement(Consumer, null, function (_ref2) {
    var headerLabels = _ref2.headerLabels;
    return supplyHeaderLabelsToChildren(headerLabels, addColNumToChildren(children));
  }), React__default.createElement(_JSXStyle, {
    id: "2003961452",
    dynamic: [colors.grey300, colors.white]
  }, ["tr.__jsx-style-dynamic-selector{min-height:45px;display:block;border:1px solid ".concat(colors.grey300, ";}"), "tr.__jsx-style-dynamic-selector:nth-child(even){background:".concat(colors.white, ";}"), "thead>tr.__jsx-style-dynamic-selector,tbody>tr.__jsx-style-dynamic-selector{min-height:36px;}", "tr.__jsx-style-dynamic-selector+tr.__jsx-style-dynamic-selector{margin-top:32px;}"]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * Has to be instance of StackedTableCell or StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableRow.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};
StackedTableRow.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablerow'
};

/**
 * @module
 * @param {StackedTableRowHead.PropTypes}
 * @returns {React.Component}
 * @example import { StackedTableRowHead } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/stackedtable--default|Storybook}
 */

var StackedTableRowHead = function StackedTableRowHead(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement(StackedTableRow, {
    className: className,
    dataTest: dataTest
  }, children);
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} [children]
 * Has to be instance of StackedTableCellHead
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

StackedTableRowHead.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};
StackedTableRowHead.defaultProps = {
  dataTest: 'dhis2-uicore-stackedtablerowhead'
};

/**
 * @module
 * @param {ButtonStrip.PropTypes} props
 * @returns {React.Component}
 * @example import { ButtonStrip } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/buttonstrip--default|Storybook}
 */

var ButtonStrip = function ButtonStrip(_ref) {
  var className = _ref.className,
      children = _ref.children,
      middle = _ref.middle,
      end = _ref.end,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1012104873", [spacers.dp16]]]) + " " + (cx(className, {
      middle: middle,
      end: end
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "1012104873",
    dynamic: [spacers.dp16]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "div.middle.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}", "div.end.__jsx-style-dynamic-selector{-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}", "div.__jsx-style-dynamic-selector>button{margin-left:".concat(spacers.dp16, ";}")]));
};

var alignmentPropType = propTypes.mutuallyExclusive(['middle', 'end'], propTypes.bool);
ButtonStrip.defaultProps = {
  dataTest: 'dhis2-uicore-buttonstrip'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {string} [className]
 * @prop {Array.<Button>} [children]
 * @prop {boolean} [middle] - The props `middle`, and `end` are
 * mutually exlusive
 * @prop {boolean} [end]
 * @prop {string} [dataTest]
 */

ButtonStrip.propTypes = {
  children: propTypes.arrayOf(propTypes.element),
  className: propTypes.string,
  dataTest: propTypes.string,
  end: alignmentPropType,
  middle: alignmentPropType
};

/**
 * @module
 * @private
 * @param {DropMenu.PropTypes} props
 * @returns {React.Component}
 * @example import { DropMenu } from @dhis2/ui-core
 */

var DropMenu =
/*#__PURE__*/
function (_Component) {
  _inherits(DropMenu, _Component);

  function DropMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      top: 'auto',
      left: 'auto'
    });

    _defineProperty(_assertThisInitialized(_this), "requestId", null);

    _defineProperty(_assertThisInitialized(_this), "elContainer", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "updatePosition", function () {
      var anchorEl = _this.props.anchorEl;

      if (_this.requestId) {
        window.cancelAnimationFrame(_this.requestId);
      }

      _this.requestId = window.requestAnimationFrame(function () {
        var rect = anchorEl.getBoundingClientRect();
        var top = rect.bottom + window.scrollY;
        var left = rect.left + window.scrollX;
        var sizing = {
          top: "".concat(top, "px"),
          left: "".concat(left, "px")
        };

        _this.setState(sizing);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onDocClick", function (evt) {
      if (_this.elContainer.current && !_this.elContainer.current.contains(evt.target) && !_this.props.stayOpen) {
        _this.props.onClose({}, evt);
      }
    });

    return _this;
  }

  _createClass(DropMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('click', this.onDocClick);
      window.addEventListener('resize', this.updatePosition);
      this.updatePosition();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.onDocClick);
      window.removeEventListener('resize', this.updatePosition);

      if (this.requestId) {
        window.cancelAnimationFrame(this.requestId);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          component = _this$props.component,
          zIndex = _this$props.zIndex,
          dataTest = _this$props.dataTest;
      var _this$state = this.state,
          top = _this$state.top,
          left = _this$state.left;
      return ReactDOM__default.createPortal(React__default.createElement(Layer, {
        zIndex: zIndex
      }, function (zIndexComputed) {
        return React__default.createElement("div", {
          ref: _this2.elContainer,
          "data-test": dataTest,
          className: _JSXStyle.dynamic([["3649249426", [zIndexComputed, top, left]]]) + " " + (className || "")
        }, component, React__default.createElement(_JSXStyle, {
          id: "3649249426",
          dynamic: [zIndexComputed, top, left]
        }, ["div.__jsx-style-dynamic-selector{z-index:".concat(zIndexComputed, ";position:absolute;top:").concat(top, ";left:").concat(left, ";}")]));
      }), document.body);
    }
  }]);

  return DropMenu;
}(React.Component);

DropMenu.defaultProps = {
  zIndex: layers.appliationTop,
  dataTest: 'dhis2-uicore-dropmenu'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} [className]
 * @prop {Element} [component] - The element to show as the dropdown
 * @prop {function} [onClose] - Function to trigger when click happens outside of the DOM element
 * @prop {boolean} [stayOpen] - Decides if the menu should call the onClose function or not
 * @prop {Object} [anchorEl] - DOM node to position itself against,
 * needs to have the `getBoundingClientRect` function on its
 * `prototype`.
 * @prop {string} [dataTest]
 */

DropMenu.propTypes = {
  anchorEl: propTypes.shape({
    getBoundingClientRect: propTypes.func.isRequired
  }),
  className: propTypes.string,
  component: propTypes.element,
  dataTest: propTypes.string,
  stayOpen: propTypes.bool,
  zIndex: propTypes.number,
  onClose: propTypes.func
};

function ArrowDown$1(_ref) {
  var className = _ref.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    className: "jsx-2347926856"
  }), React__default.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}
ArrowDown$1.propTypes = {
  className: propTypes.string
};
function ArrowUp(_ref2) {
  var className = _ref2.className;
  return React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 12 12",
    className: "jsx-2347926856" + " " + (className || "")
  }, React__default.createElement("path", {
    d: "m5.29289 8.7071c.39053.3905 1.02369.3905 1.41422 0l2.99999-2.99999c.3905-.39053.3905-1.02369 0-1.41422-.3905-.39052-1.0237-.39052-1.4142 0l-2.2929 2.2929-2.29289-2.2929c-.39053-.39052-1.02369-.39052-1.41422 0-.39052.39053-.39052 1.02369 0 1.41422z",
    transform: "matrix(1 0 0 -1 0 12.999974)",
    className: "jsx-2347926856"
  }), React__default.createElement(_JSXStyle, {
    id: "2347926856"
  }, ["svg.jsx-2347926856{fill:inherit;height:12px;width:12px;vertical-align:middle;pointer-events:none;}"]));
}
ArrowUp.propTypes = {
  className: propTypes.string
};

var arrow = {
  styles: React__default.createElement(_JSXStyle, {
    id: "736002830"
  }, [".jsx-736002830{margin-left:".concat(spacers.dp12, ";}")]),
  className: "jsx-736002830"
};
/**
 * @module
 * @param {DropdownButton.PropTypes} props
 * @returns {React.Component}
 * @example import { DropdownButton } from @dhis2/ui-core
 * @see Live demo: {@link /demo/?path=/story/dropdownbutton-basic--default|Storybook}
 */

var DropdownButton =
/*#__PURE__*/
function (_Component) {
  _inherits(DropdownButton, _Component);

  function DropdownButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropdownButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      open: false
    });

    _defineProperty(_assertThisInitialized(_this), "anchorRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "onToggle", function (_ref, event) {
      var name = _ref.name,
          value = _ref.value;

      _this.setState({
        open: !_this.state.open
      }, function () {
        if (_this.props.onClick) {
          _this.props.onClick({
            name: name,
            value: value,
            open: _this.state.open
          }, event);
        }
      });
    });

    return _this;
  }

  _createClass(DropdownButton, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var open = this.state.open;
      var _this$props = this.props,
          component = _this$props.component,
          children = _this$props.children,
          className = _this$props.className,
          destructive = _this$props.destructive,
          disabled = _this$props.disabled,
          icon = _this$props.icon,
          large = _this$props.large,
          primary = _this$props.primary,
          secondary = _this$props.secondary,
          small = _this$props.small,
          name = _this$props.name,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          type = _this$props.type,
          initialFocus = _this$props.initialFocus,
          dataTest = _this$props.dataTest;
      var ArrowIconComponent = open ? ArrowUp : ArrowDown$1;
      return React__default.createElement("div", {
        ref: this.anchorRef,
        "data-test": dataTest,
        className: "jsx-3163060161"
      }, React__default.createElement(Button, {
        className: className,
        destructive: destructive,
        disabled: disabled,
        icon: icon,
        large: large,
        primary: primary,
        secondary: secondary,
        small: small,
        onClick: this.onToggle,
        name: name,
        value: value,
        tabIndex: tabIndex,
        type: type,
        initialFocus: initialFocus
      }, children, React__default.createElement(ArrowIconComponent, {
        className: "jsx-3163060161" + " " + (arrow.className )
      })), open && React__default.createElement(DropMenu, {
        className: "dropdown-button-dropmenu",
        component: component,
        onClose: function onClose() {
          return _this2.setState({
            open: false
          });
        },
        anchorEl: this.anchorRef.current
      }), arrow.styles, React__default.createElement(_JSXStyle, {
        id: "3163060161"
      }, ["div.jsx-3163060161{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}"]));
    }
  }]);

  return DropdownButton;
}(React.Component);

DropdownButton.defaultProps = {
  dataTest: 'dhis2-uicore-dropdownbutton'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} component
 *
 * @prop {Node} [children] The children to render in the button
 * @prop {function} [onClick] The click handler
 *
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type] Type of button: `submit`, `reset`, or
 * `button`
 *
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 *
 * @prop {boolean} [disabled] Disable the button
 * @prop {Element} [icon]
 *
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * @prop {string} [dataTest]
 */

DropdownButton.propTypes = {
  component: propTypes.element.isRequired,
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  destructive: buttonVariantPropType,
  disabled: propTypes.bool,
  icon: propTypes.element,
  initialFocus: propTypes.bool,
  large: sizePropType,
  name: propTypes.string,
  primary: buttonVariantPropType,
  secondary: buttonVariantPropType,
  small: sizePropType,
  tabIndex: propTypes.string,
  type: propTypes.oneOf(['submit', 'reset', 'button']),
  value: propTypes.string,
  onClick: propTypes.func
};

/**
 * @module
 * @param {Menu.PropTypes}
 * @returns {React.Component}
 *
 * @example import { Menu } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/menu.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/menu--default|Storybook}
 */

var Menu$2 = function Menu(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2220475694", [spacers.dp4]]]) + " " + (className || "")
  }, React__default.createElement(Card, null, React__default.createElement("div", {
    className: _JSXStyle.dynamic([["2220475694", [spacers.dp4]]]) + " " + "menu-list-wrapper"
  }, React__default.createElement(MenuList, null, children))), React__default.createElement(_JSXStyle, {
    id: "2220475694",
    dynamic: [spacers.dp4]
  }, [".menu-list-wrapper.__jsx-style-dynamic-selector{padding:".concat(spacers.dp4, " 0;}")]));
};

Menu$2.defaultProps = {
  dataTest: 'dhis2-uicore-menu'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {*} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

Menu$2.propTypes = {
  children: MenuList.propTypes.children,
  className: propTypes.string,
  dataTest: propTypes.string
};

var Arrow = function Arrow(_ref) {
  var open = _ref.open,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      dataTest = _ref.dataTest;

  var _onClick = open ? onClose : onOpen;

  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["486382662", [colors.grey400, colors.grey700]]]) + " " + (cx({
      open: open
    }) || "")
  }, React__default.createElement("span", {
    onClick: function onClick(event) {
      return _onClick && _onClick({
        open: !open
      }, event);
    },
    className: _JSXStyle.dynamic([["486382662", [colors.grey400, colors.grey700]]])
  }, React__default.createElement(ArrowDown$1, null)), React__default.createElement(_JSXStyle, {
    id: "486382662",
    dynamic: [colors.grey400, colors.grey700]
  }, ["div.__jsx-style-dynamic-selector{width:24px;position:relative;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", "div.__jsx-style-dynamic-selector:after{background:".concat(colors.grey400, ";height:calc(100% - 24px);left:12px;position:absolute;top:15px;width:1px;z-index:1;}"), ".open.__jsx-style-dynamic-selector:after{content:'';}", "span.__jsx-style-dynamic-selector{display:block;position:relative;z-index:2;fill:".concat(colors.grey700, ";}"), "div.__jsx-style-dynamic-selector svg{vertical-align:top;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);}", ".open.__jsx-style-dynamic-selector svg{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}"]));
};
Arrow.propTypes = {
  dataTest: propTypes.string.isRequired,
  open: propTypes.bool,
  onClose: propTypes.func,
  onOpen: propTypes.func
};

var Spacer$1 = function Spacer() {
  return React__default.createElement("div", {
    className: "jsx-2503342345"
  }, React__default.createElement(_JSXStyle, {
    id: "2503342345"
  }, ["div.jsx-2503342345{width:24px;}"]));
};

var Leaves = function Leaves(_ref) {
  var children = _ref.children,
      open = _ref.open,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: "jsx-3677374542" + " " + (cx({
      open: open
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "3677374542"
  }, ["div.jsx-3677374542{height:0;overflow:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".open.jsx-3677374542{height:auto;}"]));
};
Leaves.propTypes = {
  children: propTypes.node,
  dataTest: propTypes.string,
  open: propTypes.bool
};

/**
 * @module
 *
 * @param {Node.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Node } from '@dhis2/ui-core'
 *
 * @see Live demo: {@link /demo/?path=/story/node--multiple-roots|Storybook}
 */

var Node = function Node(_ref) {
  var open = _ref.open,
      className = _ref.className,
      label = _ref.component,
      children = _ref.children,
      icon = _ref.icon,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      dataTest = _ref.dataTest;
  var hasLeaves = !!React__default.Children.toArray(children).filter(function (i) {
    return i;
  }).length;
  var showArrow = !icon && hasLeaves;
  var showSpacer = !icon && !hasLeaves;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: "jsx-1433072554" + " " + (cx('node', className) || "")
  }, icon && React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-icon"),
    className: "jsx-1433072554"
  }, icon), showArrow && React__default.createElement(Arrow, {
    open: open,
    onOpen: onOpen,
    onClose: onClose,
    dataTest: "".concat(dataTest, "-arrow")
  }), showSpacer && React__default.createElement(Spacer$1, null), React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-content"),
    className: "jsx-1433072554"
  }, React__default.createElement("div", {
    "data-test": "".concat(dataTest, "-label"),
    className: "jsx-1433072554"
  }, label), React__default.createElement(Leaves, {
    open: open,
    dataTest: "".concat(dataTest, "-leaves")
  }, children)), React__default.createElement(_JSXStyle, {
    id: "1433072554"
  }, [".node.jsx-1433072554{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}"]));
};
Node.defaultProps = {
  dataTest: 'dhis2-uicore-node'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} component
 * @prop {className} [string]
 * @prop {Node} [children]
 * @prop {Node} [icon]
 * @prop {boolean} [open]
 * @prop {function} [onOpen]
 * @prop {funtion} [onClose]
 * @prop {string} [dataTest]
 */

Node.propTypes = {
  component: propTypes.element.isRequired,
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  icon: propTypes.node,
  open: propTypes.bool,
  onClose: propTypes.func,
  onOpen: propTypes.func
};

var cardBoxStyle = {
  styles: React__default.createElement(_JSXStyle, {
    id: "3900320195"
  }, [".modal-card.jsx-3900320195{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:auto;max-height:95vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;left:50%;max-width:calc(100vw - ".concat(2 * spacers.dp24, "px);max-height:calc(100vh - ").concat(2 * spacers.dp24, "px);position:absolute;top:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:600px;}"), ".small.jsx-3900320195{width:400px;}", ".large.jsx-3900320195{width:800px;}"]),
  className: "jsx-3900320195"
};
/**
 * @module
 * @private
 *
 * @param {ModalCard.PropTypes} props
 * @returns {React.Component}
 */

var ModalCard = function ModalCard(_ref) {
  var children = _ref.children,
      small = _ref.small,
      large = _ref.large;
  return React__default.createElement(Card, {
    className: cx(cardBoxStyle.className, 'modal-card', {
      small: small,
      large: large
    })
  }, children, cardBoxStyle.styles);
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} children - Can be Modal.Title; Must be Modal.Content and Modal.Actions
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 */

ModalCard.propTypes = {
  children: propTypes.node.isRequired,
  large: sizePropType,
  small: sizePropType
};

/**
 * @module
 * @param {Modal.PropTypes} props
 * @returns {React.Component}
 *
 * @desc Modal provides a UI to prompt the user to respond to a question
 * or a note to the user.
 *
 * Use Model with the following Components:
 * ModelTitle (optional)
 * ModelContent (required)
 * ModelActions (optional)
 * @module
 * @param {Modal.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Modal } from @dhis2/ui-core
 * @example
 *  <Modal>
 *      <ModalTitle>Hello</ModalTitle>
 *      <ModalContent>Some content here</ModalContent>
 *      <ModalActions>
 *          <Button primary>My action</Button>
 *      </ModalActions>
 *  </Modal>
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/modal.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/modal--small-title-content-action|Storybook}
 */

var Modal = function Modal(_ref) {
  var children = _ref.children,
      onClose = _ref.onClose,
      small = _ref.small,
      large = _ref.large,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return ReactDOM.createPortal(React__default.createElement(ScreenCover, {
    onClick: onClose,
    className: className
  }, React__default.createElement("aside", {
    "data-test": dataTest
  }, React__default.createElement(ModalCard, {
    small: small,
    large: large
  }, children))), document.body);
};
Modal.defaultProps = {
  dataTest: 'dhis2-uicore-modal'
};
/**
 * @typedef {Object} PropTypes
 * @static
 *
 * @prop {Node} children
 * @prop {string} className
 * @prop {Function} onClose
 * @prop {bool} small
 * @prop {bool} large
 * @prop {string} [dataTest]
 */

Modal.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string,
  large: sizePropType,
  small: sizePropType,
  // Callback used when clicking on the screen cover
  onClose: propTypes.func
};

/**
 * @module
 *
 * @param {ModalActions.PropTypes} props
 * @returns {React.Component}
 */

var ModalActions = function ModalActions(_ref) {
  var children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1459377348", [spacers.dp24, spacers.dp24, spacers.dp24]]])
  }, children, React__default.createElement(_JSXStyle, {
    id: "1459377348",
    dynamic: [spacers.dp24, spacers.dp24, spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{padding:0 ".concat(spacers.dp24, " ").concat(spacers.dp24, " ").concat(spacers.dp24, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}")]));
};
ModalActions.defaultProps = {
  dataTest: 'dhis2-uicore-modalactions'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Object} children - Accepts one or more `Element`s
 * @prop {string} [dataTest]
 */

ModalActions.propTypes = {
  children: propTypes.node.isRequired,
  dataTest: propTypes.string
};

/**
 * @module
 *
 * @param {ModalContent.PropTypes} props
 * @returns {React.Component}
 */

var ModalContent = function ModalContent(_ref) {
  var children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["936713121", [spacers.dp24, spacers.dp24]]]) + " " + (className || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "936713121",
    dynamic: [spacers.dp24, spacers.dp24]
  }, ["div.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;margin:".concat(spacers.dp24, " 0;padding:0 ").concat(spacers.dp24, ";overflow-y:auto;}")]));
};
ModalContent.defaultProps = {
  dataTest: 'dhis2-uicore-modalcontent'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

ModalContent.propTypes = {
  children: propTypes.node.isRequired,
  className: propTypes.string,
  dataTest: propTypes.string
};

/**
 * @module
 * @param {ModalTitle.PropTypes} props
 * @returns {React.Component}
 */

var ModalTitle = function ModalTitle(_ref) {
  var children = _ref.children,
      dataTest = _ref.dataTest;
  return React__default.createElement("h1", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1525509444", [spacers.dp24, spacers.dp24, spacers.dp24]]]) + " " + (cx('title') || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "1525509444",
    dynamic: [spacers.dp24, spacers.dp24, spacers.dp24]
  }, ["h1.__jsx-style-dynamic-selector{font-size:20px;font-weight:500;line-height:24px;margin:0;padding:".concat(spacers.dp24, " ").concat(spacers.dp24, " 0 ").concat(spacers.dp24, ";}")]));
};
ModalTitle.defaultProps = {
  dataTest: 'dhis2-uicore-modaltitle'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {string} children
 * @prop {string} [dataTest]
 */

ModalTitle.propTypes = {
  children: propTypes.string.isRequired,
  dataTest: propTypes.string
};

var rightButton = {
  styles: React__default.createElement(_JSXStyle, {
    id: "2502148942"
  }, ["button.jsx-2502148942{padding:0 ".concat(spacers.dp12, ";}")]),
  className: "jsx-2502148942"
};
/**
 * @module
 *
 * @param {SplitButton.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { SplitButton } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/atoms/button.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/splitbutton-basic--default|Storybook}
 */

var SplitButton =
/*#__PURE__*/
function (_Component) {
  _inherits(SplitButton, _Component);

  function SplitButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SplitButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SplitButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      open: false
    });

    _defineProperty(_assertThisInitialized(_this), "anchorRef", React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "onClick", function (payload, event) {
      if (_this.props.onClick) {
        _this.props.onClick({
          name: payload.name,
          value: payload.value,
          open: _this.state.open
        }, event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onToggle", function () {
      return _this.setState({
        open: !_this.state.open
      });
    });

    return _this;
  }

  _createClass(SplitButton, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var open = this.state.open;
      var _this$props = this.props,
          component = _this$props.component,
          children = _this$props.children,
          className = _this$props.className,
          name = _this$props.name,
          value = _this$props.value,
          icon = _this$props.icon,
          small = _this$props.small,
          large = _this$props.large,
          primary = _this$props.primary,
          secondary = _this$props.secondary,
          destructive = _this$props.destructive,
          disabled = _this$props.disabled,
          type = _this$props.type,
          tabIndex = _this$props.tabIndex,
          dataTest = _this$props.dataTest,
          initialFocus = _this$props.initialFocus;
      var arrow = open ? React__default.createElement(ArrowUp, null) : React__default.createElement(ArrowDown$1, null);
      return React__default.createElement("div", {
        ref: this.anchorRef,
        "data-test": dataTest,
        className: "jsx-4260486793"
      }, React__default.createElement(Button, {
        name: name,
        value: value,
        icon: icon,
        small: small,
        large: large,
        primary: primary,
        secondary: secondary,
        destructive: destructive,
        disabled: disabled,
        onClick: this.onClick,
        type: type,
        tabIndex: tabIndex,
        className: cx(className),
        initialFocus: initialFocus,
        dataTest: "".concat(dataTest, "-button")
      }, children), React__default.createElement(Button, {
        name: name,
        value: value,
        icon: icon,
        small: small,
        large: large,
        primary: primary,
        secondary: secondary,
        destructive: destructive,
        disabled: disabled,
        onClick: this.onToggle,
        type: type,
        tabIndex: tabIndex,
        className: cx(className, rightButton.className),
        dataTest: "".concat(dataTest, "-toggle")
      }, arrow), open && React__default.createElement(DropMenu, {
        dataTest: "".concat(dataTest, "-menu"),
        component: component,
        onClose: function onClose() {
          return _this2.setState({
            open: false
          });
        },
        anchorEl: this.anchorRef.current
      }), rightButton.styles, React__default.createElement(_JSXStyle, {
        id: "4260486793"
      }, ["div.jsx-4260486793{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;position:relative;color:inherit;white-space:nowrap;}", "div.jsx-4260486793>button:first-child{border-top-right-radius:0;border-bottom-right-radius:0;border-right:0;}", "div.jsx-4260486793>button:last-child{border-top-left-radius:0;border-bottom-left-radius:0;}"]));
    }
  }]);

  return SplitButton;
}(React.Component);

SplitButton.defaultProps = {
  dataTest: 'dhis2-uicore-splitbutton'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} component
 * @prop {string} [children]
 * @prop {string} [className]
 * @prop {string} [name]
 * @prop {string} [value]
 * @prop {string} [tabIndex]
 * @prop {function} [onClick]
 * @prop {Element} [icon]
 * @prop {boolean} [small] - `small` and `large` are mutually exclusive
 * @prop {boolean} [large]
 * @prop {string} [type] Type of button: `submit`, `reset`, or
 * `button`
 * @prop {boolean } [primary] - `primary`, `secondary`, and
 * `destructive` are mutually exclusive boolean props
 * @prop {boolean } [secondary]
 * @prop {boolean } [destructive]
 * @prop {boolean } [disabled]
 * @prop {boolean} [initialFocus] Grants the button the initial focus
 * @prop {string} [dataTest]
 */

SplitButton.propTypes = {
  component: propTypes.element.isRequired,
  children: propTypes.string,
  className: propTypes.string,
  dataTest: propTypes.string,
  destructive: buttonVariantPropType,
  disabled: propTypes.bool,
  icon: propTypes.element,
  initialFocus: propTypes.bool,
  large: sizePropType,
  name: propTypes.string,
  primary: buttonVariantPropType,
  secondary: buttonVariantPropType,
  small: sizePropType,
  tabIndex: propTypes.string,
  type: propTypes.oneOf(['submit', 'reset', 'button']),
  value: propTypes.string,
  onClick: propTypes.func
};

/**
 * @module
 * @param {Tab.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { Tab } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/tab.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tabs--default-fluid|Storybook}
 */

var Tab = function Tab(_ref) {
  var icon = _ref.icon,
      onClick = _ref.onClick,
      selected = _ref.selected,
      disabled = _ref.disabled,
      children = _ref.children,
      className = _ref.className,
      dataTest = _ref.dataTest;
  return React__default.createElement("button", {
    onClick: disabled ? undefined : function (event) {
      return onClick({}, event);
    },
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["1376158693", [colors.grey400, colors.grey600, colors.grey600, colors.grey100, colors.grey200, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]]]) + " " + "".concat(cx('tab', className, {
      selected: selected,
      disabled: disabled
    }))
  }, icon, React__default.createElement("span", {
    className: _JSXStyle.dynamic([["1376158693", [colors.grey400, colors.grey600, colors.grey600, colors.grey100, colors.grey200, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]]])
  }, children), React__default.createElement(_JSXStyle, {
    id: "1376158693",
    dynamic: [colors.grey400, colors.grey600, colors.grey600, colors.grey100, colors.grey200, theme.primary700, theme.primary700, theme.primary700, colors.grey500, colors.grey500]
  }, ["button.__jsx-style-dynamic-selector{-webkit-box-flex:0;-webkit-flex-grow:0;-ms-flex-positive:0;flex-grow:0;position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;vertical-align:bottom;height:100%;padding:16px 16px 11px;background-color:transparent;outline:none;border:none;border-bottom:1px solid ".concat(colors.grey400, ";color:").concat(colors.grey600, ";font-size:14px;line-height:20px;-webkit-transition:all 150ms ease-in-out;transition:all 150ms ease-in-out;-webkit-transition-property:color,background-color;transition-property:color,background-color;cursor:pointer;}"), ".fixed>button.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", "button.__jsx-style-dynamic-selector::after{content:' ';display:block;position:absolute;bottom:-1px;left:0;height:4px;width:100%;-webkit-transition:background-color 150ms ease-in-out;transition:background-color 150ms ease-in-out;background-color:transparent;}", "span.__jsx-style-dynamic-selector{max-width:320px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-webkit-transition:fill 150ms ease-in-out;transition:fill 150ms ease-in-out;}", "button.__jsx-style-dynamic-selector>svg{fill:".concat(colors.grey600, ";width:14px;height:14px;margin:0 4px 0 0;}"), "button.__jsx-style-dynamic-selector:hover{background-color:".concat(colors.grey100, ";}"), "button.__jsx-style-dynamic-selector:active{background-color:".concat(colors.grey200, ";}"), "button.selected.__jsx-style-dynamic-selector{color:".concat(theme.primary700, ";}"), "button.selected.__jsx-style-dynamic-selector::after{background-color:".concat(theme.primary700, ";}"), "button.selected.__jsx-style-dynamic-selector>svg{fill:".concat(theme.primary700, ";}"), "button.disabled.__jsx-style-dynamic-selector{color:".concat(colors.grey500, ";cursor:not-allowed;}"), "button.disabled.__jsx-style-dynamic-selector:hover,button.selected.__jsx-style-dynamic-selector:hover{background-color:transparent;}", "button.disabled.__jsx-style-dynamic-selector>svg{fill:".concat(colors.grey500, ";}")]));
};

Tab.defaultProps = {
  dataTest: 'dhis2-uicore-tab'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Element} [icon]
 * @prop {function} [onClick]
 * @prop {boolean} [selected]
 * @prop {boolean} [disabled]
 * @prop {Node} [children]
 * @prop {string} [className]
 * @prop {string} [dataTest]
 */

Tab.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  disabled: propTypes.bool,
  icon: propTypes.element,
  selected: propTypes.bool,
  onClick: propTypes.func
};

var horizontalScrollbarHeight;
var className = '__vertical-scrollbar-height-test__';
var styles$6 = "\n    .".concat(className, " {\n        position: absolute;\n        top: -9999px;\n        width: 100px;\n        height: 100px;\n        overflow-x: scroll;\n    }\n    .").concat(className, "::-webkit-scrollbar {\n        display: none;\n    }\n");
function detectHorizontalScrollbarHeight() {
  if (horizontalScrollbarHeight) {
    return horizontalScrollbarHeight;
  }

  var style = document.createElement('style');
  style.innerHTML = styles$6;
  var el = document.createElement('div');
  el.classList.add(className);
  document.body.appendChild(style);
  document.body.appendChild(el);
  horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
  document.body.removeChild(style);
  document.body.removeChild(el);
  return horizontalScrollbarHeight;
}

var DURATION = 250;
var SCROLL_STEP = 0.5;
function animatedSideScroll(scrollBox, callback) {
  var goBackwards = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var startValue = scrollBox.scrollLeft;
  var endValue = getEndValue(scrollBox, startValue, goBackwards);
  var change = endValue - startValue;
  var step = createFrameStepper({
    scrollBox: scrollBox,
    callback: callback,
    startValue: startValue,
    endValue: endValue,
    change: change
  });
  window.requestAnimationFrame(step);
}

function getEndValue(scrollBox, startValue, goBackwards) {
  var scrollDistance = scrollBox.clientWidth * SCROLL_STEP;
  var inverter = goBackwards ? -1 : 1;
  return Math.floor(startValue + scrollDistance * inverter);
}

function createFrameStepper(_ref) {
  var scrollBox = _ref.scrollBox,
      callback = _ref.callback,
      startValue = _ref.startValue,
      endValue = _ref.endValue,
      change = _ref.change;
  var startTimestamp, elapsedTime, scrollValue;
  return function step(timestamp) {
    if (!startTimestamp) {
      startTimestamp = timestamp;
    }

    elapsedTime = timestamp - startTimestamp;
    scrollValue = easeInOutQuad({
      currentTime: elapsedTime,
      DURATION: DURATION,
      startValue: startValue,
      change: change
    });

    if (elapsedTime >= DURATION) {
      if (scrollValue !== endValue) {
        scrollBox.scrollLeft = endValue;
      }

      callback && callback();
    } else {
      scrollBox.scrollLeft = scrollValue;
      window.requestAnimationFrame(step);
    }
  };
}

function easeInOutQuad(_ref2) {
  var currentTime = _ref2.currentTime,
      startValue = _ref2.startValue,
      change = _ref2.change;
  return (currentTime /= DURATION / 2) < 1 ? change / 2 * currentTime * currentTime + startValue : -change / 2 * (--currentTime * (currentTime - 2) - 1) + startValue;
}

/**
 * @module
 * @private
 * @param {ScrollBar.PropTypes} props
 * @returns {React.Component}
 */

var ScrollBar =
/*#__PURE__*/
function (_Component) {
  _inherits(ScrollBar, _Component);

  function ScrollBar() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ScrollBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollBar)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "scrollBox", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "scrollArea", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "state", {
      scrolledToStart: false,
      scrolledToEnd: false
    });

    _defineProperty(_assertThisInitialized(_this), "horizontalScrollBarHeight", detectHorizontalScrollbarHeight());

    _defineProperty(_assertThisInitialized(_this), "scrollRight", function () {
      return _this.scroll();
    });

    _defineProperty(_assertThisInitialized(_this), "scrollLeft", function () {
      return _this.scroll(true);
    });

    _defineProperty(_assertThisInitialized(_this), "animatedScrollCallback", function () {
      _this.toggleScrollButtonVisibility();

      _this.attachSideScrollListener();
    });

    _defineProperty(_assertThisInitialized(_this), "toggleScrollButtonVisibility", function () {
      var _this$scrollBox$curre = _this.scrollBox.current,
          scrollLeft = _this$scrollBox$curre.scrollLeft,
          offsetWidth = _this$scrollBox$curre.offsetWidth;
      var areaOffsetWidth = _this.scrollArea.current.offsetWidth;
      var scrolledToStart = scrollLeft <= 0;
      var scrolledToEnd = scrollLeft + offsetWidth >= areaOffsetWidth;

      if (_this.state.scrolledToStart !== scrolledToStart || _this.state.scrolledToEnd !== scrolledToEnd) {
        _this.setState({
          scrolledToStart: scrolledToStart,
          scrolledToEnd: scrolledToEnd
        });
      }
    });

    return _this;
  }

  _createClass(ScrollBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.scrollSelectedTabIntoView();
      this.attachSideScrollListener();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeSideScrollListener();
    }
  }, {
    key: "scroll",
    value: function scroll(goBackwards) {
      this.removeSideScrollListener();
      animatedSideScroll(this.scrollBox.current, this.animatedScrollCallback, goBackwards);
    }
  }, {
    key: "scrollSelectedTabIntoView",
    value: function scrollSelectedTabIntoView() {
      var scrollBoxEl = this.scrollBox.current;
      var tab = scrollBoxEl.querySelector('.tab.selected');

      if (tab) {
        var tabEnd = tab.offsetLeft + tab.offsetWidth;

        if (tabEnd > scrollBoxEl.offsetWidth) {
          scrollBoxEl.scrollLeft = tabEnd - scrollBoxEl.offsetWidth;
        }
      }
    }
  }, {
    key: "attachSideScrollListener",
    value: function attachSideScrollListener() {
      this.scrollBox.current.addEventListener('scroll', this.toggleScrollButtonVisibility);
    }
  }, {
    key: "removeSideScrollListener",
    value: function removeSideScrollListener() {
      this.scrollBox.current.removeEventListener('scroll', this.toggleScrollButtonVisibility);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          scrolledToStart = _this$state.scrolledToStart,
          scrolledToEnd = _this$state.scrolledToEnd;
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          dataTest = _this$props.dataTest;
      return React__default.createElement("div", {
        "data-test": dataTest,
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + (cx('scroll-bar', className) || "")
      }, React__default.createElement("button", {
        onClick: scrolledToStart ? undefined : this.scrollLeft,
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + (cx('scroll-button', {
          disabled: scrolledToStart
        }) || "")
      }, React__default.createElement(ChevronLeft, null)), React__default.createElement("div", {
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + "scroll-box-clipper"
      }, React__default.createElement("div", {
        ref: this.scrollBox,
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + "scroll-box"
      }, React__default.createElement("div", {
        ref: this.scrollArea,
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + "scroll-area"
      }, children))), React__default.createElement("button", {
        onClick: scrolledToEnd ? undefined : this.scrollRight,
        className: "jsx-4061674243 " + _JSXStyle.dynamic([["1341056994", [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]]]) + " " + (cx('scroll-button', {
          disabled: scrolledToEnd
        }) || "")
      }, React__default.createElement(ChevronRight, null)), React__default.createElement(_JSXStyle, {
        id: "4061674243"
      }, [".scroll-box.jsx-4061674243{margin-bottom:".concat(-this.horizontalScrollBarHeight, "px;}")]), React__default.createElement(_JSXStyle, {
        id: "1341056994",
        dynamic: [colors.white, colors.grey400, colors.grey600, colors.grey100, colors.grey200, colors.grey500]
      }, [".scroll-bar.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}", ".scroll-button.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:inherit;background-color:".concat(colors.white, ";border:none;border-bottom:1px solid ").concat(colors.grey400, ";outline:none;padding:16px 16px 11px 16px;cursor:pointer;}"), ".scroll-button.__jsx-style-dynamic-selector svg{width:20px;height:20px;fill:".concat(colors.grey600, ";-webkit-transition:opacity 150ms ease-in-out;transition:opacity 150ms ease-in-out;opacity:1;}"), ".scroll-button.__jsx-style-dynamic-selector:hover{background-color:".concat(colors.grey100, ";}"), ".scroll-button.__jsx-style-dynamic-selector:active{background-color:".concat(colors.grey200, ";}"), ".scroll-button.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;}", ".scroll-button.disabled.__jsx-style-dynamic-selector:hover{background-color:transparent;}", ".scroll-button.disabled.__jsx-style-dynamic-selector svg{fill:".concat(colors.grey500, ";}"), ".scroll-box-clipper.__jsx-style-dynamic-selector{overflow-y:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".scroll-box.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;overflow-x:scroll;-webkit-overflow-scrolling:touch;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".scroll-box.__jsx-style-dynamic-selector::-webkit-scrollbar{display:none;}", ".scroll-area.__jsx-style-dynamic-selector{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;overflow-x:hidden;}"]));
    }
  }]);

  return ScrollBar;
}(React.Component);
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {string} [className]
 */


ScrollBar.propTypes = {
  children: propTypes.node.isRequired,
  dataTest: propTypes.string.isRequired,
  className: propTypes.string
};

/**
 * @module
 * @private
 * @param {Object} PropTypes
 * @returns {React.Component}
 */

var Tabs = function Tabs(_ref) {
  var children = _ref.children,
      fixed = _ref.fixed,
      dataTest = _ref.dataTest;
  return React__default.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["2678989862", [colors.grey400, colors.white]]]) + " " + (cx({
      fixed: fixed
    }) || "")
  }, children, React__default.createElement(_JSXStyle, {
    id: "2678989862",
    dynamic: [colors.grey400, colors.white]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;position:relative;overflow:hidden;box-shadow:inset 0 -1px 0 0 ".concat(colors.grey400, ";-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;background:").concat(colors.white, ";}")]));
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Node} children
 * @prop {boolean} [fixed]
 * @prop {string} [dataTest]
 */


Tabs.propTypes = {
  dataTest: propTypes.string.isRequired,
  children: propTypes.node,
  fixed: propTypes.bool
};

/**
 * @module
 * @param {TabBar.PropTypes} props
 * @returns {React.Component}
 *
 * @example import { TabBar } from '@dhis2/ui-core'
 *
 * @see Specification: {@link https://github.com/dhis2/design-system/blob/master/molecules/tab.md|Design system}
 * @see Live demo: {@link /demo/?path=/story/tabs--default-fluid|Storybook}
 */

var TabBar = function TabBar(_ref) {
  var fixed = _ref.fixed,
      children = _ref.children,
      className = _ref.className,
      scrollable = _ref.scrollable,
      dataTest = _ref.dataTest;

  if (scrollable) {
    return React__default.createElement("div", {
      className: className,
      "data-test": dataTest
    }, React__default.createElement(ScrollBar, {
      dataTest: "".concat(dataTest, "-scrollbar")
    }, React__default.createElement(Tabs, {
      fixed: fixed,
      dataTest: "".concat(dataTest, "-tabs")
    }, children)));
  }

  return React__default.createElement("div", {
    className: className,
    "data-test": dataTest
  }, React__default.createElement(Tabs, {
    fixed: fixed,
    dataTest: "".concat(dataTest, "-tabs")
  }, children));
};

TabBar.defaultProps = {
  dataTest: 'dhis2-uicore-tabbar'
};
/**
 * @typedef {Object} PropTypes
 * @static
 * @prop {Tab|Array.<Tab>} children
 * @prop {string} [className]
 * @prop {boolean} [fixed]
 * @prop {boolean} [scrollable]
 * @prop {string} [dataTest]
 * @prop {string} [dataTest]
 */

TabBar.propTypes = {
  children: propTypes.node,
  className: propTypes.string,
  dataTest: propTypes.string,
  fixed: propTypes.bool,
  scrollable: propTypes.bool
};

exports.AlertBar = AlertBar;
exports.AlertStack = AlertStack;
exports.Button = Button;
exports.ButtonStrip = ButtonStrip;
exports.Card = Card;
exports.Checkbox = Checkbox;
exports.CheckboxField = CheckboxField;
exports.CheckboxGroup = CheckboxGroup;
exports.CheckboxGroupField = CheckboxGroupField;
exports.Chip = Chip;
exports.CircularLoader = CircularLoader;
exports.ComponentCover = ComponentCover;
exports.Constrictor = Constrictor;
exports.CssReset = CssReset;
exports.CssVariables = CssVariables;
exports.Divider = Divider;
exports.DropdownButton = DropdownButton;
exports.Field = Field;
exports.FieldSet = FieldSet;
exports.FileInput = FileInput;
exports.FileInputField = FileInputField;
exports.FileList = FileList;
exports.FileListItem = FileListItem;
exports.FileListPlaceholder = FileListPlaceholder;
exports.Help = Help;
exports.Input = Input;
exports.InputField = InputField;
exports.Label = Label;
exports.Legend = Legend;
exports.LinearLoader = LinearLoader;
exports.Logo = Logo;
exports.LogoIcon = LogoIcon;
exports.LogoIconWhite = LogoIconWhite;
exports.LogoWhite = LogoWhite;
exports.Menu = Menu$2;
exports.MenuItem = MenuItem;
exports.MenuList = MenuList;
exports.Modal = Modal;
exports.ModalActions = ModalActions;
exports.ModalContent = ModalContent;
exports.ModalTitle = ModalTitle;
exports.MultiSelect = MultiSelect;
exports.MultiSelectField = MultiSelectField;
exports.MultiSelectOption = MultiSelectOption;
exports.Node = Node;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
exports.RadioGroupField = RadioGroupField;
exports.ScreenCover = ScreenCover;
exports.SingleSelect = SingleSelect;
exports.SingleSelectField = SingleSelectField;
exports.SingleSelectOption = SingleSelectOption;
exports.SplitButton = SplitButton;
exports.StackedTable = StackedTable;
exports.StackedTableBody = StackedTableBody;
exports.StackedTableCell = StackedTableCell;
exports.StackedTableCellHead = StackedTableCellHead;
exports.StackedTableFoot = StackedTableFoot;
exports.StackedTableHead = StackedTableHead;
exports.StackedTableRow = StackedTableRow;
exports.StackedTableRowHead = StackedTableRowHead;
exports.Switch = Switch;
exports.SwitchField = SwitchField;
exports.SwitchGroup = SwitchGroup;
exports.SwitchGroupField = SwitchGroupField;
exports.Tab = Tab;
exports.TabBar = TabBar;
exports.Table = Table;
exports.TableBody = TableBody;
exports.TableCell = TableCell;
exports.TableCellHead = TableCellHead;
exports.TableFoot = TableFoot;
exports.TableHead = TableHead;
exports.TableRow = TableRow;
exports.TableRowHead = TableRowHead;
exports.TextArea = TextArea;
exports.TextAreaField = TextAreaField;
exports.colors = colors;
exports.elevations = elevations;
exports.layers = layers;
exports.spacers = spacers;
exports.theme = theme;
//# sourceMappingURL=lib.js.map
